// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TChatSvr.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class TChatSvrHandler : virtual public TChatSvrIf {
 public:
  TChatSvrHandler() {
    // Your initialization goes here
  }

  bool procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra) {
    // Your implementation goes here
    printf("procGroupChatReq\n");
  }

  bool procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype) {
    // Your implementation goes here
    printf("procUserJoinGroupNotify\n");
  }

  int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser) {
    // Your implementation goes here
    printf("proc_addGroupAssistMsg\n");
  }

  bool handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) {
    // Your implementation goes here
    printf("handle_approveGroupAssistMsg\n");
  }

  bool handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key) {
    // Your implementation goes here
    printf("handle_voice_callback\n");
  }

  bool handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace) {
    // Your implementation goes here
    printf("handle_keyword_action\n");
  }

  bool proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType) {
    // Your implementation goes here
    printf("proc_optPPTPic\n");
  }

  bool proc_commentAudit(const TChatAuditMsg& tTChatMsg) {
    // Your implementation goes here
    printf("proc_commentAudit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TChatSvrHandler> handler(new TChatSvrHandler());
  shared_ptr<TProcessor> processor(new TChatSvrProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

