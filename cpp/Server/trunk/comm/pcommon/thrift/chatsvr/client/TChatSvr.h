/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TChatSvr_H
#define TChatSvr_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TChatSvrIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TChatSvrIf {
 public:
  virtual ~TChatSvrIf() {}
  virtual bool procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra) = 0;
  virtual bool procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype) = 0;
  virtual int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser) = 0;
  virtual bool handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual bool handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key) = 0;
  virtual bool handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace) = 0;
  virtual bool proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType) = 0;
};

class TChatSvrIfFactory {
 public:
  typedef TChatSvrIf Handler;

  virtual ~TChatSvrIfFactory() {}

  virtual TChatSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TChatSvrIf* /* handler */) = 0;
};

class TChatSvrIfSingletonFactory : virtual public TChatSvrIfFactory {
 public:
  TChatSvrIfSingletonFactory(const boost::shared_ptr<TChatSvrIf>& iface) : iface_(iface) {}
  virtual ~TChatSvrIfSingletonFactory() {}

  virtual TChatSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TChatSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<TChatSvrIf> iface_;
};

class TChatSvrNull : virtual public TChatSvrIf {
 public:
  virtual ~TChatSvrNull() {}
  bool procGroupChatReq(const int32_t /* groupid */, const TChatMsg& /* chatMsg */, const TChatMsgExtra& /* extra */) {
    bool _return = false;
    return _return;
  }
  bool procUserJoinGroupNotify(const int32_t /* userid */, const int32_t /* groupid */, const int32_t /* roletype */) {
    bool _return = false;
    return _return;
  }
  int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& /* assistMsg */, const bool /* bNotyAdmin */, const bool /* bNotyUser */) {
    int32_t _return = 0;
    return _return;
  }
  bool handle_approveGroupAssistMsg(const int32_t /* handle_userid */, const int32_t /* groupid */, const int32_t /* msgid */, const bool /* agree */, const int32_t /* apply_userid */) {
    bool _return = false;
    return _return;
  }
  bool handle_voice_callback(const std::string& /* inputkey */, const int32_t /* code */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  bool handle_keyword_action(const int32_t /* action */, const std::string& /* value */, const std::string& /* replace */) {
    bool _return = false;
    return _return;
  }
  bool proc_optPPTPic(const std::vector<TPPTPicInfo> & /* vecPicId */, const int32_t /* optType */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TChatSvr_procGroupChatReq_args__isset {
  _TChatSvr_procGroupChatReq_args__isset() : groupid(false), chatMsg(false), extra(false) {}
  bool groupid :1;
  bool chatMsg :1;
  bool extra :1;
} _TChatSvr_procGroupChatReq_args__isset;

class TChatSvr_procGroupChatReq_args {
 public:

  TChatSvr_procGroupChatReq_args(const TChatSvr_procGroupChatReq_args&);
  TChatSvr_procGroupChatReq_args& operator=(const TChatSvr_procGroupChatReq_args&);
  TChatSvr_procGroupChatReq_args() : groupid(0) {
  }

  virtual ~TChatSvr_procGroupChatReq_args() throw();
  int32_t groupid;
  TChatMsg chatMsg;
  TChatMsgExtra extra;

  _TChatSvr_procGroupChatReq_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_chatMsg(const TChatMsg& val);

  void __set_extra(const TChatMsgExtra& val);

  bool operator == (const TChatSvr_procGroupChatReq_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(chatMsg == rhs.chatMsg))
      return false;
    if (!(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_procGroupChatReq_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_procGroupChatReq_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_procGroupChatReq_pargs {
 public:


  virtual ~TChatSvr_procGroupChatReq_pargs() throw();
  const int32_t* groupid;
  const TChatMsg* chatMsg;
  const TChatMsgExtra* extra;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_procGroupChatReq_result__isset {
  _TChatSvr_procGroupChatReq_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_procGroupChatReq_result__isset;

class TChatSvr_procGroupChatReq_result {
 public:

  TChatSvr_procGroupChatReq_result(const TChatSvr_procGroupChatReq_result&);
  TChatSvr_procGroupChatReq_result& operator=(const TChatSvr_procGroupChatReq_result&);
  TChatSvr_procGroupChatReq_result() : success(0) {
  }

  virtual ~TChatSvr_procGroupChatReq_result() throw();
  bool success;

  _TChatSvr_procGroupChatReq_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_procGroupChatReq_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_procGroupChatReq_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_procGroupChatReq_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_procGroupChatReq_presult__isset {
  _TChatSvr_procGroupChatReq_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_procGroupChatReq_presult__isset;

class TChatSvr_procGroupChatReq_presult {
 public:


  virtual ~TChatSvr_procGroupChatReq_presult() throw();
  bool* success;

  _TChatSvr_procGroupChatReq_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_procUserJoinGroupNotify_args__isset {
  _TChatSvr_procUserJoinGroupNotify_args__isset() : userid(false), groupid(false), roletype(true) {}
  bool userid :1;
  bool groupid :1;
  bool roletype :1;
} _TChatSvr_procUserJoinGroupNotify_args__isset;

class TChatSvr_procUserJoinGroupNotify_args {
 public:

  TChatSvr_procUserJoinGroupNotify_args(const TChatSvr_procUserJoinGroupNotify_args&);
  TChatSvr_procUserJoinGroupNotify_args& operator=(const TChatSvr_procUserJoinGroupNotify_args&);
  TChatSvr_procUserJoinGroupNotify_args() : userid(0), groupid(0), roletype(10) {
  }

  virtual ~TChatSvr_procUserJoinGroupNotify_args() throw();
  int32_t userid;
  int32_t groupid;
  int32_t roletype;

  _TChatSvr_procUserJoinGroupNotify_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_roletype(const int32_t val);

  bool operator == (const TChatSvr_procUserJoinGroupNotify_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(roletype == rhs.roletype))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_procUserJoinGroupNotify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_procUserJoinGroupNotify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_procUserJoinGroupNotify_pargs {
 public:


  virtual ~TChatSvr_procUserJoinGroupNotify_pargs() throw();
  const int32_t* userid;
  const int32_t* groupid;
  const int32_t* roletype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_procUserJoinGroupNotify_result__isset {
  _TChatSvr_procUserJoinGroupNotify_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_procUserJoinGroupNotify_result__isset;

class TChatSvr_procUserJoinGroupNotify_result {
 public:

  TChatSvr_procUserJoinGroupNotify_result(const TChatSvr_procUserJoinGroupNotify_result&);
  TChatSvr_procUserJoinGroupNotify_result& operator=(const TChatSvr_procUserJoinGroupNotify_result&);
  TChatSvr_procUserJoinGroupNotify_result() : success(0) {
  }

  virtual ~TChatSvr_procUserJoinGroupNotify_result() throw();
  bool success;

  _TChatSvr_procUserJoinGroupNotify_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_procUserJoinGroupNotify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_procUserJoinGroupNotify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_procUserJoinGroupNotify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_procUserJoinGroupNotify_presult__isset {
  _TChatSvr_procUserJoinGroupNotify_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_procUserJoinGroupNotify_presult__isset;

class TChatSvr_procUserJoinGroupNotify_presult {
 public:


  virtual ~TChatSvr_procUserJoinGroupNotify_presult() throw();
  bool* success;

  _TChatSvr_procUserJoinGroupNotify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_addGroupAssistMsg_args__isset {
  _TChatSvr_proc_addGroupAssistMsg_args__isset() : assistMsg(false), bNotyAdmin(true), bNotyUser(true) {}
  bool assistMsg :1;
  bool bNotyAdmin :1;
  bool bNotyUser :1;
} _TChatSvr_proc_addGroupAssistMsg_args__isset;

class TChatSvr_proc_addGroupAssistMsg_args {
 public:

  TChatSvr_proc_addGroupAssistMsg_args(const TChatSvr_proc_addGroupAssistMsg_args&);
  TChatSvr_proc_addGroupAssistMsg_args& operator=(const TChatSvr_proc_addGroupAssistMsg_args&);
  TChatSvr_proc_addGroupAssistMsg_args() : bNotyAdmin(true), bNotyUser(true) {
  }

  virtual ~TChatSvr_proc_addGroupAssistMsg_args() throw();
  TGroupAssistMsg assistMsg;
  bool bNotyAdmin;
  bool bNotyUser;

  _TChatSvr_proc_addGroupAssistMsg_args__isset __isset;

  void __set_assistMsg(const TGroupAssistMsg& val);

  void __set_bNotyAdmin(const bool val);

  void __set_bNotyUser(const bool val);

  bool operator == (const TChatSvr_proc_addGroupAssistMsg_args & rhs) const
  {
    if (!(assistMsg == rhs.assistMsg))
      return false;
    if (!(bNotyAdmin == rhs.bNotyAdmin))
      return false;
    if (!(bNotyUser == rhs.bNotyUser))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_proc_addGroupAssistMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_proc_addGroupAssistMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_proc_addGroupAssistMsg_pargs {
 public:


  virtual ~TChatSvr_proc_addGroupAssistMsg_pargs() throw();
  const TGroupAssistMsg* assistMsg;
  const bool* bNotyAdmin;
  const bool* bNotyUser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_addGroupAssistMsg_result__isset {
  _TChatSvr_proc_addGroupAssistMsg_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_proc_addGroupAssistMsg_result__isset;

class TChatSvr_proc_addGroupAssistMsg_result {
 public:

  TChatSvr_proc_addGroupAssistMsg_result(const TChatSvr_proc_addGroupAssistMsg_result&);
  TChatSvr_proc_addGroupAssistMsg_result& operator=(const TChatSvr_proc_addGroupAssistMsg_result&);
  TChatSvr_proc_addGroupAssistMsg_result() : success(0) {
  }

  virtual ~TChatSvr_proc_addGroupAssistMsg_result() throw();
  int32_t success;

  _TChatSvr_proc_addGroupAssistMsg_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TChatSvr_proc_addGroupAssistMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_proc_addGroupAssistMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_proc_addGroupAssistMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_addGroupAssistMsg_presult__isset {
  _TChatSvr_proc_addGroupAssistMsg_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_proc_addGroupAssistMsg_presult__isset;

class TChatSvr_proc_addGroupAssistMsg_presult {
 public:


  virtual ~TChatSvr_proc_addGroupAssistMsg_presult() throw();
  int32_t* success;

  _TChatSvr_proc_addGroupAssistMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_approveGroupAssistMsg_args__isset {
  _TChatSvr_handle_approveGroupAssistMsg_args__isset() : handle_userid(false), groupid(false), msgid(false), agree(false), apply_userid(false) {}
  bool handle_userid :1;
  bool groupid :1;
  bool msgid :1;
  bool agree :1;
  bool apply_userid :1;
} _TChatSvr_handle_approveGroupAssistMsg_args__isset;

class TChatSvr_handle_approveGroupAssistMsg_args {
 public:

  TChatSvr_handle_approveGroupAssistMsg_args(const TChatSvr_handle_approveGroupAssistMsg_args&);
  TChatSvr_handle_approveGroupAssistMsg_args& operator=(const TChatSvr_handle_approveGroupAssistMsg_args&);
  TChatSvr_handle_approveGroupAssistMsg_args() : handle_userid(0), groupid(0), msgid(0), agree(0), apply_userid(0) {
  }

  virtual ~TChatSvr_handle_approveGroupAssistMsg_args() throw();
  int32_t handle_userid;
  int32_t groupid;
  int32_t msgid;
  bool agree;
  int32_t apply_userid;

  _TChatSvr_handle_approveGroupAssistMsg_args__isset __isset;

  void __set_handle_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_msgid(const int32_t val);

  void __set_agree(const bool val);

  void __set_apply_userid(const int32_t val);

  bool operator == (const TChatSvr_handle_approveGroupAssistMsg_args & rhs) const
  {
    if (!(handle_userid == rhs.handle_userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(msgid == rhs.msgid))
      return false;
    if (!(agree == rhs.agree))
      return false;
    if (!(apply_userid == rhs.apply_userid))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_approveGroupAssistMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_approveGroupAssistMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_handle_approveGroupAssistMsg_pargs {
 public:


  virtual ~TChatSvr_handle_approveGroupAssistMsg_pargs() throw();
  const int32_t* handle_userid;
  const int32_t* groupid;
  const int32_t* msgid;
  const bool* agree;
  const int32_t* apply_userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_approveGroupAssistMsg_result__isset {
  _TChatSvr_handle_approveGroupAssistMsg_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_approveGroupAssistMsg_result__isset;

class TChatSvr_handle_approveGroupAssistMsg_result {
 public:

  TChatSvr_handle_approveGroupAssistMsg_result(const TChatSvr_handle_approveGroupAssistMsg_result&);
  TChatSvr_handle_approveGroupAssistMsg_result& operator=(const TChatSvr_handle_approveGroupAssistMsg_result&);
  TChatSvr_handle_approveGroupAssistMsg_result() : success(0) {
  }

  virtual ~TChatSvr_handle_approveGroupAssistMsg_result() throw();
  bool success;

  _TChatSvr_handle_approveGroupAssistMsg_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_handle_approveGroupAssistMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_approveGroupAssistMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_approveGroupAssistMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_approveGroupAssistMsg_presult__isset {
  _TChatSvr_handle_approveGroupAssistMsg_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_approveGroupAssistMsg_presult__isset;

class TChatSvr_handle_approveGroupAssistMsg_presult {
 public:


  virtual ~TChatSvr_handle_approveGroupAssistMsg_presult() throw();
  bool* success;

  _TChatSvr_handle_approveGroupAssistMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_voice_callback_args__isset {
  _TChatSvr_handle_voice_callback_args__isset() : inputkey(false), code(false), key(false) {}
  bool inputkey :1;
  bool code :1;
  bool key :1;
} _TChatSvr_handle_voice_callback_args__isset;

class TChatSvr_handle_voice_callback_args {
 public:

  TChatSvr_handle_voice_callback_args(const TChatSvr_handle_voice_callback_args&);
  TChatSvr_handle_voice_callback_args& operator=(const TChatSvr_handle_voice_callback_args&);
  TChatSvr_handle_voice_callback_args() : inputkey(), code(0), key() {
  }

  virtual ~TChatSvr_handle_voice_callback_args() throw();
  std::string inputkey;
  int32_t code;
  std::string key;

  _TChatSvr_handle_voice_callback_args__isset __isset;

  void __set_inputkey(const std::string& val);

  void __set_code(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const TChatSvr_handle_voice_callback_args & rhs) const
  {
    if (!(inputkey == rhs.inputkey))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_voice_callback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_voice_callback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_handle_voice_callback_pargs {
 public:


  virtual ~TChatSvr_handle_voice_callback_pargs() throw();
  const std::string* inputkey;
  const int32_t* code;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_voice_callback_result__isset {
  _TChatSvr_handle_voice_callback_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_voice_callback_result__isset;

class TChatSvr_handle_voice_callback_result {
 public:

  TChatSvr_handle_voice_callback_result(const TChatSvr_handle_voice_callback_result&);
  TChatSvr_handle_voice_callback_result& operator=(const TChatSvr_handle_voice_callback_result&);
  TChatSvr_handle_voice_callback_result() : success(0) {
  }

  virtual ~TChatSvr_handle_voice_callback_result() throw();
  bool success;

  _TChatSvr_handle_voice_callback_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_handle_voice_callback_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_voice_callback_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_voice_callback_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_voice_callback_presult__isset {
  _TChatSvr_handle_voice_callback_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_voice_callback_presult__isset;

class TChatSvr_handle_voice_callback_presult {
 public:


  virtual ~TChatSvr_handle_voice_callback_presult() throw();
  bool* success;

  _TChatSvr_handle_voice_callback_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_keyword_action_args__isset {
  _TChatSvr_handle_keyword_action_args__isset() : action(false), value(false), replace(false) {}
  bool action :1;
  bool value :1;
  bool replace :1;
} _TChatSvr_handle_keyword_action_args__isset;

class TChatSvr_handle_keyword_action_args {
 public:

  TChatSvr_handle_keyword_action_args(const TChatSvr_handle_keyword_action_args&);
  TChatSvr_handle_keyword_action_args& operator=(const TChatSvr_handle_keyword_action_args&);
  TChatSvr_handle_keyword_action_args() : action(0), value(), replace() {
  }

  virtual ~TChatSvr_handle_keyword_action_args() throw();
  int32_t action;
  std::string value;
  std::string replace;

  _TChatSvr_handle_keyword_action_args__isset __isset;

  void __set_action(const int32_t val);

  void __set_value(const std::string& val);

  void __set_replace(const std::string& val);

  bool operator == (const TChatSvr_handle_keyword_action_args & rhs) const
  {
    if (!(action == rhs.action))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(replace == rhs.replace))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_keyword_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_keyword_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_handle_keyword_action_pargs {
 public:


  virtual ~TChatSvr_handle_keyword_action_pargs() throw();
  const int32_t* action;
  const std::string* value;
  const std::string* replace;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_keyword_action_result__isset {
  _TChatSvr_handle_keyword_action_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_keyword_action_result__isset;

class TChatSvr_handle_keyword_action_result {
 public:

  TChatSvr_handle_keyword_action_result(const TChatSvr_handle_keyword_action_result&);
  TChatSvr_handle_keyword_action_result& operator=(const TChatSvr_handle_keyword_action_result&);
  TChatSvr_handle_keyword_action_result() : success(0) {
  }

  virtual ~TChatSvr_handle_keyword_action_result() throw();
  bool success;

  _TChatSvr_handle_keyword_action_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_handle_keyword_action_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_handle_keyword_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_handle_keyword_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_handle_keyword_action_presult__isset {
  _TChatSvr_handle_keyword_action_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_handle_keyword_action_presult__isset;

class TChatSvr_handle_keyword_action_presult {
 public:


  virtual ~TChatSvr_handle_keyword_action_presult() throw();
  bool* success;

  _TChatSvr_handle_keyword_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_optPPTPic_args__isset {
  _TChatSvr_proc_optPPTPic_args__isset() : vecPicId(false), optType(false) {}
  bool vecPicId :1;
  bool optType :1;
} _TChatSvr_proc_optPPTPic_args__isset;

class TChatSvr_proc_optPPTPic_args {
 public:

  TChatSvr_proc_optPPTPic_args(const TChatSvr_proc_optPPTPic_args&);
  TChatSvr_proc_optPPTPic_args& operator=(const TChatSvr_proc_optPPTPic_args&);
  TChatSvr_proc_optPPTPic_args() : optType(0) {
  }

  virtual ~TChatSvr_proc_optPPTPic_args() throw();
  std::vector<TPPTPicInfo>  vecPicId;
  int32_t optType;

  _TChatSvr_proc_optPPTPic_args__isset __isset;

  void __set_vecPicId(const std::vector<TPPTPicInfo> & val);

  void __set_optType(const int32_t val);

  bool operator == (const TChatSvr_proc_optPPTPic_args & rhs) const
  {
    if (!(vecPicId == rhs.vecPicId))
      return false;
    if (!(optType == rhs.optType))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_proc_optPPTPic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_proc_optPPTPic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TChatSvr_proc_optPPTPic_pargs {
 public:


  virtual ~TChatSvr_proc_optPPTPic_pargs() throw();
  const std::vector<TPPTPicInfo> * vecPicId;
  const int32_t* optType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_optPPTPic_result__isset {
  _TChatSvr_proc_optPPTPic_result__isset() : success(false) {}
  bool success :1;
} _TChatSvr_proc_optPPTPic_result__isset;

class TChatSvr_proc_optPPTPic_result {
 public:

  TChatSvr_proc_optPPTPic_result(const TChatSvr_proc_optPPTPic_result&);
  TChatSvr_proc_optPPTPic_result& operator=(const TChatSvr_proc_optPPTPic_result&);
  TChatSvr_proc_optPPTPic_result() : success(0) {
  }

  virtual ~TChatSvr_proc_optPPTPic_result() throw();
  bool success;

  _TChatSvr_proc_optPPTPic_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TChatSvr_proc_optPPTPic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TChatSvr_proc_optPPTPic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatSvr_proc_optPPTPic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TChatSvr_proc_optPPTPic_presult__isset {
  _TChatSvr_proc_optPPTPic_presult__isset() : success(false) {}
  bool success :1;
} _TChatSvr_proc_optPPTPic_presult__isset;

class TChatSvr_proc_optPPTPic_presult {
 public:


  virtual ~TChatSvr_proc_optPPTPic_presult() throw();
  bool* success;

  _TChatSvr_proc_optPPTPic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TChatSvrClient : virtual public TChatSvrIf {
 public:
  TChatSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TChatSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  void send_procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  bool recv_procGroupChatReq();
  bool procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype);
  void send_procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype);
  bool recv_procUserJoinGroupNotify();
  int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  void send_proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  int32_t recv_proc_addGroupAssistMsg();
  bool handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  void send_handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_handle_approveGroupAssistMsg();
  bool handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key);
  void send_handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key);
  bool recv_handle_voice_callback();
  bool handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace);
  void send_handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace);
  bool recv_handle_keyword_action();
  bool proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  void send_proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  bool recv_proc_optPPTPic();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TChatSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TChatSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TChatSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_procGroupChatReq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_procUserJoinGroupNotify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_addGroupAssistMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handle_approveGroupAssistMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handle_voice_callback(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_handle_keyword_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_optPPTPic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TChatSvrProcessor(boost::shared_ptr<TChatSvrIf> iface) :
    iface_(iface) {
    processMap_["procGroupChatReq"] = &TChatSvrProcessor::process_procGroupChatReq;
    processMap_["procUserJoinGroupNotify"] = &TChatSvrProcessor::process_procUserJoinGroupNotify;
    processMap_["proc_addGroupAssistMsg"] = &TChatSvrProcessor::process_proc_addGroupAssistMsg;
    processMap_["handle_approveGroupAssistMsg"] = &TChatSvrProcessor::process_handle_approveGroupAssistMsg;
    processMap_["handle_voice_callback"] = &TChatSvrProcessor::process_handle_voice_callback;
    processMap_["handle_keyword_action"] = &TChatSvrProcessor::process_handle_keyword_action;
    processMap_["proc_optPPTPic"] = &TChatSvrProcessor::process_proc_optPPTPic;
  }

  virtual ~TChatSvrProcessor() {}
};

class TChatSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TChatSvrProcessorFactory(const ::boost::shared_ptr< TChatSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TChatSvrIfFactory > handlerFactory_;
};

class TChatSvrMultiface : virtual public TChatSvrIf {
 public:
  TChatSvrMultiface(std::vector<boost::shared_ptr<TChatSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TChatSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TChatSvrIf> > ifaces_;
  TChatSvrMultiface() {}
  void add(boost::shared_ptr<TChatSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->procGroupChatReq(groupid, chatMsg, extra);
    }
    return ifaces_[i]->procGroupChatReq(groupid, chatMsg, extra);
  }

  bool procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->procUserJoinGroupNotify(userid, groupid, roletype);
    }
    return ifaces_[i]->procUserJoinGroupNotify(userid, groupid, roletype);
  }

  int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_addGroupAssistMsg(assistMsg, bNotyAdmin, bNotyUser);
    }
    return ifaces_[i]->proc_addGroupAssistMsg(assistMsg, bNotyAdmin, bNotyUser);
  }

  bool handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handle_approveGroupAssistMsg(handle_userid, groupid, msgid, agree, apply_userid);
    }
    return ifaces_[i]->handle_approveGroupAssistMsg(handle_userid, groupid, msgid, agree, apply_userid);
  }

  bool handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handle_voice_callback(inputkey, code, key);
    }
    return ifaces_[i]->handle_voice_callback(inputkey, code, key);
  }

  bool handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->handle_keyword_action(action, value, replace);
    }
    return ifaces_[i]->handle_keyword_action(action, value, replace);
  }

  bool proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_optPPTPic(vecPicId, optType);
    }
    return ifaces_[i]->proc_optPPTPic(vecPicId, optType);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TChatSvrConcurrentClient : virtual public TChatSvrIf {
 public:
  TChatSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TChatSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  int32_t send_procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  bool recv_procGroupChatReq(const int32_t seqid);
  bool procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype);
  int32_t send_procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype);
  bool recv_procUserJoinGroupNotify(const int32_t seqid);
  int32_t proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  int32_t send_proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  int32_t recv_proc_addGroupAssistMsg(const int32_t seqid);
  bool handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  int32_t send_handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_handle_approveGroupAssistMsg(const int32_t seqid);
  bool handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key);
  int32_t send_handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key);
  bool recv_handle_voice_callback(const int32_t seqid);
  bool handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace);
  int32_t send_handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace);
  bool recv_handle_keyword_action(const int32_t seqid);
  bool proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  int32_t send_proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  bool recv_proc_optPPTPic(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TChatSvrCobClient;

class TChatSvrCobClIf {
 public:
  virtual ~TChatSvrCobClIf() {}
  virtual void procGroupChatReq(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra) = 0;
  virtual void procUserJoinGroupNotify(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t userid, const int32_t groupid, const int32_t roletype) = 0;
  virtual void proc_addGroupAssistMsg(tcxx::function<void(TChatSvrCobClient* client)> cob, const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser) = 0;
  virtual void handle_approveGroupAssistMsg(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual void handle_voice_callback(tcxx::function<void(TChatSvrCobClient* client)> cob, const std::string& inputkey, const int32_t code, const std::string& key) = 0;
  virtual void handle_keyword_action(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t action, const std::string& value, const std::string& replace) = 0;
  virtual void proc_optPPTPic(tcxx::function<void(TChatSvrCobClient* client)> cob, const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType) = 0;
};

class TChatSvrCobSvIf {
 public:
  virtual ~TChatSvrCobSvIf() {}
  virtual void procGroupChatReq(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra) = 0;
  virtual void procUserJoinGroupNotify(tcxx::function<void(bool const& _return)> cob, const int32_t userid, const int32_t groupid, const int32_t roletype) = 0;
  virtual void proc_addGroupAssistMsg(tcxx::function<void(int32_t const& _return)> cob, const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser) = 0;
  virtual void handle_approveGroupAssistMsg(tcxx::function<void(bool const& _return)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual void handle_voice_callback(tcxx::function<void(bool const& _return)> cob, const std::string& inputkey, const int32_t code, const std::string& key) = 0;
  virtual void handle_keyword_action(tcxx::function<void(bool const& _return)> cob, const int32_t action, const std::string& value, const std::string& replace) = 0;
  virtual void proc_optPPTPic(tcxx::function<void(bool const& _return)> cob, const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType) = 0;
};

class TChatSvrCobSvIfFactory {
 public:
  typedef TChatSvrCobSvIf Handler;

  virtual ~TChatSvrCobSvIfFactory() {}

  virtual TChatSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TChatSvrCobSvIf* /* handler */) = 0;
};

class TChatSvrCobSvIfSingletonFactory : virtual public TChatSvrCobSvIfFactory {
 public:
  TChatSvrCobSvIfSingletonFactory(const boost::shared_ptr<TChatSvrCobSvIf>& iface) : iface_(iface) {}
  virtual ~TChatSvrCobSvIfSingletonFactory() {}

  virtual TChatSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TChatSvrCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TChatSvrCobSvIf> iface_;
};

class TChatSvrCobSvNull : virtual public TChatSvrCobSvIf {
 public:
  virtual ~TChatSvrCobSvNull() {}
  void procGroupChatReq(tcxx::function<void(bool const& _return)> cob, const int32_t /* groupid */, const TChatMsg& /* chatMsg */, const TChatMsgExtra& /* extra */) {
    bool _return = false;
    return cob(_return);
  }
  void procUserJoinGroupNotify(tcxx::function<void(bool const& _return)> cob, const int32_t /* userid */, const int32_t /* groupid */, const int32_t /* roletype */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_addGroupAssistMsg(tcxx::function<void(int32_t const& _return)> cob, const TGroupAssistMsg& /* assistMsg */, const bool /* bNotyAdmin */, const bool /* bNotyUser */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void handle_approveGroupAssistMsg(tcxx::function<void(bool const& _return)> cob, const int32_t /* handle_userid */, const int32_t /* groupid */, const int32_t /* msgid */, const bool /* agree */, const int32_t /* apply_userid */) {
    bool _return = false;
    return cob(_return);
  }
  void handle_voice_callback(tcxx::function<void(bool const& _return)> cob, const std::string& /* inputkey */, const int32_t /* code */, const std::string& /* key */) {
    bool _return = false;
    return cob(_return);
  }
  void handle_keyword_action(tcxx::function<void(bool const& _return)> cob, const int32_t /* action */, const std::string& /* value */, const std::string& /* replace */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_optPPTPic(tcxx::function<void(bool const& _return)> cob, const std::vector<TPPTPicInfo> & /* vecPicId */, const int32_t /* optType */) {
    bool _return = false;
    return cob(_return);
  }
};

class TChatSvrCobClient : virtual public TChatSvrCobClIf {
 public:
  TChatSvrCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void procGroupChatReq(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  void send_procGroupChatReq(const int32_t groupid, const TChatMsg& chatMsg, const TChatMsgExtra& extra);
  bool recv_procGroupChatReq();
  void procUserJoinGroupNotify(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t userid, const int32_t groupid, const int32_t roletype);
  void send_procUserJoinGroupNotify(const int32_t userid, const int32_t groupid, const int32_t roletype);
  bool recv_procUserJoinGroupNotify();
  void proc_addGroupAssistMsg(tcxx::function<void(TChatSvrCobClient* client)> cob, const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  void send_proc_addGroupAssistMsg(const TGroupAssistMsg& assistMsg, const bool bNotyAdmin, const bool bNotyUser);
  int32_t recv_proc_addGroupAssistMsg();
  void handle_approveGroupAssistMsg(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  void send_handle_approveGroupAssistMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_handle_approveGroupAssistMsg();
  void handle_voice_callback(tcxx::function<void(TChatSvrCobClient* client)> cob, const std::string& inputkey, const int32_t code, const std::string& key);
  void send_handle_voice_callback(const std::string& inputkey, const int32_t code, const std::string& key);
  bool recv_handle_voice_callback();
  void handle_keyword_action(tcxx::function<void(TChatSvrCobClient* client)> cob, const int32_t action, const std::string& value, const std::string& replace);
  void send_handle_keyword_action(const int32_t action, const std::string& value, const std::string& replace);
  bool recv_handle_keyword_action();
  void proc_optPPTPic(tcxx::function<void(TChatSvrCobClient* client)> cob, const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  void send_proc_optPPTPic(const std::vector<TPPTPicInfo> & vecPicId, const int32_t optType);
  bool recv_proc_optPPTPic();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TChatSvrAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TChatSvrCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TChatSvrAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_procGroupChatReq(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_procGroupChatReq(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_procGroupChatReq(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_procUserJoinGroupNotify(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_procUserJoinGroupNotify(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_procUserJoinGroupNotify(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_addGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_addGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_addGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_handle_approveGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_handle_approveGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_handle_approveGroupAssistMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_handle_voice_callback(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_handle_voice_callback(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_handle_voice_callback(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_handle_keyword_action(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_handle_keyword_action(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_handle_keyword_action(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_optPPTPic(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_optPPTPic(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_optPPTPic(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TChatSvrAsyncProcessor(boost::shared_ptr<TChatSvrCobSvIf> iface) :
    iface_(iface) {
    processMap_["procGroupChatReq"] = &TChatSvrAsyncProcessor::process_procGroupChatReq;
    processMap_["procUserJoinGroupNotify"] = &TChatSvrAsyncProcessor::process_procUserJoinGroupNotify;
    processMap_["proc_addGroupAssistMsg"] = &TChatSvrAsyncProcessor::process_proc_addGroupAssistMsg;
    processMap_["handle_approveGroupAssistMsg"] = &TChatSvrAsyncProcessor::process_handle_approveGroupAssistMsg;
    processMap_["handle_voice_callback"] = &TChatSvrAsyncProcessor::process_handle_voice_callback;
    processMap_["handle_keyword_action"] = &TChatSvrAsyncProcessor::process_handle_keyword_action;
    processMap_["proc_optPPTPic"] = &TChatSvrAsyncProcessor::process_proc_optPPTPic;
  }

  virtual ~TChatSvrAsyncProcessor() {}
};

class TChatSvrAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TChatSvrAsyncProcessorFactory(const ::boost::shared_ptr< TChatSvrCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TChatSvrCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
