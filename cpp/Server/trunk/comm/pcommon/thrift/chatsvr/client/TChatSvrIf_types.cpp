/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TChatSvrIf_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TChatMsg::~TChatMsg() throw() {
}


void TChatMsg::__set_srcUId(const int32_t val) {
  this->srcUId = val;
}

void TChatMsg::__set_dstUId(const int32_t val) {
  this->dstUId = val;
}

void TChatMsg::__set_msgType(const int8_t val) {
  this->msgType = val;
}

void TChatMsg::__set_content(const std::string& val) {
  this->content = val;
}

uint32_t TChatMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->srcUId);
          this->__isset.srcUId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dstUId);
          this->__isset.dstUId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->msgType);
          this->__isset.msgType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TChatMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TChatMsg");

  xfer += oprot->writeFieldBegin("srcUId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->srcUId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dstUId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dstUId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgType", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->msgType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TChatMsg &a, TChatMsg &b) {
  using ::std::swap;
  swap(a.srcUId, b.srcUId);
  swap(a.dstUId, b.dstUId);
  swap(a.msgType, b.msgType);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

TChatMsg::TChatMsg(const TChatMsg& other0) {
  srcUId = other0.srcUId;
  dstUId = other0.dstUId;
  msgType = other0.msgType;
  content = other0.content;
  __isset = other0.__isset;
}
TChatMsg& TChatMsg::operator=(const TChatMsg& other1) {
  srcUId = other1.srcUId;
  dstUId = other1.dstUId;
  msgType = other1.msgType;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
void TChatMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TChatMsg(";
  out << "srcUId=" << to_string(srcUId);
  out << ", " << "dstUId=" << to_string(dstUId);
  out << ", " << "msgType=" << to_string(msgType);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


TChatMsgExtra::~TChatMsgExtra() throw() {
}


void TChatMsgExtra::__set_isPrivate(const bool val) {
  this->isPrivate = val;
}

void TChatMsgExtra::__set_pushOnline(const bool val) {
  this->pushOnline = val;
}

void TChatMsgExtra::__set_memberOnly(const bool val) {
  this->memberOnly = val;
}

uint32_t TChatMsgExtra::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isPrivate);
          this->__isset.isPrivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pushOnline);
          this->__isset.pushOnline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->memberOnly);
          this->__isset.memberOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TChatMsgExtra::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TChatMsgExtra");

  xfer += oprot->writeFieldBegin("isPrivate", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isPrivate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pushOnline", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->pushOnline);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberOnly", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->memberOnly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TChatMsgExtra &a, TChatMsgExtra &b) {
  using ::std::swap;
  swap(a.isPrivate, b.isPrivate);
  swap(a.pushOnline, b.pushOnline);
  swap(a.memberOnly, b.memberOnly);
  swap(a.__isset, b.__isset);
}

TChatMsgExtra::TChatMsgExtra(const TChatMsgExtra& other2) {
  isPrivate = other2.isPrivate;
  pushOnline = other2.pushOnline;
  memberOnly = other2.memberOnly;
  __isset = other2.__isset;
}
TChatMsgExtra& TChatMsgExtra::operator=(const TChatMsgExtra& other3) {
  isPrivate = other3.isPrivate;
  pushOnline = other3.pushOnline;
  memberOnly = other3.memberOnly;
  __isset = other3.__isset;
  return *this;
}
void TChatMsgExtra::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TChatMsgExtra(";
  out << "isPrivate=" << to_string(isPrivate);
  out << ", " << "pushOnline=" << to_string(pushOnline);
  out << ", " << "memberOnly=" << to_string(memberOnly);
  out << ")";
}


TGroupAssistMsg::~TGroupAssistMsg() throw() {
}


void TGroupAssistMsg::__set_userID(const int32_t val) {
  this->userID = val;
}

void TGroupAssistMsg::__set_groupID(const int32_t val) {
  this->groupID = val;
}

void TGroupAssistMsg::__set_svrType(const int32_t val) {
  this->svrType = val;
}

void TGroupAssistMsg::__set_svrSwitch(const bool val) {
  this->svrSwitch = val;
}

void TGroupAssistMsg::__set_svrLevelUp(const bool val) {
  this->svrLevelUp = val;
}

void TGroupAssistMsg::__set_svrLevel(const int32_t val) {
  this->svrLevel = val;
}

void TGroupAssistMsg::__set_state(const int32_t val) {
  this->state = val;
}

void TGroupAssistMsg::__set_url(const std::string& val) {
  this->url = val;
}

void TGroupAssistMsg::__set_msgType(const int32_t val) {
  this->msgType = val;
}

void TGroupAssistMsg::__set_msg(const std::string& val) {
  this->msg = val;
}

void TGroupAssistMsg::__set_authID(const int32_t val) {
  this->authID = val;
}

void TGroupAssistMsg::__set_investuserID(const int32_t val) {
  this->investuserID = val;
}

void TGroupAssistMsg::__set_packetID(const int32_t val) {
  this->packetID = val;
}

void TGroupAssistMsg::__set_balance(const int32_t val) {
  this->balance = val;
}

uint32_t TGroupAssistMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userID);
          this->__isset.userID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupID);
          this->__isset.groupID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->svrType);
          this->__isset.svrType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->svrSwitch);
          this->__isset.svrSwitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->svrLevelUp);
          this->__isset.svrLevelUp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->svrLevel);
          this->__isset.svrLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->msgType);
          this->__isset.msgType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->authID);
          this->__isset.authID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->investuserID);
          this->__isset.investuserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->packetID);
          this->__isset.packetID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TGroupAssistMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TGroupAssistMsg");

  xfer += oprot->writeFieldBegin("userID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svrType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->svrType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svrSwitch", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->svrSwitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svrLevelUp", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->svrLevelUp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svrLevel", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->svrLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgType", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->msgType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authID", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->authID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("investuserID", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->investuserID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packetID", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->packetID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TGroupAssistMsg &a, TGroupAssistMsg &b) {
  using ::std::swap;
  swap(a.userID, b.userID);
  swap(a.groupID, b.groupID);
  swap(a.svrType, b.svrType);
  swap(a.svrSwitch, b.svrSwitch);
  swap(a.svrLevelUp, b.svrLevelUp);
  swap(a.svrLevel, b.svrLevel);
  swap(a.state, b.state);
  swap(a.url, b.url);
  swap(a.msgType, b.msgType);
  swap(a.msg, b.msg);
  swap(a.authID, b.authID);
  swap(a.investuserID, b.investuserID);
  swap(a.packetID, b.packetID);
  swap(a.balance, b.balance);
  swap(a.__isset, b.__isset);
}

TGroupAssistMsg::TGroupAssistMsg(const TGroupAssistMsg& other4) {
  userID = other4.userID;
  groupID = other4.groupID;
  svrType = other4.svrType;
  svrSwitch = other4.svrSwitch;
  svrLevelUp = other4.svrLevelUp;
  svrLevel = other4.svrLevel;
  state = other4.state;
  url = other4.url;
  msgType = other4.msgType;
  msg = other4.msg;
  authID = other4.authID;
  investuserID = other4.investuserID;
  packetID = other4.packetID;
  balance = other4.balance;
  __isset = other4.__isset;
}
TGroupAssistMsg& TGroupAssistMsg::operator=(const TGroupAssistMsg& other5) {
  userID = other5.userID;
  groupID = other5.groupID;
  svrType = other5.svrType;
  svrSwitch = other5.svrSwitch;
  svrLevelUp = other5.svrLevelUp;
  svrLevel = other5.svrLevel;
  state = other5.state;
  url = other5.url;
  msgType = other5.msgType;
  msg = other5.msg;
  authID = other5.authID;
  investuserID = other5.investuserID;
  packetID = other5.packetID;
  balance = other5.balance;
  __isset = other5.__isset;
  return *this;
}
void TGroupAssistMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGroupAssistMsg(";
  out << "userID=" << to_string(userID);
  out << ", " << "groupID=" << to_string(groupID);
  out << ", " << "svrType=" << to_string(svrType);
  out << ", " << "svrSwitch=" << to_string(svrSwitch);
  out << ", " << "svrLevelUp=" << to_string(svrLevelUp);
  out << ", " << "svrLevel=" << to_string(svrLevel);
  out << ", " << "state=" << to_string(state);
  out << ", " << "url=" << to_string(url);
  out << ", " << "msgType=" << to_string(msgType);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "authID=" << to_string(authID);
  out << ", " << "investuserID=" << to_string(investuserID);
  out << ", " << "packetID=" << to_string(packetID);
  out << ", " << "balance=" << to_string(balance);
  out << ")";
}


TPPTPicInfo::~TPPTPicInfo() throw() {
}


void TPPTPicInfo::__set_rank(const int32_t val) {
  this->rank = val;
}

void TPPTPicInfo::__set_picId(const std::string& val) {
  this->picId = val;
}

void TPPTPicInfo::__set_groupId(const int32_t val) {
  this->groupId = val;
}

void TPPTPicInfo::__set_picUrl(const std::string& val) {
  this->picUrl = val;
}

uint32_t TPPTPicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rank);
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picId);
          this->__isset.picId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupId);
          this->__isset.groupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picUrl);
          this->__isset.picUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPPTPicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPPTPicInfo");

  xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->picId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->groupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picUrl", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->picUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPPTPicInfo &a, TPPTPicInfo &b) {
  using ::std::swap;
  swap(a.rank, b.rank);
  swap(a.picId, b.picId);
  swap(a.groupId, b.groupId);
  swap(a.picUrl, b.picUrl);
  swap(a.__isset, b.__isset);
}

TPPTPicInfo::TPPTPicInfo(const TPPTPicInfo& other6) {
  rank = other6.rank;
  picId = other6.picId;
  groupId = other6.groupId;
  picUrl = other6.picUrl;
  __isset = other6.__isset;
}
TPPTPicInfo& TPPTPicInfo::operator=(const TPPTPicInfo& other7) {
  rank = other7.rank;
  picId = other7.picId;
  groupId = other7.groupId;
  picUrl = other7.picUrl;
  __isset = other7.__isset;
  return *this;
}
void TPPTPicInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPPTPicInfo(";
  out << "rank=" << to_string(rank);
  out << ", " << "picId=" << to_string(picId);
  out << ", " << "groupId=" << to_string(groupId);
  out << ", " << "picUrl=" << to_string(picUrl);
  out << ")";
}


