/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TChatSvrIf_TYPES_H
#define TChatSvrIf_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class TChatMsg;

class TChatAuditMsg;

class TChatMsgExtra;

class TGroupAssistMsg;

class TPPTPicInfo;

typedef struct _TChatMsg__isset {
  _TChatMsg__isset() : srcUId(false), dstUId(false), msgType(false), content(false) {}
  bool srcUId :1;
  bool dstUId :1;
  bool msgType :1;
  bool content :1;
} _TChatMsg__isset;

class TChatMsg {
 public:

  TChatMsg(const TChatMsg&);
  TChatMsg& operator=(const TChatMsg&);
  TChatMsg() : srcUId(0), dstUId(0), msgType(0), content() {
  }

  virtual ~TChatMsg() throw();
  int32_t srcUId;
  int32_t dstUId;
  int8_t msgType;
  std::string content;

  _TChatMsg__isset __isset;

  void __set_srcUId(const int32_t val);

  void __set_dstUId(const int32_t val);

  void __set_msgType(const int8_t val);

  void __set_content(const std::string& val);

  bool operator == (const TChatMsg & rhs) const
  {
    if (!(srcUId == rhs.srcUId))
      return false;
    if (!(dstUId == rhs.dstUId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const TChatMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TChatMsg &a, TChatMsg &b);

inline std::ostream& operator<<(std::ostream& out, const TChatMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TChatAuditMsg__isset {
  _TChatAuditMsg__isset() : srcUId(false), dstUId(false), msgType(false), content(false), groupId(false), msgId(false), mastermsgId(false), notifyType(false), updateId(false) {}
  bool srcUId :1;
  bool dstUId :1;
  bool msgType :1;
  bool content :1;
  bool groupId :1;
  bool msgId :1;
  bool mastermsgId :1;
  bool notifyType :1;
  bool updateId :1;
} _TChatAuditMsg__isset;

class TChatAuditMsg {
 public:

  TChatAuditMsg(const TChatAuditMsg&);
  TChatAuditMsg& operator=(const TChatAuditMsg&);
  TChatAuditMsg() : srcUId(0), dstUId(0), msgType(0), content(), groupId(0), msgId(0), mastermsgId(0), notifyType(0), updateId(0) {
  }

  virtual ~TChatAuditMsg() throw();
  int32_t srcUId;
  int32_t dstUId;
  int8_t msgType;
  std::string content;
  int32_t groupId;
  int32_t msgId;
  int32_t mastermsgId;
  int32_t notifyType;
  int32_t updateId;

  _TChatAuditMsg__isset __isset;

  void __set_srcUId(const int32_t val);

  void __set_dstUId(const int32_t val);

  void __set_msgType(const int8_t val);

  void __set_content(const std::string& val);

  void __set_groupId(const int32_t val);

  void __set_msgId(const int32_t val);

  void __set_mastermsgId(const int32_t val);

  void __set_notifyType(const int32_t val);

  void __set_updateId(const int32_t val);

  bool operator == (const TChatAuditMsg & rhs) const
  {
    if (!(srcUId == rhs.srcUId))
      return false;
    if (!(dstUId == rhs.dstUId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    if (!(mastermsgId == rhs.mastermsgId))
      return false;
    if (!(notifyType == rhs.notifyType))
      return false;
    if (!(updateId == rhs.updateId))
      return false;
    return true;
  }
  bool operator != (const TChatAuditMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatAuditMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TChatAuditMsg &a, TChatAuditMsg &b);

inline std::ostream& operator<<(std::ostream& out, const TChatAuditMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TChatMsgExtra__isset {
  _TChatMsgExtra__isset() : isPrivate(true), pushOnline(true), memberOnly(true) {}
  bool isPrivate :1;
  bool pushOnline :1;
  bool memberOnly :1;
} _TChatMsgExtra__isset;

class TChatMsgExtra {
 public:

  TChatMsgExtra(const TChatMsgExtra&);
  TChatMsgExtra& operator=(const TChatMsgExtra&);
  TChatMsgExtra() : isPrivate(false), pushOnline(false), memberOnly(false) {
  }

  virtual ~TChatMsgExtra() throw();
  bool isPrivate;
  bool pushOnline;
  bool memberOnly;

  _TChatMsgExtra__isset __isset;

  void __set_isPrivate(const bool val);

  void __set_pushOnline(const bool val);

  void __set_memberOnly(const bool val);

  bool operator == (const TChatMsgExtra & rhs) const
  {
    if (!(isPrivate == rhs.isPrivate))
      return false;
    if (!(pushOnline == rhs.pushOnline))
      return false;
    if (!(memberOnly == rhs.memberOnly))
      return false;
    return true;
  }
  bool operator != (const TChatMsgExtra &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TChatMsgExtra & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TChatMsgExtra &a, TChatMsgExtra &b);

inline std::ostream& operator<<(std::ostream& out, const TChatMsgExtra& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TGroupAssistMsg__isset {
  _TGroupAssistMsg__isset() : userID(false), groupID(false), svrType(false), svrSwitch(false), svrLevelUp(false), svrLevel(false), state(false), url(false), msgType(false), msg(false), authID(false), investuserID(false), packetID(false), balance(false) {}
  bool userID :1;
  bool groupID :1;
  bool svrType :1;
  bool svrSwitch :1;
  bool svrLevelUp :1;
  bool svrLevel :1;
  bool state :1;
  bool url :1;
  bool msgType :1;
  bool msg :1;
  bool authID :1;
  bool investuserID :1;
  bool packetID :1;
  bool balance :1;
} _TGroupAssistMsg__isset;

class TGroupAssistMsg {
 public:

  TGroupAssistMsg(const TGroupAssistMsg&);
  TGroupAssistMsg& operator=(const TGroupAssistMsg&);
  TGroupAssistMsg() : userID(0), groupID(0), svrType(0), svrSwitch(0), svrLevelUp(0), svrLevel(0), state(0), url(), msgType(0), msg(), authID(0), investuserID(0), packetID(0), balance(0) {
  }

  virtual ~TGroupAssistMsg() throw();
  int32_t userID;
  int32_t groupID;
  int32_t svrType;
  bool svrSwitch;
  bool svrLevelUp;
  int32_t svrLevel;
  int32_t state;
  std::string url;
  int32_t msgType;
  std::string msg;
  int32_t authID;
  int32_t investuserID;
  int32_t packetID;
  int32_t balance;

  _TGroupAssistMsg__isset __isset;

  void __set_userID(const int32_t val);

  void __set_groupID(const int32_t val);

  void __set_svrType(const int32_t val);

  void __set_svrSwitch(const bool val);

  void __set_svrLevelUp(const bool val);

  void __set_svrLevel(const int32_t val);

  void __set_state(const int32_t val);

  void __set_url(const std::string& val);

  void __set_msgType(const int32_t val);

  void __set_msg(const std::string& val);

  void __set_authID(const int32_t val);

  void __set_investuserID(const int32_t val);

  void __set_packetID(const int32_t val);

  void __set_balance(const int32_t val);

  bool operator == (const TGroupAssistMsg & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(groupID == rhs.groupID))
      return false;
    if (!(svrType == rhs.svrType))
      return false;
    if (!(svrSwitch == rhs.svrSwitch))
      return false;
    if (!(svrLevelUp == rhs.svrLevelUp))
      return false;
    if (!(svrLevel == rhs.svrLevel))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (!(authID == rhs.authID))
      return false;
    if (!(investuserID == rhs.investuserID))
      return false;
    if (!(packetID == rhs.packetID))
      return false;
    if (!(balance == rhs.balance))
      return false;
    return true;
  }
  bool operator != (const TGroupAssistMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGroupAssistMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGroupAssistMsg &a, TGroupAssistMsg &b);

inline std::ostream& operator<<(std::ostream& out, const TGroupAssistMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TPPTPicInfo__isset {
  _TPPTPicInfo__isset() : rank(false), picId(false), groupId(false), picUrl(false) {}
  bool rank :1;
  bool picId :1;
  bool groupId :1;
  bool picUrl :1;
} _TPPTPicInfo__isset;

class TPPTPicInfo {
 public:

  TPPTPicInfo(const TPPTPicInfo&);
  TPPTPicInfo& operator=(const TPPTPicInfo&);
  TPPTPicInfo() : rank(0), picId(), groupId(0), picUrl() {
  }

  virtual ~TPPTPicInfo() throw();
  int32_t rank;
  std::string picId;
  int32_t groupId;
  std::string picUrl;

  _TPPTPicInfo__isset __isset;

  void __set_rank(const int32_t val);

  void __set_picId(const std::string& val);

  void __set_groupId(const int32_t val);

  void __set_picUrl(const std::string& val);

  bool operator == (const TPPTPicInfo & rhs) const
  {
    if (!(rank == rhs.rank))
      return false;
    if (!(picId == rhs.picId))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(picUrl == rhs.picUrl))
      return false;
    return true;
  }
  bool operator != (const TPPTPicInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPPTPicInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPPTPicInfo &a, TPPTPicInfo &b);

inline std::ostream& operator<<(std::ostream& out, const TPPTPicInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
