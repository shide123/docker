/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TUserMsgSvr_H
#define TUserMsgSvr_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TUsermgrSvrIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TUserMsgSvrIf {
 public:
  virtual ~TUserMsgSvrIf() {}
  virtual int32_t proc_reloadUserInfo(const int32_t userid) = 0;
};

class TUserMsgSvrIfFactory {
 public:
  typedef TUserMsgSvrIf Handler;

  virtual ~TUserMsgSvrIfFactory() {}

  virtual TUserMsgSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TUserMsgSvrIf* /* handler */) = 0;
};

class TUserMsgSvrIfSingletonFactory : virtual public TUserMsgSvrIfFactory {
 public:
  TUserMsgSvrIfSingletonFactory(const boost::shared_ptr<TUserMsgSvrIf>& iface) : iface_(iface) {}
  virtual ~TUserMsgSvrIfSingletonFactory() {}

  virtual TUserMsgSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TUserMsgSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<TUserMsgSvrIf> iface_;
};

class TUserMsgSvrNull : virtual public TUserMsgSvrIf {
 public:
  virtual ~TUserMsgSvrNull() {}
  int32_t proc_reloadUserInfo(const int32_t /* userid */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TUserMsgSvr_proc_reloadUserInfo_args__isset {
  _TUserMsgSvr_proc_reloadUserInfo_args__isset() : userid(false) {}
  bool userid :1;
} _TUserMsgSvr_proc_reloadUserInfo_args__isset;

class TUserMsgSvr_proc_reloadUserInfo_args {
 public:

  TUserMsgSvr_proc_reloadUserInfo_args(const TUserMsgSvr_proc_reloadUserInfo_args&);
  TUserMsgSvr_proc_reloadUserInfo_args& operator=(const TUserMsgSvr_proc_reloadUserInfo_args&);
  TUserMsgSvr_proc_reloadUserInfo_args() : userid(0) {
  }

  virtual ~TUserMsgSvr_proc_reloadUserInfo_args() throw();
  int32_t userid;

  _TUserMsgSvr_proc_reloadUserInfo_args__isset __isset;

  void __set_userid(const int32_t val);

  bool operator == (const TUserMsgSvr_proc_reloadUserInfo_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TUserMsgSvr_proc_reloadUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserMsgSvr_proc_reloadUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TUserMsgSvr_proc_reloadUserInfo_pargs {
 public:


  virtual ~TUserMsgSvr_proc_reloadUserInfo_pargs() throw();
  const int32_t* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TUserMsgSvr_proc_reloadUserInfo_result__isset {
  _TUserMsgSvr_proc_reloadUserInfo_result__isset() : success(false) {}
  bool success :1;
} _TUserMsgSvr_proc_reloadUserInfo_result__isset;

class TUserMsgSvr_proc_reloadUserInfo_result {
 public:

  TUserMsgSvr_proc_reloadUserInfo_result(const TUserMsgSvr_proc_reloadUserInfo_result&);
  TUserMsgSvr_proc_reloadUserInfo_result& operator=(const TUserMsgSvr_proc_reloadUserInfo_result&);
  TUserMsgSvr_proc_reloadUserInfo_result() : success(0) {
  }

  virtual ~TUserMsgSvr_proc_reloadUserInfo_result() throw();
  int32_t success;

  _TUserMsgSvr_proc_reloadUserInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TUserMsgSvr_proc_reloadUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TUserMsgSvr_proc_reloadUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserMsgSvr_proc_reloadUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TUserMsgSvr_proc_reloadUserInfo_presult__isset {
  _TUserMsgSvr_proc_reloadUserInfo_presult__isset() : success(false) {}
  bool success :1;
} _TUserMsgSvr_proc_reloadUserInfo_presult__isset;

class TUserMsgSvr_proc_reloadUserInfo_presult {
 public:


  virtual ~TUserMsgSvr_proc_reloadUserInfo_presult() throw();
  int32_t* success;

  _TUserMsgSvr_proc_reloadUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TUserMsgSvrClient : virtual public TUserMsgSvrIf {
 public:
  TUserMsgSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TUserMsgSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_reloadUserInfo(const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TUserMsgSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TUserMsgSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TUserMsgSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_reloadUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TUserMsgSvrProcessor(boost::shared_ptr<TUserMsgSvrIf> iface) :
    iface_(iface) {
    processMap_["proc_reloadUserInfo"] = &TUserMsgSvrProcessor::process_proc_reloadUserInfo;
  }

  virtual ~TUserMsgSvrProcessor() {}
};

class TUserMsgSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TUserMsgSvrProcessorFactory(const ::boost::shared_ptr< TUserMsgSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TUserMsgSvrIfFactory > handlerFactory_;
};

class TUserMsgSvrMultiface : virtual public TUserMsgSvrIf {
 public:
  TUserMsgSvrMultiface(std::vector<boost::shared_ptr<TUserMsgSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TUserMsgSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TUserMsgSvrIf> > ifaces_;
  TUserMsgSvrMultiface() {}
  void add(boost::shared_ptr<TUserMsgSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t proc_reloadUserInfo(const int32_t userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_reloadUserInfo(userid);
    }
    return ifaces_[i]->proc_reloadUserInfo(userid);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TUserMsgSvrConcurrentClient : virtual public TUserMsgSvrIf {
 public:
  TUserMsgSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TUserMsgSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_reloadUserInfo(const int32_t userid);
  int32_t send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TUserMsgSvrCobClient;

class TUserMsgSvrCobClIf {
 public:
  virtual ~TUserMsgSvrCobClIf() {}
  virtual void proc_reloadUserInfo(tcxx::function<void(TUserMsgSvrCobClient* client)> cob, const int32_t userid) = 0;
};

class TUserMsgSvrCobSvIf {
 public:
  virtual ~TUserMsgSvrCobSvIf() {}
  virtual void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid) = 0;
};

class TUserMsgSvrCobSvIfFactory {
 public:
  typedef TUserMsgSvrCobSvIf Handler;

  virtual ~TUserMsgSvrCobSvIfFactory() {}

  virtual TUserMsgSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TUserMsgSvrCobSvIf* /* handler */) = 0;
};

class TUserMsgSvrCobSvIfSingletonFactory : virtual public TUserMsgSvrCobSvIfFactory {
 public:
  TUserMsgSvrCobSvIfSingletonFactory(const boost::shared_ptr<TUserMsgSvrCobSvIf>& iface) : iface_(iface) {}
  virtual ~TUserMsgSvrCobSvIfSingletonFactory() {}

  virtual TUserMsgSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TUserMsgSvrCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TUserMsgSvrCobSvIf> iface_;
};

class TUserMsgSvrCobSvNull : virtual public TUserMsgSvrCobSvIf {
 public:
  virtual ~TUserMsgSvrCobSvNull() {}
  void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* userid */) {
    int32_t _return = 0;
    return cob(_return);
  }
};

class TUserMsgSvrCobClient : virtual public TUserMsgSvrCobClIf {
 public:
  TUserMsgSvrCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void proc_reloadUserInfo(tcxx::function<void(TUserMsgSvrCobClient* client)> cob, const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TUserMsgSvrAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TUserMsgSvrCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TUserMsgSvrAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TUserMsgSvrAsyncProcessor(boost::shared_ptr<TUserMsgSvrCobSvIf> iface) :
    iface_(iface) {
    processMap_["proc_reloadUserInfo"] = &TUserMsgSvrAsyncProcessor::process_proc_reloadUserInfo;
  }

  virtual ~TUserMsgSvrAsyncProcessor() {}
};

class TUserMsgSvrAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TUserMsgSvrAsyncProcessorFactory(const ::boost::shared_ptr< TUserMsgSvrCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TUserMsgSvrCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
