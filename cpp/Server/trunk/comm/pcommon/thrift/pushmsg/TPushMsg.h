/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TPushMsg_H
#define TPushMsg_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TPushMsgIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TPushMsgIf {
 public:
  virtual ~TPushMsgIf() {}
  virtual int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) = 0;
  virtual int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
  virtual int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual int32_t proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) = 0;
  virtual void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) = 0;
  virtual int32_t proc_reloadUserInfo(const int32_t userid) = 0;
  virtual int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) = 0;
  virtual int32_t proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg) = 0;
  virtual int32_t proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url) = 0;
  virtual bool proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual int32_t proc_loadGroup(const int32_t groupid, const std::string& host) = 0;
  virtual int32_t proc_modGroup(const int32_t groupid, const std::string& host) = 0;
  virtual bool proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid) = 0;
  virtual void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) = 0;
  virtual int32_t proc_joingroup(const  ::TJoinGroup& oReq) = 0;
};

class TPushMsgIfFactory {
 public:
  typedef TPushMsgIf Handler;

  virtual ~TPushMsgIfFactory() {}

  virtual TPushMsgIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TPushMsgIf* /* handler */) = 0;
};

class TPushMsgIfSingletonFactory : virtual public TPushMsgIfFactory {
 public:
  TPushMsgIfSingletonFactory(const boost::shared_ptr<TPushMsgIf>& iface) : iface_(iface) {}
  virtual ~TPushMsgIfSingletonFactory() {}

  virtual TPushMsgIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TPushMsgIf* /* handler */) {}

 protected:
  boost::shared_ptr<TPushMsgIf> iface_;
};

class TPushMsgNull : virtual public TPushMsgIf {
 public:
  virtual ~TPushMsgNull() {}
  int32_t proc_modGroupSettings(const int32_t /* runid */, const int32_t /* groupid */, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & /* mSetting */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVisitSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* kickOnlooker */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modJoinGroupMode(const int32_t /* runid */, const int32_t /* groupid */, const  ::TJoinGroupCondition& /* maleCondition */, const  ::TJoinGroupCondition& /* femaleCondition */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_kickAllOnlookers(const int32_t /* runid */, const int32_t /* groupid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modContributionListSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVoiceChatSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* visitOnMic */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVideoAuthSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupGainSetting(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const int8_t /* rangeType */, const int8_t /* percent */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupUserGainSetting(const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int8_t /* percent */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupUserRole(const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int32_t /* roleType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupBlackList(const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const bool /* isAdd */) {
    int32_t _return = 0;
    return _return;
  }
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & /* _return */, const int32_t /* groupid */) {
    return;
  }
  int32_t proc_reloadUserInfo(const int32_t /* userid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& /* msg */, const std::vector< ::TCondition> & /* lstCondition */, const bool /* onlineOnly */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_sendUserNoticeMsg(const int32_t /* userid */, const  ::TNoticeMsg& /* msg */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_sendAdminVideoAuditMsg(const int32_t /* userid */, const int32_t /* groupid */, const std::string& /* url */) {
    int32_t _return = 0;
    return _return;
  }
  bool proc_handleVideoAuditMsg(const int32_t /* handle_userid */, const int32_t /* groupid */, const int32_t /* msgid */, const bool /* agree */, const int32_t /* apply_userid */) {
    bool _return = false;
    return _return;
  }
  int32_t proc_loadGroup(const int32_t /* groupid */, const std::string& /* host */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroup(const int32_t /* groupid */, const std::string& /* host */) {
    int32_t _return = 0;
    return _return;
  }
  bool proc_setGroupOwner(const int32_t /* groupid */, const int32_t /* new_ownerid */) {
    bool _return = false;
    return _return;
  }
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & /* _return */, const int32_t /* userid */, const int32_t /* groupid */) {
    return;
  }
  int32_t proc_joingroup(const  ::TJoinGroup& /* oReq */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TPushMsg_proc_modGroupSettings_args__isset {
  _TPushMsg_proc_modGroupSettings_args__isset() : runid(false), groupid(false), mSetting(false) {}
  bool runid :1;
  bool groupid :1;
  bool mSetting :1;
} _TPushMsg_proc_modGroupSettings_args__isset;

class TPushMsg_proc_modGroupSettings_args {
 public:

  TPushMsg_proc_modGroupSettings_args(const TPushMsg_proc_modGroupSettings_args&);
  TPushMsg_proc_modGroupSettings_args& operator=(const TPushMsg_proc_modGroupSettings_args&);
  TPushMsg_proc_modGroupSettings_args() : runid(0), groupid(0) {
  }

  virtual ~TPushMsg_proc_modGroupSettings_args() throw();
  int32_t runid;
  int32_t groupid;
  std::map< ::E_THRIFT_GROUP_SETTING::type, std::string>  mSetting;

  _TPushMsg_proc_modGroupSettings_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_mSetting(const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & val);

  bool operator == (const TPushMsg_proc_modGroupSettings_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(mSetting == rhs.mSetting))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroupSettings_pargs {
 public:


  virtual ~TPushMsg_proc_modGroupSettings_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> * mSetting;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupSettings_result__isset {
  _TPushMsg_proc_modGroupSettings_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupSettings_result__isset;

class TPushMsg_proc_modGroupSettings_result {
 public:

  TPushMsg_proc_modGroupSettings_result(const TPushMsg_proc_modGroupSettings_result&);
  TPushMsg_proc_modGroupSettings_result& operator=(const TPushMsg_proc_modGroupSettings_result&);
  TPushMsg_proc_modGroupSettings_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroupSettings_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroupSettings_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupSettings_presult__isset {
  _TPushMsg_proc_modGroupSettings_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupSettings_presult__isset;

class TPushMsg_proc_modGroupSettings_presult {
 public:


  virtual ~TPushMsg_proc_modGroupSettings_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroupSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVisitSwitch_args__isset {
  _TPushMsg_proc_modVisitSwitch_args__isset() : runid(false), groupid(false), Switch(false), kickOnlooker(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool kickOnlooker :1;
} _TPushMsg_proc_modVisitSwitch_args__isset;

class TPushMsg_proc_modVisitSwitch_args {
 public:

  TPushMsg_proc_modVisitSwitch_args(const TPushMsg_proc_modVisitSwitch_args&);
  TPushMsg_proc_modVisitSwitch_args& operator=(const TPushMsg_proc_modVisitSwitch_args&);
  TPushMsg_proc_modVisitSwitch_args() : runid(0), groupid(0), Switch(0), kickOnlooker(0) {
  }

  virtual ~TPushMsg_proc_modVisitSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  bool kickOnlooker;

  _TPushMsg_proc_modVisitSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_kickOnlooker(const bool val);

  bool operator == (const TPushMsg_proc_modVisitSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(kickOnlooker == rhs.kickOnlooker))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVisitSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVisitSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modVisitSwitch_pargs {
 public:


  virtual ~TPushMsg_proc_modVisitSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const bool* kickOnlooker;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVisitSwitch_result__isset {
  _TPushMsg_proc_modVisitSwitch_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVisitSwitch_result__isset;

class TPushMsg_proc_modVisitSwitch_result {
 public:

  TPushMsg_proc_modVisitSwitch_result(const TPushMsg_proc_modVisitSwitch_result&);
  TPushMsg_proc_modVisitSwitch_result& operator=(const TPushMsg_proc_modVisitSwitch_result&);
  TPushMsg_proc_modVisitSwitch_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modVisitSwitch_result() throw();
  int32_t success;

  _TPushMsg_proc_modVisitSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modVisitSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVisitSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVisitSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVisitSwitch_presult__isset {
  _TPushMsg_proc_modVisitSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVisitSwitch_presult__isset;

class TPushMsg_proc_modVisitSwitch_presult {
 public:


  virtual ~TPushMsg_proc_modVisitSwitch_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modVisitSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modJoinGroupMode_args__isset {
  _TPushMsg_proc_modJoinGroupMode_args__isset() : runid(false), groupid(false), maleCondition(false), femaleCondition(false) {}
  bool runid :1;
  bool groupid :1;
  bool maleCondition :1;
  bool femaleCondition :1;
} _TPushMsg_proc_modJoinGroupMode_args__isset;

class TPushMsg_proc_modJoinGroupMode_args {
 public:

  TPushMsg_proc_modJoinGroupMode_args(const TPushMsg_proc_modJoinGroupMode_args&);
  TPushMsg_proc_modJoinGroupMode_args& operator=(const TPushMsg_proc_modJoinGroupMode_args&);
  TPushMsg_proc_modJoinGroupMode_args() : runid(0), groupid(0) {
  }

  virtual ~TPushMsg_proc_modJoinGroupMode_args() throw();
  int32_t runid;
  int32_t groupid;
   ::TJoinGroupCondition maleCondition;
   ::TJoinGroupCondition femaleCondition;

  _TPushMsg_proc_modJoinGroupMode_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_maleCondition(const  ::TJoinGroupCondition& val);

  void __set_femaleCondition(const  ::TJoinGroupCondition& val);

  bool operator == (const TPushMsg_proc_modJoinGroupMode_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(maleCondition == rhs.maleCondition))
      return false;
    if (!(femaleCondition == rhs.femaleCondition))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modJoinGroupMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modJoinGroupMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modJoinGroupMode_pargs {
 public:


  virtual ~TPushMsg_proc_modJoinGroupMode_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const  ::TJoinGroupCondition* maleCondition;
  const  ::TJoinGroupCondition* femaleCondition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modJoinGroupMode_result__isset {
  _TPushMsg_proc_modJoinGroupMode_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modJoinGroupMode_result__isset;

class TPushMsg_proc_modJoinGroupMode_result {
 public:

  TPushMsg_proc_modJoinGroupMode_result(const TPushMsg_proc_modJoinGroupMode_result&);
  TPushMsg_proc_modJoinGroupMode_result& operator=(const TPushMsg_proc_modJoinGroupMode_result&);
  TPushMsg_proc_modJoinGroupMode_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modJoinGroupMode_result() throw();
  int32_t success;

  _TPushMsg_proc_modJoinGroupMode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modJoinGroupMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modJoinGroupMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modJoinGroupMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modJoinGroupMode_presult__isset {
  _TPushMsg_proc_modJoinGroupMode_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modJoinGroupMode_presult__isset;

class TPushMsg_proc_modJoinGroupMode_presult {
 public:


  virtual ~TPushMsg_proc_modJoinGroupMode_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modJoinGroupMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_kickAllOnlookers_args__isset {
  _TPushMsg_proc_kickAllOnlookers_args__isset() : runid(false), groupid(false) {}
  bool runid :1;
  bool groupid :1;
} _TPushMsg_proc_kickAllOnlookers_args__isset;

class TPushMsg_proc_kickAllOnlookers_args {
 public:

  TPushMsg_proc_kickAllOnlookers_args(const TPushMsg_proc_kickAllOnlookers_args&);
  TPushMsg_proc_kickAllOnlookers_args& operator=(const TPushMsg_proc_kickAllOnlookers_args&);
  TPushMsg_proc_kickAllOnlookers_args() : runid(0), groupid(0) {
  }

  virtual ~TPushMsg_proc_kickAllOnlookers_args() throw();
  int32_t runid;
  int32_t groupid;

  _TPushMsg_proc_kickAllOnlookers_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  bool operator == (const TPushMsg_proc_kickAllOnlookers_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_kickAllOnlookers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_kickAllOnlookers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_kickAllOnlookers_pargs {
 public:


  virtual ~TPushMsg_proc_kickAllOnlookers_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_kickAllOnlookers_result__isset {
  _TPushMsg_proc_kickAllOnlookers_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_kickAllOnlookers_result__isset;

class TPushMsg_proc_kickAllOnlookers_result {
 public:

  TPushMsg_proc_kickAllOnlookers_result(const TPushMsg_proc_kickAllOnlookers_result&);
  TPushMsg_proc_kickAllOnlookers_result& operator=(const TPushMsg_proc_kickAllOnlookers_result&);
  TPushMsg_proc_kickAllOnlookers_result() : success(0) {
  }

  virtual ~TPushMsg_proc_kickAllOnlookers_result() throw();
  int32_t success;

  _TPushMsg_proc_kickAllOnlookers_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_kickAllOnlookers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_kickAllOnlookers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_kickAllOnlookers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_kickAllOnlookers_presult__isset {
  _TPushMsg_proc_kickAllOnlookers_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_kickAllOnlookers_presult__isset;

class TPushMsg_proc_kickAllOnlookers_presult {
 public:


  virtual ~TPushMsg_proc_kickAllOnlookers_presult() throw();
  int32_t* success;

  _TPushMsg_proc_kickAllOnlookers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modContributionListSwitch_args__isset {
  _TPushMsg_proc_modContributionListSwitch_args__isset() : runid(false), groupid(false), Switch(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
} _TPushMsg_proc_modContributionListSwitch_args__isset;

class TPushMsg_proc_modContributionListSwitch_args {
 public:

  TPushMsg_proc_modContributionListSwitch_args(const TPushMsg_proc_modContributionListSwitch_args&);
  TPushMsg_proc_modContributionListSwitch_args& operator=(const TPushMsg_proc_modContributionListSwitch_args&);
  TPushMsg_proc_modContributionListSwitch_args() : runid(0), groupid(0), Switch(0) {
  }

  virtual ~TPushMsg_proc_modContributionListSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;

  _TPushMsg_proc_modContributionListSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  bool operator == (const TPushMsg_proc_modContributionListSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modContributionListSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modContributionListSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modContributionListSwitch_pargs {
 public:


  virtual ~TPushMsg_proc_modContributionListSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modContributionListSwitch_result__isset {
  _TPushMsg_proc_modContributionListSwitch_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modContributionListSwitch_result__isset;

class TPushMsg_proc_modContributionListSwitch_result {
 public:

  TPushMsg_proc_modContributionListSwitch_result(const TPushMsg_proc_modContributionListSwitch_result&);
  TPushMsg_proc_modContributionListSwitch_result& operator=(const TPushMsg_proc_modContributionListSwitch_result&);
  TPushMsg_proc_modContributionListSwitch_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modContributionListSwitch_result() throw();
  int32_t success;

  _TPushMsg_proc_modContributionListSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modContributionListSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modContributionListSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modContributionListSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modContributionListSwitch_presult__isset {
  _TPushMsg_proc_modContributionListSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modContributionListSwitch_presult__isset;

class TPushMsg_proc_modContributionListSwitch_presult {
 public:


  virtual ~TPushMsg_proc_modContributionListSwitch_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modContributionListSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVoiceChatSwitch_args__isset {
  _TPushMsg_proc_modVoiceChatSwitch_args__isset() : runid(false), groupid(false), Switch(false), visitOnMic(true) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool visitOnMic :1;
} _TPushMsg_proc_modVoiceChatSwitch_args__isset;

class TPushMsg_proc_modVoiceChatSwitch_args {
 public:

  TPushMsg_proc_modVoiceChatSwitch_args(const TPushMsg_proc_modVoiceChatSwitch_args&);
  TPushMsg_proc_modVoiceChatSwitch_args& operator=(const TPushMsg_proc_modVoiceChatSwitch_args&);
  TPushMsg_proc_modVoiceChatSwitch_args() : runid(0), groupid(0), Switch(0), visitOnMic(false) {
  }

  virtual ~TPushMsg_proc_modVoiceChatSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  bool visitOnMic;

  _TPushMsg_proc_modVoiceChatSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_visitOnMic(const bool val);

  bool operator == (const TPushMsg_proc_modVoiceChatSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(visitOnMic == rhs.visitOnMic))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVoiceChatSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVoiceChatSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modVoiceChatSwitch_pargs {
 public:


  virtual ~TPushMsg_proc_modVoiceChatSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const bool* visitOnMic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVoiceChatSwitch_result__isset {
  _TPushMsg_proc_modVoiceChatSwitch_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVoiceChatSwitch_result__isset;

class TPushMsg_proc_modVoiceChatSwitch_result {
 public:

  TPushMsg_proc_modVoiceChatSwitch_result(const TPushMsg_proc_modVoiceChatSwitch_result&);
  TPushMsg_proc_modVoiceChatSwitch_result& operator=(const TPushMsg_proc_modVoiceChatSwitch_result&);
  TPushMsg_proc_modVoiceChatSwitch_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modVoiceChatSwitch_result() throw();
  int32_t success;

  _TPushMsg_proc_modVoiceChatSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modVoiceChatSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVoiceChatSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVoiceChatSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVoiceChatSwitch_presult__isset {
  _TPushMsg_proc_modVoiceChatSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVoiceChatSwitch_presult__isset;

class TPushMsg_proc_modVoiceChatSwitch_presult {
 public:


  virtual ~TPushMsg_proc_modVoiceChatSwitch_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modVoiceChatSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVideoAuthSwitch_args__isset {
  _TPushMsg_proc_modVideoAuthSwitch_args__isset() : runid(false), groupid(false), Switch(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
} _TPushMsg_proc_modVideoAuthSwitch_args__isset;

class TPushMsg_proc_modVideoAuthSwitch_args {
 public:

  TPushMsg_proc_modVideoAuthSwitch_args(const TPushMsg_proc_modVideoAuthSwitch_args&);
  TPushMsg_proc_modVideoAuthSwitch_args& operator=(const TPushMsg_proc_modVideoAuthSwitch_args&);
  TPushMsg_proc_modVideoAuthSwitch_args() : runid(0), groupid(0), Switch(0) {
  }

  virtual ~TPushMsg_proc_modVideoAuthSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;

  _TPushMsg_proc_modVideoAuthSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  bool operator == (const TPushMsg_proc_modVideoAuthSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVideoAuthSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVideoAuthSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modVideoAuthSwitch_pargs {
 public:


  virtual ~TPushMsg_proc_modVideoAuthSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVideoAuthSwitch_result__isset {
  _TPushMsg_proc_modVideoAuthSwitch_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVideoAuthSwitch_result__isset;

class TPushMsg_proc_modVideoAuthSwitch_result {
 public:

  TPushMsg_proc_modVideoAuthSwitch_result(const TPushMsg_proc_modVideoAuthSwitch_result&);
  TPushMsg_proc_modVideoAuthSwitch_result& operator=(const TPushMsg_proc_modVideoAuthSwitch_result&);
  TPushMsg_proc_modVideoAuthSwitch_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modVideoAuthSwitch_result() throw();
  int32_t success;

  _TPushMsg_proc_modVideoAuthSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modVideoAuthSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modVideoAuthSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modVideoAuthSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modVideoAuthSwitch_presult__isset {
  _TPushMsg_proc_modVideoAuthSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modVideoAuthSwitch_presult__isset;

class TPushMsg_proc_modVideoAuthSwitch_presult {
 public:


  virtual ~TPushMsg_proc_modVideoAuthSwitch_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modVideoAuthSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupGainSetting_args__isset {
  _TPushMsg_proc_modGroupGainSetting_args__isset() : runid(false), groupid(false), Switch(false), rangeType(false), percent(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool rangeType :1;
  bool percent :1;
} _TPushMsg_proc_modGroupGainSetting_args__isset;

class TPushMsg_proc_modGroupGainSetting_args {
 public:

  TPushMsg_proc_modGroupGainSetting_args(const TPushMsg_proc_modGroupGainSetting_args&);
  TPushMsg_proc_modGroupGainSetting_args& operator=(const TPushMsg_proc_modGroupGainSetting_args&);
  TPushMsg_proc_modGroupGainSetting_args() : runid(0), groupid(0), Switch(0), rangeType(0), percent(0) {
  }

  virtual ~TPushMsg_proc_modGroupGainSetting_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  int8_t rangeType;
  int8_t percent;

  _TPushMsg_proc_modGroupGainSetting_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_rangeType(const int8_t val);

  void __set_percent(const int8_t val);

  bool operator == (const TPushMsg_proc_modGroupGainSetting_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(rangeType == rhs.rangeType))
      return false;
    if (!(percent == rhs.percent))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupGainSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupGainSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroupGainSetting_pargs {
 public:


  virtual ~TPushMsg_proc_modGroupGainSetting_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const int8_t* rangeType;
  const int8_t* percent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupGainSetting_result__isset {
  _TPushMsg_proc_modGroupGainSetting_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupGainSetting_result__isset;

class TPushMsg_proc_modGroupGainSetting_result {
 public:

  TPushMsg_proc_modGroupGainSetting_result(const TPushMsg_proc_modGroupGainSetting_result&);
  TPushMsg_proc_modGroupGainSetting_result& operator=(const TPushMsg_proc_modGroupGainSetting_result&);
  TPushMsg_proc_modGroupGainSetting_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroupGainSetting_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroupGainSetting_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupGainSetting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupGainSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupGainSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupGainSetting_presult__isset {
  _TPushMsg_proc_modGroupGainSetting_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupGainSetting_presult__isset;

class TPushMsg_proc_modGroupGainSetting_presult {
 public:


  virtual ~TPushMsg_proc_modGroupGainSetting_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroupGainSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserGainSetting_args__isset {
  _TPushMsg_proc_modGroupUserGainSetting_args__isset() : runid(false), groupid(false), userid(false), percent(false) {}
  bool runid :1;
  bool groupid :1;
  bool userid :1;
  bool percent :1;
} _TPushMsg_proc_modGroupUserGainSetting_args__isset;

class TPushMsg_proc_modGroupUserGainSetting_args {
 public:

  TPushMsg_proc_modGroupUserGainSetting_args(const TPushMsg_proc_modGroupUserGainSetting_args&);
  TPushMsg_proc_modGroupUserGainSetting_args& operator=(const TPushMsg_proc_modGroupUserGainSetting_args&);
  TPushMsg_proc_modGroupUserGainSetting_args() : runid(0), groupid(0), userid(0), percent(0) {
  }

  virtual ~TPushMsg_proc_modGroupUserGainSetting_args() throw();
  int32_t runid;
  int32_t groupid;
  int32_t userid;
  int8_t percent;

  _TPushMsg_proc_modGroupUserGainSetting_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_percent(const int8_t val);

  bool operator == (const TPushMsg_proc_modGroupUserGainSetting_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(percent == rhs.percent))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupUserGainSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupUserGainSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroupUserGainSetting_pargs {
 public:


  virtual ~TPushMsg_proc_modGroupUserGainSetting_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const int32_t* userid;
  const int8_t* percent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserGainSetting_result__isset {
  _TPushMsg_proc_modGroupUserGainSetting_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupUserGainSetting_result__isset;

class TPushMsg_proc_modGroupUserGainSetting_result {
 public:

  TPushMsg_proc_modGroupUserGainSetting_result(const TPushMsg_proc_modGroupUserGainSetting_result&);
  TPushMsg_proc_modGroupUserGainSetting_result& operator=(const TPushMsg_proc_modGroupUserGainSetting_result&);
  TPushMsg_proc_modGroupUserGainSetting_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroupUserGainSetting_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroupUserGainSetting_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupUserGainSetting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupUserGainSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupUserGainSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserGainSetting_presult__isset {
  _TPushMsg_proc_modGroupUserGainSetting_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupUserGainSetting_presult__isset;

class TPushMsg_proc_modGroupUserGainSetting_presult {
 public:


  virtual ~TPushMsg_proc_modGroupUserGainSetting_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroupUserGainSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserRole_args__isset {
  _TPushMsg_proc_modGroupUserRole_args__isset() : runid(false), groupid(false), userid(false), roleType(false) {}
  bool runid :1;
  bool groupid :1;
  bool userid :1;
  bool roleType :1;
} _TPushMsg_proc_modGroupUserRole_args__isset;

class TPushMsg_proc_modGroupUserRole_args {
 public:

  TPushMsg_proc_modGroupUserRole_args(const TPushMsg_proc_modGroupUserRole_args&);
  TPushMsg_proc_modGroupUserRole_args& operator=(const TPushMsg_proc_modGroupUserRole_args&);
  TPushMsg_proc_modGroupUserRole_args() : runid(0), groupid(0), userid(0), roleType(0) {
  }

  virtual ~TPushMsg_proc_modGroupUserRole_args() throw();
  int32_t runid;
  int32_t groupid;
  int32_t userid;
  int32_t roleType;

  _TPushMsg_proc_modGroupUserRole_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_roleType(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupUserRole_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(roleType == rhs.roleType))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupUserRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupUserRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroupUserRole_pargs {
 public:


  virtual ~TPushMsg_proc_modGroupUserRole_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const int32_t* userid;
  const int32_t* roleType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserRole_result__isset {
  _TPushMsg_proc_modGroupUserRole_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupUserRole_result__isset;

class TPushMsg_proc_modGroupUserRole_result {
 public:

  TPushMsg_proc_modGroupUserRole_result(const TPushMsg_proc_modGroupUserRole_result&);
  TPushMsg_proc_modGroupUserRole_result& operator=(const TPushMsg_proc_modGroupUserRole_result&);
  TPushMsg_proc_modGroupUserRole_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroupUserRole_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroupUserRole_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupUserRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupUserRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupUserRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupUserRole_presult__isset {
  _TPushMsg_proc_modGroupUserRole_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupUserRole_presult__isset;

class TPushMsg_proc_modGroupUserRole_presult {
 public:


  virtual ~TPushMsg_proc_modGroupUserRole_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroupUserRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupBlackList_args__isset {
  _TPushMsg_proc_modGroupBlackList_args__isset() : runid(false), groupid(false), userid(false), isAdd(false) {}
  bool runid :1;
  bool groupid :1;
  bool userid :1;
  bool isAdd :1;
} _TPushMsg_proc_modGroupBlackList_args__isset;

class TPushMsg_proc_modGroupBlackList_args {
 public:

  TPushMsg_proc_modGroupBlackList_args(const TPushMsg_proc_modGroupBlackList_args&);
  TPushMsg_proc_modGroupBlackList_args& operator=(const TPushMsg_proc_modGroupBlackList_args&);
  TPushMsg_proc_modGroupBlackList_args() : runid(0), groupid(0), userid(0), isAdd(0) {
  }

  virtual ~TPushMsg_proc_modGroupBlackList_args() throw();
  int32_t runid;
  int32_t groupid;
  int32_t userid;
  bool isAdd;

  _TPushMsg_proc_modGroupBlackList_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_isAdd(const bool val);

  bool operator == (const TPushMsg_proc_modGroupBlackList_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(isAdd == rhs.isAdd))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupBlackList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupBlackList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroupBlackList_pargs {
 public:


  virtual ~TPushMsg_proc_modGroupBlackList_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const int32_t* userid;
  const bool* isAdd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupBlackList_result__isset {
  _TPushMsg_proc_modGroupBlackList_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupBlackList_result__isset;

class TPushMsg_proc_modGroupBlackList_result {
 public:

  TPushMsg_proc_modGroupBlackList_result(const TPushMsg_proc_modGroupBlackList_result&);
  TPushMsg_proc_modGroupBlackList_result& operator=(const TPushMsg_proc_modGroupBlackList_result&);
  TPushMsg_proc_modGroupBlackList_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroupBlackList_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroupBlackList_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroupBlackList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroupBlackList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroupBlackList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroupBlackList_presult__isset {
  _TPushMsg_proc_modGroupBlackList_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroupBlackList_presult__isset;

class TPushMsg_proc_modGroupBlackList_presult {
 public:


  virtual ~TPushMsg_proc_modGroupBlackList_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroupBlackList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_getGroupVisitorLst_args__isset {
  _TPushMsg_proc_getGroupVisitorLst_args__isset() : groupid(false) {}
  bool groupid :1;
} _TPushMsg_proc_getGroupVisitorLst_args__isset;

class TPushMsg_proc_getGroupVisitorLst_args {
 public:

  TPushMsg_proc_getGroupVisitorLst_args(const TPushMsg_proc_getGroupVisitorLst_args&);
  TPushMsg_proc_getGroupVisitorLst_args& operator=(const TPushMsg_proc_getGroupVisitorLst_args&);
  TPushMsg_proc_getGroupVisitorLst_args() : groupid(0) {
  }

  virtual ~TPushMsg_proc_getGroupVisitorLst_args() throw();
  int32_t groupid;

  _TPushMsg_proc_getGroupVisitorLst_args__isset __isset;

  void __set_groupid(const int32_t val);

  bool operator == (const TPushMsg_proc_getGroupVisitorLst_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_getGroupVisitorLst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_getGroupVisitorLst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_getGroupVisitorLst_pargs {
 public:


  virtual ~TPushMsg_proc_getGroupVisitorLst_pargs() throw();
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_getGroupVisitorLst_result__isset {
  _TPushMsg_proc_getGroupVisitorLst_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_getGroupVisitorLst_result__isset;

class TPushMsg_proc_getGroupVisitorLst_result {
 public:

  TPushMsg_proc_getGroupVisitorLst_result(const TPushMsg_proc_getGroupVisitorLst_result&);
  TPushMsg_proc_getGroupVisitorLst_result& operator=(const TPushMsg_proc_getGroupVisitorLst_result&);
  TPushMsg_proc_getGroupVisitorLst_result() {
  }

  virtual ~TPushMsg_proc_getGroupVisitorLst_result() throw();
  std::vector< ::TUserGroupInfo>  success;

  _TPushMsg_proc_getGroupVisitorLst_result__isset __isset;

  void __set_success(const std::vector< ::TUserGroupInfo> & val);

  bool operator == (const TPushMsg_proc_getGroupVisitorLst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_getGroupVisitorLst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_getGroupVisitorLst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_getGroupVisitorLst_presult__isset {
  _TPushMsg_proc_getGroupVisitorLst_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_getGroupVisitorLst_presult__isset;

class TPushMsg_proc_getGroupVisitorLst_presult {
 public:


  virtual ~TPushMsg_proc_getGroupVisitorLst_presult() throw();
  std::vector< ::TUserGroupInfo> * success;

  _TPushMsg_proc_getGroupVisitorLst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_reloadUserInfo_args__isset {
  _TPushMsg_proc_reloadUserInfo_args__isset() : userid(false) {}
  bool userid :1;
} _TPushMsg_proc_reloadUserInfo_args__isset;

class TPushMsg_proc_reloadUserInfo_args {
 public:

  TPushMsg_proc_reloadUserInfo_args(const TPushMsg_proc_reloadUserInfo_args&);
  TPushMsg_proc_reloadUserInfo_args& operator=(const TPushMsg_proc_reloadUserInfo_args&);
  TPushMsg_proc_reloadUserInfo_args() : userid(0) {
  }

  virtual ~TPushMsg_proc_reloadUserInfo_args() throw();
  int32_t userid;

  _TPushMsg_proc_reloadUserInfo_args__isset __isset;

  void __set_userid(const int32_t val);

  bool operator == (const TPushMsg_proc_reloadUserInfo_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_reloadUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_reloadUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_reloadUserInfo_pargs {
 public:


  virtual ~TPushMsg_proc_reloadUserInfo_pargs() throw();
  const int32_t* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_reloadUserInfo_result__isset {
  _TPushMsg_proc_reloadUserInfo_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_reloadUserInfo_result__isset;

class TPushMsg_proc_reloadUserInfo_result {
 public:

  TPushMsg_proc_reloadUserInfo_result(const TPushMsg_proc_reloadUserInfo_result&);
  TPushMsg_proc_reloadUserInfo_result& operator=(const TPushMsg_proc_reloadUserInfo_result&);
  TPushMsg_proc_reloadUserInfo_result() : success(0) {
  }

  virtual ~TPushMsg_proc_reloadUserInfo_result() throw();
  int32_t success;

  _TPushMsg_proc_reloadUserInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_reloadUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_reloadUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_reloadUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_reloadUserInfo_presult__isset {
  _TPushMsg_proc_reloadUserInfo_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_reloadUserInfo_presult__isset;

class TPushMsg_proc_reloadUserInfo_presult {
 public:


  virtual ~TPushMsg_proc_reloadUserInfo_presult() throw();
  int32_t* success;

  _TPushMsg_proc_reloadUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendSysNoticeMsg_args__isset {
  _TPushMsg_proc_sendSysNoticeMsg_args__isset() : msg(false), lstCondition(false), onlineOnly(true) {}
  bool msg :1;
  bool lstCondition :1;
  bool onlineOnly :1;
} _TPushMsg_proc_sendSysNoticeMsg_args__isset;

class TPushMsg_proc_sendSysNoticeMsg_args {
 public:

  TPushMsg_proc_sendSysNoticeMsg_args(const TPushMsg_proc_sendSysNoticeMsg_args&);
  TPushMsg_proc_sendSysNoticeMsg_args& operator=(const TPushMsg_proc_sendSysNoticeMsg_args&);
  TPushMsg_proc_sendSysNoticeMsg_args() : onlineOnly(false) {
  }

  virtual ~TPushMsg_proc_sendSysNoticeMsg_args() throw();
   ::TNoticeMsg msg;
  std::vector< ::TCondition>  lstCondition;
  bool onlineOnly;

  _TPushMsg_proc_sendSysNoticeMsg_args__isset __isset;

  void __set_msg(const  ::TNoticeMsg& val);

  void __set_lstCondition(const std::vector< ::TCondition> & val);

  void __set_onlineOnly(const bool val);

  bool operator == (const TPushMsg_proc_sendSysNoticeMsg_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(lstCondition == rhs.lstCondition))
      return false;
    if (!(onlineOnly == rhs.onlineOnly))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendSysNoticeMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendSysNoticeMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_sendSysNoticeMsg_pargs {
 public:


  virtual ~TPushMsg_proc_sendSysNoticeMsg_pargs() throw();
  const  ::TNoticeMsg* msg;
  const std::vector< ::TCondition> * lstCondition;
  const bool* onlineOnly;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendSysNoticeMsg_result__isset {
  _TPushMsg_proc_sendSysNoticeMsg_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendSysNoticeMsg_result__isset;

class TPushMsg_proc_sendSysNoticeMsg_result {
 public:

  TPushMsg_proc_sendSysNoticeMsg_result(const TPushMsg_proc_sendSysNoticeMsg_result&);
  TPushMsg_proc_sendSysNoticeMsg_result& operator=(const TPushMsg_proc_sendSysNoticeMsg_result&);
  TPushMsg_proc_sendSysNoticeMsg_result() : success(0) {
  }

  virtual ~TPushMsg_proc_sendSysNoticeMsg_result() throw();
  int32_t success;

  _TPushMsg_proc_sendSysNoticeMsg_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_sendSysNoticeMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendSysNoticeMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendSysNoticeMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendSysNoticeMsg_presult__isset {
  _TPushMsg_proc_sendSysNoticeMsg_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendSysNoticeMsg_presult__isset;

class TPushMsg_proc_sendSysNoticeMsg_presult {
 public:


  virtual ~TPushMsg_proc_sendSysNoticeMsg_presult() throw();
  int32_t* success;

  _TPushMsg_proc_sendSysNoticeMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendUserNoticeMsg_args__isset {
  _TPushMsg_proc_sendUserNoticeMsg_args__isset() : userid(false), msg(false) {}
  bool userid :1;
  bool msg :1;
} _TPushMsg_proc_sendUserNoticeMsg_args__isset;

class TPushMsg_proc_sendUserNoticeMsg_args {
 public:

  TPushMsg_proc_sendUserNoticeMsg_args(const TPushMsg_proc_sendUserNoticeMsg_args&);
  TPushMsg_proc_sendUserNoticeMsg_args& operator=(const TPushMsg_proc_sendUserNoticeMsg_args&);
  TPushMsg_proc_sendUserNoticeMsg_args() : userid(0) {
  }

  virtual ~TPushMsg_proc_sendUserNoticeMsg_args() throw();
  int32_t userid;
   ::TNoticeMsg msg;

  _TPushMsg_proc_sendUserNoticeMsg_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_msg(const  ::TNoticeMsg& val);

  bool operator == (const TPushMsg_proc_sendUserNoticeMsg_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendUserNoticeMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendUserNoticeMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_sendUserNoticeMsg_pargs {
 public:


  virtual ~TPushMsg_proc_sendUserNoticeMsg_pargs() throw();
  const int32_t* userid;
  const  ::TNoticeMsg* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendUserNoticeMsg_result__isset {
  _TPushMsg_proc_sendUserNoticeMsg_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendUserNoticeMsg_result__isset;

class TPushMsg_proc_sendUserNoticeMsg_result {
 public:

  TPushMsg_proc_sendUserNoticeMsg_result(const TPushMsg_proc_sendUserNoticeMsg_result&);
  TPushMsg_proc_sendUserNoticeMsg_result& operator=(const TPushMsg_proc_sendUserNoticeMsg_result&);
  TPushMsg_proc_sendUserNoticeMsg_result() : success(0) {
  }

  virtual ~TPushMsg_proc_sendUserNoticeMsg_result() throw();
  int32_t success;

  _TPushMsg_proc_sendUserNoticeMsg_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_sendUserNoticeMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendUserNoticeMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendUserNoticeMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendUserNoticeMsg_presult__isset {
  _TPushMsg_proc_sendUserNoticeMsg_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendUserNoticeMsg_presult__isset;

class TPushMsg_proc_sendUserNoticeMsg_presult {
 public:


  virtual ~TPushMsg_proc_sendUserNoticeMsg_presult() throw();
  int32_t* success;

  _TPushMsg_proc_sendUserNoticeMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendAdminVideoAuditMsg_args__isset {
  _TPushMsg_proc_sendAdminVideoAuditMsg_args__isset() : userid(false), groupid(false), url(false) {}
  bool userid :1;
  bool groupid :1;
  bool url :1;
} _TPushMsg_proc_sendAdminVideoAuditMsg_args__isset;

class TPushMsg_proc_sendAdminVideoAuditMsg_args {
 public:

  TPushMsg_proc_sendAdminVideoAuditMsg_args(const TPushMsg_proc_sendAdminVideoAuditMsg_args&);
  TPushMsg_proc_sendAdminVideoAuditMsg_args& operator=(const TPushMsg_proc_sendAdminVideoAuditMsg_args&);
  TPushMsg_proc_sendAdminVideoAuditMsg_args() : userid(0), groupid(0), url() {
  }

  virtual ~TPushMsg_proc_sendAdminVideoAuditMsg_args() throw();
  int32_t userid;
  int32_t groupid;
  std::string url;

  _TPushMsg_proc_sendAdminVideoAuditMsg_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_url(const std::string& val);

  bool operator == (const TPushMsg_proc_sendAdminVideoAuditMsg_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendAdminVideoAuditMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendAdminVideoAuditMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_sendAdminVideoAuditMsg_pargs {
 public:


  virtual ~TPushMsg_proc_sendAdminVideoAuditMsg_pargs() throw();
  const int32_t* userid;
  const int32_t* groupid;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendAdminVideoAuditMsg_result__isset {
  _TPushMsg_proc_sendAdminVideoAuditMsg_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendAdminVideoAuditMsg_result__isset;

class TPushMsg_proc_sendAdminVideoAuditMsg_result {
 public:

  TPushMsg_proc_sendAdminVideoAuditMsg_result(const TPushMsg_proc_sendAdminVideoAuditMsg_result&);
  TPushMsg_proc_sendAdminVideoAuditMsg_result& operator=(const TPushMsg_proc_sendAdminVideoAuditMsg_result&);
  TPushMsg_proc_sendAdminVideoAuditMsg_result() : success(0) {
  }

  virtual ~TPushMsg_proc_sendAdminVideoAuditMsg_result() throw();
  int32_t success;

  _TPushMsg_proc_sendAdminVideoAuditMsg_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_sendAdminVideoAuditMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_sendAdminVideoAuditMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_sendAdminVideoAuditMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_sendAdminVideoAuditMsg_presult__isset {
  _TPushMsg_proc_sendAdminVideoAuditMsg_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_sendAdminVideoAuditMsg_presult__isset;

class TPushMsg_proc_sendAdminVideoAuditMsg_presult {
 public:


  virtual ~TPushMsg_proc_sendAdminVideoAuditMsg_presult() throw();
  int32_t* success;

  _TPushMsg_proc_sendAdminVideoAuditMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_handleVideoAuditMsg_args__isset {
  _TPushMsg_proc_handleVideoAuditMsg_args__isset() : handle_userid(false), groupid(false), msgid(false), agree(false), apply_userid(false) {}
  bool handle_userid :1;
  bool groupid :1;
  bool msgid :1;
  bool agree :1;
  bool apply_userid :1;
} _TPushMsg_proc_handleVideoAuditMsg_args__isset;

class TPushMsg_proc_handleVideoAuditMsg_args {
 public:

  TPushMsg_proc_handleVideoAuditMsg_args(const TPushMsg_proc_handleVideoAuditMsg_args&);
  TPushMsg_proc_handleVideoAuditMsg_args& operator=(const TPushMsg_proc_handleVideoAuditMsg_args&);
  TPushMsg_proc_handleVideoAuditMsg_args() : handle_userid(0), groupid(0), msgid(0), agree(0), apply_userid(0) {
  }

  virtual ~TPushMsg_proc_handleVideoAuditMsg_args() throw();
  int32_t handle_userid;
  int32_t groupid;
  int32_t msgid;
  bool agree;
  int32_t apply_userid;

  _TPushMsg_proc_handleVideoAuditMsg_args__isset __isset;

  void __set_handle_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_msgid(const int32_t val);

  void __set_agree(const bool val);

  void __set_apply_userid(const int32_t val);

  bool operator == (const TPushMsg_proc_handleVideoAuditMsg_args & rhs) const
  {
    if (!(handle_userid == rhs.handle_userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(msgid == rhs.msgid))
      return false;
    if (!(agree == rhs.agree))
      return false;
    if (!(apply_userid == rhs.apply_userid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_handleVideoAuditMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_handleVideoAuditMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_handleVideoAuditMsg_pargs {
 public:


  virtual ~TPushMsg_proc_handleVideoAuditMsg_pargs() throw();
  const int32_t* handle_userid;
  const int32_t* groupid;
  const int32_t* msgid;
  const bool* agree;
  const int32_t* apply_userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_handleVideoAuditMsg_result__isset {
  _TPushMsg_proc_handleVideoAuditMsg_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_handleVideoAuditMsg_result__isset;

class TPushMsg_proc_handleVideoAuditMsg_result {
 public:

  TPushMsg_proc_handleVideoAuditMsg_result(const TPushMsg_proc_handleVideoAuditMsg_result&);
  TPushMsg_proc_handleVideoAuditMsg_result& operator=(const TPushMsg_proc_handleVideoAuditMsg_result&);
  TPushMsg_proc_handleVideoAuditMsg_result() : success(0) {
  }

  virtual ~TPushMsg_proc_handleVideoAuditMsg_result() throw();
  bool success;

  _TPushMsg_proc_handleVideoAuditMsg_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TPushMsg_proc_handleVideoAuditMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_handleVideoAuditMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_handleVideoAuditMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_handleVideoAuditMsg_presult__isset {
  _TPushMsg_proc_handleVideoAuditMsg_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_handleVideoAuditMsg_presult__isset;

class TPushMsg_proc_handleVideoAuditMsg_presult {
 public:


  virtual ~TPushMsg_proc_handleVideoAuditMsg_presult() throw();
  bool* success;

  _TPushMsg_proc_handleVideoAuditMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_loadGroup_args__isset {
  _TPushMsg_proc_loadGroup_args__isset() : groupid(false), host(false) {}
  bool groupid :1;
  bool host :1;
} _TPushMsg_proc_loadGroup_args__isset;

class TPushMsg_proc_loadGroup_args {
 public:

  TPushMsg_proc_loadGroup_args(const TPushMsg_proc_loadGroup_args&);
  TPushMsg_proc_loadGroup_args& operator=(const TPushMsg_proc_loadGroup_args&);
  TPushMsg_proc_loadGroup_args() : groupid(0), host() {
  }

  virtual ~TPushMsg_proc_loadGroup_args() throw();
  int32_t groupid;
  std::string host;

  _TPushMsg_proc_loadGroup_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_host(const std::string& val);

  bool operator == (const TPushMsg_proc_loadGroup_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_loadGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_loadGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_loadGroup_pargs {
 public:


  virtual ~TPushMsg_proc_loadGroup_pargs() throw();
  const int32_t* groupid;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_loadGroup_result__isset {
  _TPushMsg_proc_loadGroup_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_loadGroup_result__isset;

class TPushMsg_proc_loadGroup_result {
 public:

  TPushMsg_proc_loadGroup_result(const TPushMsg_proc_loadGroup_result&);
  TPushMsg_proc_loadGroup_result& operator=(const TPushMsg_proc_loadGroup_result&);
  TPushMsg_proc_loadGroup_result() : success(0) {
  }

  virtual ~TPushMsg_proc_loadGroup_result() throw();
  int32_t success;

  _TPushMsg_proc_loadGroup_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_loadGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_loadGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_loadGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_loadGroup_presult__isset {
  _TPushMsg_proc_loadGroup_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_loadGroup_presult__isset;

class TPushMsg_proc_loadGroup_presult {
 public:


  virtual ~TPushMsg_proc_loadGroup_presult() throw();
  int32_t* success;

  _TPushMsg_proc_loadGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroup_args__isset {
  _TPushMsg_proc_modGroup_args__isset() : groupid(false), host(false) {}
  bool groupid :1;
  bool host :1;
} _TPushMsg_proc_modGroup_args__isset;

class TPushMsg_proc_modGroup_args {
 public:

  TPushMsg_proc_modGroup_args(const TPushMsg_proc_modGroup_args&);
  TPushMsg_proc_modGroup_args& operator=(const TPushMsg_proc_modGroup_args&);
  TPushMsg_proc_modGroup_args() : groupid(0), host() {
  }

  virtual ~TPushMsg_proc_modGroup_args() throw();
  int32_t groupid;
  std::string host;

  _TPushMsg_proc_modGroup_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_host(const std::string& val);

  bool operator == (const TPushMsg_proc_modGroup_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_modGroup_pargs {
 public:


  virtual ~TPushMsg_proc_modGroup_pargs() throw();
  const int32_t* groupid;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroup_result__isset {
  _TPushMsg_proc_modGroup_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroup_result__isset;

class TPushMsg_proc_modGroup_result {
 public:

  TPushMsg_proc_modGroup_result(const TPushMsg_proc_modGroup_result&);
  TPushMsg_proc_modGroup_result& operator=(const TPushMsg_proc_modGroup_result&);
  TPushMsg_proc_modGroup_result() : success(0) {
  }

  virtual ~TPushMsg_proc_modGroup_result() throw();
  int32_t success;

  _TPushMsg_proc_modGroup_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_modGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_modGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_modGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_modGroup_presult__isset {
  _TPushMsg_proc_modGroup_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_modGroup_presult__isset;

class TPushMsg_proc_modGroup_presult {
 public:


  virtual ~TPushMsg_proc_modGroup_presult() throw();
  int32_t* success;

  _TPushMsg_proc_modGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_setGroupOwner_args__isset {
  _TPushMsg_proc_setGroupOwner_args__isset() : groupid(false), new_ownerid(false) {}
  bool groupid :1;
  bool new_ownerid :1;
} _TPushMsg_proc_setGroupOwner_args__isset;

class TPushMsg_proc_setGroupOwner_args {
 public:

  TPushMsg_proc_setGroupOwner_args(const TPushMsg_proc_setGroupOwner_args&);
  TPushMsg_proc_setGroupOwner_args& operator=(const TPushMsg_proc_setGroupOwner_args&);
  TPushMsg_proc_setGroupOwner_args() : groupid(0), new_ownerid(0) {
  }

  virtual ~TPushMsg_proc_setGroupOwner_args() throw();
  int32_t groupid;
  int32_t new_ownerid;

  _TPushMsg_proc_setGroupOwner_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_new_ownerid(const int32_t val);

  bool operator == (const TPushMsg_proc_setGroupOwner_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(new_ownerid == rhs.new_ownerid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_setGroupOwner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_setGroupOwner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_setGroupOwner_pargs {
 public:


  virtual ~TPushMsg_proc_setGroupOwner_pargs() throw();
  const int32_t* groupid;
  const int32_t* new_ownerid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_setGroupOwner_result__isset {
  _TPushMsg_proc_setGroupOwner_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_setGroupOwner_result__isset;

class TPushMsg_proc_setGroupOwner_result {
 public:

  TPushMsg_proc_setGroupOwner_result(const TPushMsg_proc_setGroupOwner_result&);
  TPushMsg_proc_setGroupOwner_result& operator=(const TPushMsg_proc_setGroupOwner_result&);
  TPushMsg_proc_setGroupOwner_result() : success(0) {
  }

  virtual ~TPushMsg_proc_setGroupOwner_result() throw();
  bool success;

  _TPushMsg_proc_setGroupOwner_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TPushMsg_proc_setGroupOwner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_setGroupOwner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_setGroupOwner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_setGroupOwner_presult__isset {
  _TPushMsg_proc_setGroupOwner_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_setGroupOwner_presult__isset;

class TPushMsg_proc_setGroupOwner_presult {
 public:


  virtual ~TPushMsg_proc_setGroupOwner_presult() throw();
  bool* success;

  _TPushMsg_proc_setGroupOwner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_queryInGroupList_args__isset {
  _TPushMsg_proc_queryInGroupList_args__isset() : userid(false), groupid(false) {}
  bool userid :1;
  bool groupid :1;
} _TPushMsg_proc_queryInGroupList_args__isset;

class TPushMsg_proc_queryInGroupList_args {
 public:

  TPushMsg_proc_queryInGroupList_args(const TPushMsg_proc_queryInGroupList_args&);
  TPushMsg_proc_queryInGroupList_args& operator=(const TPushMsg_proc_queryInGroupList_args&);
  TPushMsg_proc_queryInGroupList_args() : userid(0), groupid(0) {
  }

  virtual ~TPushMsg_proc_queryInGroupList_args() throw();
  int32_t userid;
  int32_t groupid;

  _TPushMsg_proc_queryInGroupList_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  bool operator == (const TPushMsg_proc_queryInGroupList_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_queryInGroupList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_queryInGroupList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_queryInGroupList_pargs {
 public:


  virtual ~TPushMsg_proc_queryInGroupList_pargs() throw();
  const int32_t* userid;
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_queryInGroupList_result__isset {
  _TPushMsg_proc_queryInGroupList_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_queryInGroupList_result__isset;

class TPushMsg_proc_queryInGroupList_result {
 public:

  TPushMsg_proc_queryInGroupList_result(const TPushMsg_proc_queryInGroupList_result&);
  TPushMsg_proc_queryInGroupList_result& operator=(const TPushMsg_proc_queryInGroupList_result&);
  TPushMsg_proc_queryInGroupList_result() {
  }

  virtual ~TPushMsg_proc_queryInGroupList_result() throw();
  std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  success;

  _TPushMsg_proc_queryInGroupList_result__isset __isset;

  void __set_success(const std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & val);

  bool operator == (const TPushMsg_proc_queryInGroupList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_queryInGroupList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_queryInGroupList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_queryInGroupList_presult__isset {
  _TPushMsg_proc_queryInGroupList_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_queryInGroupList_presult__isset;

class TPushMsg_proc_queryInGroupList_presult {
 public:


  virtual ~TPushMsg_proc_queryInGroupList_presult() throw();
  std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > * success;

  _TPushMsg_proc_queryInGroupList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_joingroup_args__isset {
  _TPushMsg_proc_joingroup_args__isset() : oReq(false) {}
  bool oReq :1;
} _TPushMsg_proc_joingroup_args__isset;

class TPushMsg_proc_joingroup_args {
 public:

  TPushMsg_proc_joingroup_args(const TPushMsg_proc_joingroup_args&);
  TPushMsg_proc_joingroup_args& operator=(const TPushMsg_proc_joingroup_args&);
  TPushMsg_proc_joingroup_args() {
  }

  virtual ~TPushMsg_proc_joingroup_args() throw();
   ::TJoinGroup oReq;

  _TPushMsg_proc_joingroup_args__isset __isset;

  void __set_oReq(const  ::TJoinGroup& val);

  bool operator == (const TPushMsg_proc_joingroup_args & rhs) const
  {
    if (!(oReq == rhs.oReq))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_joingroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_joingroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TPushMsg_proc_joingroup_pargs {
 public:


  virtual ~TPushMsg_proc_joingroup_pargs() throw();
  const  ::TJoinGroup* oReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_joingroup_result__isset {
  _TPushMsg_proc_joingroup_result__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_joingroup_result__isset;

class TPushMsg_proc_joingroup_result {
 public:

  TPushMsg_proc_joingroup_result(const TPushMsg_proc_joingroup_result&);
  TPushMsg_proc_joingroup_result& operator=(const TPushMsg_proc_joingroup_result&);
  TPushMsg_proc_joingroup_result() : success(0) {
  }

  virtual ~TPushMsg_proc_joingroup_result() throw();
  int32_t success;

  _TPushMsg_proc_joingroup_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TPushMsg_proc_joingroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TPushMsg_proc_joingroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPushMsg_proc_joingroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TPushMsg_proc_joingroup_presult__isset {
  _TPushMsg_proc_joingroup_presult__isset() : success(false) {}
  bool success :1;
} _TPushMsg_proc_joingroup_presult__isset;

class TPushMsg_proc_joingroup_presult {
 public:


  virtual ~TPushMsg_proc_joingroup_presult() throw();
  int32_t* success;

  _TPushMsg_proc_joingroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TPushMsgClient : virtual public TPushMsgIf {
 public:
  TPushMsgClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TPushMsgClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  void send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings();
  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  void send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch();
  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  void send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode();
  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  void send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers();
  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch();
  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  void send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch();
  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch();
  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  void send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting();
  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  void send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting();
  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  void send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole();
  int32_t proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  void send_proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  int32_t recv_proc_modGroupBlackList();
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid);
  void send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return);
  int32_t proc_reloadUserInfo(const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
  int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  void send_proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  int32_t recv_proc_sendSysNoticeMsg();
  int32_t proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg);
  void send_proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg);
  int32_t recv_proc_sendUserNoticeMsg();
  int32_t proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url);
  void send_proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url);
  int32_t recv_proc_sendAdminVideoAuditMsg();
  bool proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  void send_proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_proc_handleVideoAuditMsg();
  int32_t proc_loadGroup(const int32_t groupid, const std::string& host);
  void send_proc_loadGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_loadGroup();
  int32_t proc_modGroup(const int32_t groupid, const std::string& host);
  void send_proc_modGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_modGroup();
  bool proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid);
  void send_proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid);
  bool recv_proc_setGroupOwner();
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid);
  void send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  int32_t proc_joingroup(const  ::TJoinGroup& oReq);
  void send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TPushMsgProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TPushMsgIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TPushMsgProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_modGroupSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVisitSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modJoinGroupMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_kickAllOnlookers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modContributionListSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVoiceChatSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVideoAuthSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupUserGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupUserRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupBlackList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_getGroupVisitorLst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_reloadUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_sendSysNoticeMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_sendUserNoticeMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_sendAdminVideoAuditMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_handleVideoAuditMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_loadGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_setGroupOwner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_queryInGroupList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_joingroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TPushMsgProcessor(boost::shared_ptr<TPushMsgIf> iface) :
    iface_(iface) {
    processMap_["proc_modGroupSettings"] = &TPushMsgProcessor::process_proc_modGroupSettings;
    processMap_["proc_modVisitSwitch"] = &TPushMsgProcessor::process_proc_modVisitSwitch;
    processMap_["proc_modJoinGroupMode"] = &TPushMsgProcessor::process_proc_modJoinGroupMode;
    processMap_["proc_kickAllOnlookers"] = &TPushMsgProcessor::process_proc_kickAllOnlookers;
    processMap_["proc_modContributionListSwitch"] = &TPushMsgProcessor::process_proc_modContributionListSwitch;
    processMap_["proc_modVoiceChatSwitch"] = &TPushMsgProcessor::process_proc_modVoiceChatSwitch;
    processMap_["proc_modVideoAuthSwitch"] = &TPushMsgProcessor::process_proc_modVideoAuthSwitch;
    processMap_["proc_modGroupGainSetting"] = &TPushMsgProcessor::process_proc_modGroupGainSetting;
    processMap_["proc_modGroupUserGainSetting"] = &TPushMsgProcessor::process_proc_modGroupUserGainSetting;
    processMap_["proc_modGroupUserRole"] = &TPushMsgProcessor::process_proc_modGroupUserRole;
    processMap_["proc_modGroupBlackList"] = &TPushMsgProcessor::process_proc_modGroupBlackList;
    processMap_["proc_getGroupVisitorLst"] = &TPushMsgProcessor::process_proc_getGroupVisitorLst;
    processMap_["proc_reloadUserInfo"] = &TPushMsgProcessor::process_proc_reloadUserInfo;
    processMap_["proc_sendSysNoticeMsg"] = &TPushMsgProcessor::process_proc_sendSysNoticeMsg;
    processMap_["proc_sendUserNoticeMsg"] = &TPushMsgProcessor::process_proc_sendUserNoticeMsg;
    processMap_["proc_sendAdminVideoAuditMsg"] = &TPushMsgProcessor::process_proc_sendAdminVideoAuditMsg;
    processMap_["proc_handleVideoAuditMsg"] = &TPushMsgProcessor::process_proc_handleVideoAuditMsg;
    processMap_["proc_loadGroup"] = &TPushMsgProcessor::process_proc_loadGroup;
    processMap_["proc_modGroup"] = &TPushMsgProcessor::process_proc_modGroup;
    processMap_["proc_setGroupOwner"] = &TPushMsgProcessor::process_proc_setGroupOwner;
    processMap_["proc_queryInGroupList"] = &TPushMsgProcessor::process_proc_queryInGroupList;
    processMap_["proc_joingroup"] = &TPushMsgProcessor::process_proc_joingroup;
  }

  virtual ~TPushMsgProcessor() {}
};

class TPushMsgProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TPushMsgProcessorFactory(const ::boost::shared_ptr< TPushMsgIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TPushMsgIfFactory > handlerFactory_;
};

class TPushMsgMultiface : virtual public TPushMsgIf {
 public:
  TPushMsgMultiface(std::vector<boost::shared_ptr<TPushMsgIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TPushMsgMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TPushMsgIf> > ifaces_;
  TPushMsgMultiface() {}
  void add(boost::shared_ptr<TPushMsgIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupSettings(runid, groupid, mSetting);
    }
    return ifaces_[i]->proc_modGroupSettings(runid, groupid, mSetting);
  }

  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
    }
    return ifaces_[i]->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
  }

  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
    }
    return ifaces_[i]->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
  }

  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_kickAllOnlookers(runid, groupid);
    }
    return ifaces_[i]->proc_kickAllOnlookers(runid, groupid);
  }

  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modContributionListSwitch(runid, groupid, Switch);
    }
    return ifaces_[i]->proc_modContributionListSwitch(runid, groupid, Switch);
  }

  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
    }
    return ifaces_[i]->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
  }

  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVideoAuthSwitch(runid, groupid, Switch);
    }
    return ifaces_[i]->proc_modVideoAuthSwitch(runid, groupid, Switch);
  }

  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
    }
    return ifaces_[i]->proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
  }

  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupUserGainSetting(runid, groupid, userid, percent);
    }
    return ifaces_[i]->proc_modGroupUserGainSetting(runid, groupid, userid, percent);
  }

  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupUserRole(runid, groupid, userid, roleType);
    }
    return ifaces_[i]->proc_modGroupUserRole(runid, groupid, userid, roleType);
  }

  int32_t proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupBlackList(runid, groupid, userid, isAdd);
    }
    return ifaces_[i]->proc_modGroupBlackList(runid, groupid, userid, isAdd);
  }

  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_getGroupVisitorLst(_return, groupid);
    }
    ifaces_[i]->proc_getGroupVisitorLst(_return, groupid);
    return;
  }

  int32_t proc_reloadUserInfo(const int32_t userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_reloadUserInfo(userid);
    }
    return ifaces_[i]->proc_reloadUserInfo(userid);
  }

  int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_sendSysNoticeMsg(msg, lstCondition, onlineOnly);
    }
    return ifaces_[i]->proc_sendSysNoticeMsg(msg, lstCondition, onlineOnly);
  }

  int32_t proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_sendUserNoticeMsg(userid, msg);
    }
    return ifaces_[i]->proc_sendUserNoticeMsg(userid, msg);
  }

  int32_t proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_sendAdminVideoAuditMsg(userid, groupid, url);
    }
    return ifaces_[i]->proc_sendAdminVideoAuditMsg(userid, groupid, url);
  }

  bool proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_handleVideoAuditMsg(handle_userid, groupid, msgid, agree, apply_userid);
    }
    return ifaces_[i]->proc_handleVideoAuditMsg(handle_userid, groupid, msgid, agree, apply_userid);
  }

  int32_t proc_loadGroup(const int32_t groupid, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_loadGroup(groupid, host);
    }
    return ifaces_[i]->proc_loadGroup(groupid, host);
  }

  int32_t proc_modGroup(const int32_t groupid, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroup(groupid, host);
    }
    return ifaces_[i]->proc_modGroup(groupid, host);
  }

  bool proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_setGroupOwner(groupid, new_ownerid);
    }
    return ifaces_[i]->proc_setGroupOwner(groupid, new_ownerid);
  }

  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_queryInGroupList(_return, userid, groupid);
    }
    ifaces_[i]->proc_queryInGroupList(_return, userid, groupid);
    return;
  }

  int32_t proc_joingroup(const  ::TJoinGroup& oReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_joingroup(oReq);
    }
    return ifaces_[i]->proc_joingroup(oReq);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TPushMsgConcurrentClient : virtual public TPushMsgIf {
 public:
  TPushMsgConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TPushMsgConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings(const int32_t seqid);
  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch(const int32_t seqid);
  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode(const int32_t seqid);
  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers(const int32_t seqid);
  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch(const int32_t seqid);
  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch(const int32_t seqid);
  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch(const int32_t seqid);
  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting(const int32_t seqid);
  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting(const int32_t seqid);
  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole(const int32_t seqid);
  int32_t proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  int32_t send_proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  int32_t recv_proc_modGroupBlackList(const int32_t seqid);
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid);
  int32_t send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t seqid);
  int32_t proc_reloadUserInfo(const int32_t userid);
  int32_t send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo(const int32_t seqid);
  int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  int32_t send_proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  int32_t recv_proc_sendSysNoticeMsg(const int32_t seqid);
  int32_t proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg);
  int32_t send_proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg);
  int32_t recv_proc_sendUserNoticeMsg(const int32_t seqid);
  int32_t proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url);
  int32_t send_proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url);
  int32_t recv_proc_sendAdminVideoAuditMsg(const int32_t seqid);
  bool proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  int32_t send_proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_proc_handleVideoAuditMsg(const int32_t seqid);
  int32_t proc_loadGroup(const int32_t groupid, const std::string& host);
  int32_t send_proc_loadGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_loadGroup(const int32_t seqid);
  int32_t proc_modGroup(const int32_t groupid, const std::string& host);
  int32_t send_proc_modGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_modGroup(const int32_t seqid);
  bool proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid);
  int32_t send_proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid);
  bool recv_proc_setGroupOwner(const int32_t seqid);
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid);
  int32_t send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t seqid);
  int32_t proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TPushMsgCobClient;

class TPushMsgCobClIf {
 public:
  virtual ~TPushMsgCobClIf() {}
  virtual void proc_modGroupSettings(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual void proc_modVisitSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual void proc_modJoinGroupMode(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual void proc_kickAllOnlookers(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid) = 0;
  virtual void proc_modContributionListSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modVoiceChatSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual void proc_modVideoAuthSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupGainSetting(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual void proc_modGroupUserGainSetting(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
  virtual void proc_modGroupUserRole(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual void proc_modGroupBlackList(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) = 0;
  virtual void proc_getGroupVisitorLst(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid) = 0;
  virtual void proc_reloadUserInfo(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid) = 0;
  virtual void proc_sendSysNoticeMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) = 0;
  virtual void proc_sendUserNoticeMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const  ::TNoticeMsg& msg) = 0;
  virtual void proc_sendAdminVideoAuditMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const int32_t groupid, const std::string& url) = 0;
  virtual void proc_handleVideoAuditMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual void proc_loadGroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_setGroupOwner(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const int32_t new_ownerid) = 0;
  virtual void proc_queryInGroupList(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const int32_t groupid) = 0;
  virtual void proc_joingroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const  ::TJoinGroup& oReq) = 0;
};

class TPushMsgCobSvIf {
 public:
  virtual ~TPushMsgCobSvIf() {}
  virtual void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid) = 0;
  virtual void proc_modContributionListSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual void proc_modGroupUserGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
  virtual void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual void proc_modGroupBlackList(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) = 0;
  virtual void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t groupid) = 0;
  virtual void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid) = 0;
  virtual void proc_sendSysNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) = 0;
  virtual void proc_sendUserNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid, const  ::TNoticeMsg& msg) = 0;
  virtual void proc_sendAdminVideoAuditMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid, const int32_t groupid, const std::string& url) = 0;
  virtual void proc_handleVideoAuditMsg(tcxx::function<void(bool const& _return)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) = 0;
  virtual void proc_loadGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const int32_t new_ownerid) = 0;
  virtual void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t userid, const int32_t groupid) = 0;
  virtual void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& oReq) = 0;
};

class TPushMsgCobSvIfFactory {
 public:
  typedef TPushMsgCobSvIf Handler;

  virtual ~TPushMsgCobSvIfFactory() {}

  virtual TPushMsgCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TPushMsgCobSvIf* /* handler */) = 0;
};

class TPushMsgCobSvIfSingletonFactory : virtual public TPushMsgCobSvIfFactory {
 public:
  TPushMsgCobSvIfSingletonFactory(const boost::shared_ptr<TPushMsgCobSvIf>& iface) : iface_(iface) {}
  virtual ~TPushMsgCobSvIfSingletonFactory() {}

  virtual TPushMsgCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TPushMsgCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TPushMsgCobSvIf> iface_;
};

class TPushMsgCobSvNull : virtual public TPushMsgCobSvIf {
 public:
  virtual ~TPushMsgCobSvNull() {}
  void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & /* mSetting */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* kickOnlooker */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const  ::TJoinGroupCondition& /* maleCondition */, const  ::TJoinGroupCondition& /* femaleCondition */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modContributionListSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* visitOnMic */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const int8_t /* rangeType */, const int8_t /* percent */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupUserGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int8_t /* percent */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int32_t /* roleType */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupBlackList(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const bool /* isAdd */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t /* groupid */) {
    std::vector< ::TUserGroupInfo>  _return;
    return cob(_return);
  }
  void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* userid */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_sendSysNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const  ::TNoticeMsg& /* msg */, const std::vector< ::TCondition> & /* lstCondition */, const bool /* onlineOnly */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_sendUserNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* userid */, const  ::TNoticeMsg& /* msg */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_sendAdminVideoAuditMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* userid */, const int32_t /* groupid */, const std::string& /* url */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_handleVideoAuditMsg(tcxx::function<void(bool const& _return)> cob, const int32_t /* handle_userid */, const int32_t /* groupid */, const int32_t /* msgid */, const bool /* agree */, const int32_t /* apply_userid */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_loadGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* groupid */, const std::string& /* host */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* groupid */, const std::string& /* host */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t /* groupid */, const int32_t /* new_ownerid */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t /* userid */, const int32_t /* groupid */) {
    std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  _return;
    return cob(_return);
  }
  void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& /* oReq */) {
    int32_t _return = 0;
    return cob(_return);
  }
};

class TPushMsgCobClient : virtual public TPushMsgCobClIf {
 public:
  TPushMsgCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void proc_modGroupSettings(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  void send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings();
  void proc_modVisitSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  void send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch();
  void proc_modJoinGroupMode(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  void send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode();
  void proc_kickAllOnlookers(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid);
  void send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers();
  void proc_modContributionListSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch();
  void proc_modVoiceChatSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  void send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch();
  void proc_modVideoAuthSwitch(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch();
  void proc_modGroupGainSetting(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  void send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting();
  void proc_modGroupUserGainSetting(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  void send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting();
  void proc_modGroupUserRole(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  void send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole();
  void proc_modGroupBlackList(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  void send_proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd);
  int32_t recv_proc_modGroupBlackList();
  void proc_getGroupVisitorLst(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid);
  void send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return);
  void proc_reloadUserInfo(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
  void proc_sendSysNoticeMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  void send_proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly);
  int32_t recv_proc_sendSysNoticeMsg();
  void proc_sendUserNoticeMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const  ::TNoticeMsg& msg);
  void send_proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg);
  int32_t recv_proc_sendUserNoticeMsg();
  void proc_sendAdminVideoAuditMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const int32_t groupid, const std::string& url);
  void send_proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url);
  int32_t recv_proc_sendAdminVideoAuditMsg();
  void proc_handleVideoAuditMsg(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  void send_proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid);
  bool recv_proc_handleVideoAuditMsg();
  void proc_loadGroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const std::string& host);
  void send_proc_loadGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_loadGroup();
  void proc_modGroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const std::string& host);
  void send_proc_modGroup(const int32_t groupid, const std::string& host);
  int32_t recv_proc_modGroup();
  void proc_setGroupOwner(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t groupid, const int32_t new_ownerid);
  void send_proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid);
  bool recv_proc_setGroupOwner();
  void proc_queryInGroupList(tcxx::function<void(TPushMsgCobClient* client)> cob, const int32_t userid, const int32_t groupid);
  void send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  void proc_joingroup(tcxx::function<void(TPushMsgCobClient* client)> cob, const  ::TJoinGroup& oReq);
  void send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TPushMsgAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TPushMsgCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TPushMsgAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupBlackList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupBlackList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupBlackList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector< ::TUserGroupInfo> & _return);
  void throw_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_sendSysNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_sendSysNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_sendSysNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_sendUserNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_sendUserNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_sendUserNoticeMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_sendAdminVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_sendAdminVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_sendAdminVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_handleVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_handleVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_handleVideoAuditMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  void throw_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TPushMsgAsyncProcessor(boost::shared_ptr<TPushMsgCobSvIf> iface) :
    iface_(iface) {
    processMap_["proc_modGroupSettings"] = &TPushMsgAsyncProcessor::process_proc_modGroupSettings;
    processMap_["proc_modVisitSwitch"] = &TPushMsgAsyncProcessor::process_proc_modVisitSwitch;
    processMap_["proc_modJoinGroupMode"] = &TPushMsgAsyncProcessor::process_proc_modJoinGroupMode;
    processMap_["proc_kickAllOnlookers"] = &TPushMsgAsyncProcessor::process_proc_kickAllOnlookers;
    processMap_["proc_modContributionListSwitch"] = &TPushMsgAsyncProcessor::process_proc_modContributionListSwitch;
    processMap_["proc_modVoiceChatSwitch"] = &TPushMsgAsyncProcessor::process_proc_modVoiceChatSwitch;
    processMap_["proc_modVideoAuthSwitch"] = &TPushMsgAsyncProcessor::process_proc_modVideoAuthSwitch;
    processMap_["proc_modGroupGainSetting"] = &TPushMsgAsyncProcessor::process_proc_modGroupGainSetting;
    processMap_["proc_modGroupUserGainSetting"] = &TPushMsgAsyncProcessor::process_proc_modGroupUserGainSetting;
    processMap_["proc_modGroupUserRole"] = &TPushMsgAsyncProcessor::process_proc_modGroupUserRole;
    processMap_["proc_modGroupBlackList"] = &TPushMsgAsyncProcessor::process_proc_modGroupBlackList;
    processMap_["proc_getGroupVisitorLst"] = &TPushMsgAsyncProcessor::process_proc_getGroupVisitorLst;
    processMap_["proc_reloadUserInfo"] = &TPushMsgAsyncProcessor::process_proc_reloadUserInfo;
    processMap_["proc_sendSysNoticeMsg"] = &TPushMsgAsyncProcessor::process_proc_sendSysNoticeMsg;
    processMap_["proc_sendUserNoticeMsg"] = &TPushMsgAsyncProcessor::process_proc_sendUserNoticeMsg;
    processMap_["proc_sendAdminVideoAuditMsg"] = &TPushMsgAsyncProcessor::process_proc_sendAdminVideoAuditMsg;
    processMap_["proc_handleVideoAuditMsg"] = &TPushMsgAsyncProcessor::process_proc_handleVideoAuditMsg;
    processMap_["proc_loadGroup"] = &TPushMsgAsyncProcessor::process_proc_loadGroup;
    processMap_["proc_modGroup"] = &TPushMsgAsyncProcessor::process_proc_modGroup;
    processMap_["proc_setGroupOwner"] = &TPushMsgAsyncProcessor::process_proc_setGroupOwner;
    processMap_["proc_queryInGroupList"] = &TPushMsgAsyncProcessor::process_proc_queryInGroupList;
    processMap_["proc_joingroup"] = &TPushMsgAsyncProcessor::process_proc_joingroup;
  }

  virtual ~TPushMsgAsyncProcessor() {}
};

class TPushMsgAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TPushMsgAsyncProcessorFactory(const ::boost::shared_ptr< TPushMsgCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TPushMsgCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
