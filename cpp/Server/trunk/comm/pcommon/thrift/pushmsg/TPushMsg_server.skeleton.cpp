// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TPushMsg.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class TPushMsgHandler : virtual public TPushMsgIf {
 public:
  TPushMsgHandler() {
    // Your initialization goes here
  }

  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    // Your implementation goes here
    printf("proc_modGroupSettings\n");
  }

  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    // Your implementation goes here
    printf("proc_modVisitSwitch\n");
  }

  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    // Your implementation goes here
    printf("proc_modJoinGroupMode\n");
  }

  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_kickAllOnlookers\n");
  }

  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    // Your implementation goes here
    printf("proc_modContributionListSwitch\n");
  }

  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    // Your implementation goes here
    printf("proc_modVoiceChatSwitch\n");
  }

  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    // Your implementation goes here
    printf("proc_modVideoAuthSwitch\n");
  }

  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) {
    // Your implementation goes here
    printf("proc_modGroupGainSetting\n");
  }

  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) {
    // Your implementation goes here
    printf("proc_modGroupUserGainSetting\n");
  }

  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    // Your implementation goes here
    printf("proc_modGroupUserRole\n");
  }

  int32_t proc_modGroupBlackList(const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) {
    // Your implementation goes here
    printf("proc_modGroupBlackList\n");
  }

  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_getGroupVisitorLst\n");
  }

  int32_t proc_reloadUserInfo(const int32_t userid) {
    // Your implementation goes here
    printf("proc_reloadUserInfo\n");
  }

  int32_t proc_sendSysNoticeMsg(const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) {
    // Your implementation goes here
    printf("proc_sendSysNoticeMsg\n");
  }

  int32_t proc_sendUserNoticeMsg(const int32_t userid, const  ::TNoticeMsg& msg) {
    // Your implementation goes here
    printf("proc_sendUserNoticeMsg\n");
  }

  int32_t proc_sendAdminVideoAuditMsg(const int32_t userid, const int32_t groupid, const std::string& url) {
    // Your implementation goes here
    printf("proc_sendAdminVideoAuditMsg\n");
  }

  bool proc_handleVideoAuditMsg(const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) {
    // Your implementation goes here
    printf("proc_handleVideoAuditMsg\n");
  }

  int32_t proc_loadGroup(const int32_t groupid, const std::string& host) {
    // Your implementation goes here
    printf("proc_loadGroup\n");
  }

  int32_t proc_modGroup(const int32_t groupid, const std::string& host) {
    // Your implementation goes here
    printf("proc_modGroup\n");
  }

  bool proc_setGroupOwner(const int32_t groupid, const int32_t new_ownerid) {
    // Your implementation goes here
    printf("proc_setGroupOwner\n");
  }

  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_queryInGroupList\n");
  }

  int32_t proc_joingroup(const  ::TJoinGroup& oReq) {
    // Your implementation goes here
    printf("proc_joingroup\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TPushMsgHandler> handler(new TPushMsgHandler());
  shared_ptr<TProcessor> processor(new TPushMsgProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

