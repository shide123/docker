/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TTpPushSvrIf_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _ke_PushMsgTypeValues[] = {
  e_PushMsgType::PrivateChat,
  e_PushMsgType::GroupChat,
  e_PushMsgType::GroupPrivateChat
};
const char* _ke_PushMsgTypeNames[] = {
  "PrivateChat",
  "GroupChat",
  "GroupPrivateChat"
};
const std::map<int, const char*> _e_PushMsgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _ke_PushMsgTypeValues, _ke_PushMsgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TChatMsgPush::~TChatMsgPush() throw() {
}


void TChatMsgPush::__set_msg_type(const e_PushMsgType::type val) {
  this->msg_type = val;
}

void TChatMsgPush::__set_srcuid(const int32_t val) {
  this->srcuid = val;
}

void TChatMsgPush::__set_title(const std::string& val) {
  this->title = val;
}

void TChatMsgPush::__set_description(const std::string& val) {
  this->description = val;
}

void TChatMsgPush::__set_create_time(const int64_t val) {
  this->create_time = val;
}

void TChatMsgPush::__set_notify_id(const std::string& val) {
  this->notify_id = val;
}

void TChatMsgPush::__set_include_muted(const bool val) {
  this->include_muted = val;
}

void TChatMsgPush::__set_userids(const std::vector<int32_t> & val) {
  this->userids = val;
}

uint32_t TChatMsgPush::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->msg_type = (e_PushMsgType::type)ecast0;
          this->__isset.msg_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->srcuid);
          this->__isset.srcuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notify_id);
          this->__isset.notify_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->include_muted);
          this->__isset.include_muted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userids.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->userids.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->userids[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TChatMsgPush::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TChatMsgPush");

  xfer += oprot->writeFieldBegin("msg_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->msg_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("srcuid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->srcuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notify_id", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->notify_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("include_muted", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->include_muted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userids", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->userids.size()));
    std::vector<int32_t> ::const_iterator _iter6;
    for (_iter6 = this->userids.begin(); _iter6 != this->userids.end(); ++_iter6)
    {
      xfer += oprot->writeI32((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TChatMsgPush &a, TChatMsgPush &b) {
  using ::std::swap;
  swap(a.msg_type, b.msg_type);
  swap(a.srcuid, b.srcuid);
  swap(a.title, b.title);
  swap(a.description, b.description);
  swap(a.create_time, b.create_time);
  swap(a.notify_id, b.notify_id);
  swap(a.include_muted, b.include_muted);
  swap(a.userids, b.userids);
  swap(a.__isset, b.__isset);
}

TChatMsgPush::TChatMsgPush(const TChatMsgPush& other7) {
  msg_type = other7.msg_type;
  srcuid = other7.srcuid;
  title = other7.title;
  description = other7.description;
  create_time = other7.create_time;
  notify_id = other7.notify_id;
  include_muted = other7.include_muted;
  userids = other7.userids;
  __isset = other7.__isset;
}
TChatMsgPush& TChatMsgPush::operator=(const TChatMsgPush& other8) {
  msg_type = other8.msg_type;
  srcuid = other8.srcuid;
  title = other8.title;
  description = other8.description;
  create_time = other8.create_time;
  notify_id = other8.notify_id;
  include_muted = other8.include_muted;
  userids = other8.userids;
  __isset = other8.__isset;
  return *this;
}
void TChatMsgPush::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TChatMsgPush(";
  out << "msg_type=" << to_string(msg_type);
  out << ", " << "srcuid=" << to_string(srcuid);
  out << ", " << "title=" << to_string(title);
  out << ", " << "description=" << to_string(description);
  out << ", " << "create_time=" << to_string(create_time);
  out << ", " << "notify_id=" << to_string(notify_id);
  out << ", " << "include_muted=" << to_string(include_muted);
  out << ", " << "userids=" << to_string(userids);
  out << ")";
}


