/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TRoomSvr_H
#define TRoomSvr_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TRoomSvrIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TRoomSvrIf {
 public:
  virtual ~TRoomSvrIf() {}
  virtual int32_t proc_joingroup(const  ::TJoinGroup& oReq) = 0;
  virtual int32_t proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) = 0;
  virtual bool proc_setGroupOwner(const int32_t groupid, const int32_t ownerid) = 0;
  virtual bool proc_loadGroup(const int32_t groupid, const std::string& host) = 0;
  virtual bool proc_modGroup(const int32_t groupid, const std::string& host) = 0;
  virtual int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) = 0;
  virtual int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) = 0;
  virtual void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) = 0;
  virtual int32_t proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) = 0;
  virtual int32_t proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) = 0;
  virtual int32_t proc_send_notice(const std::string& notice) = 0;
  virtual int32_t proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) = 0;
  virtual int32_t proc_reloadUserInfo(const int32_t userid) = 0;
  virtual int32_t proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers) = 0;
  virtual int32_t proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) = 0;
  virtual int32_t proc_liveStart(const std::string& streamId) = 0;
  virtual int32_t proc_liveStop(const std::string& streamId) = 0;
  virtual int32_t proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) = 0;
  virtual int32_t proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse) = 0;
};

class TRoomSvrIfFactory {
 public:
  typedef TRoomSvrIf Handler;

  virtual ~TRoomSvrIfFactory() {}

  virtual TRoomSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TRoomSvrIf* /* handler */) = 0;
};

class TRoomSvrIfSingletonFactory : virtual public TRoomSvrIfFactory {
 public:
  TRoomSvrIfSingletonFactory(const boost::shared_ptr<TRoomSvrIf>& iface) : iface_(iface) {}
  virtual ~TRoomSvrIfSingletonFactory() {}

  virtual TRoomSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TRoomSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<TRoomSvrIf> iface_;
};

class TRoomSvrNull : virtual public TRoomSvrIf {
 public:
  virtual ~TRoomSvrNull() {}
  int32_t proc_joingroup(const  ::TJoinGroup& /* oReq */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_blockUserInGroup(const int32_t /* runid */, const int32_t /* userid */, const int32_t /* groupid */, const int32_t /* reasonid */, const int32_t /* kickout_min */) {
    int32_t _return = 0;
    return _return;
  }
  bool proc_setGroupOwner(const int32_t /* groupid */, const int32_t /* ownerid */) {
    bool _return = false;
    return _return;
  }
  bool proc_loadGroup(const int32_t /* groupid */, const std::string& /* host */) {
    bool _return = false;
    return _return;
  }
  bool proc_modGroup(const int32_t /* groupid */, const std::string& /* host */) {
    bool _return = false;
    return _return;
  }
  int32_t proc_modGroupSettings(const int32_t /* runid */, const int32_t /* groupid */, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & /* mSetting */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVisitSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* kickOnlooker */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modJoinGroupMode(const int32_t /* runid */, const int32_t /* groupid */, const  ::TJoinGroupCondition& /* maleCondition */, const  ::TJoinGroupCondition& /* femaleCondition */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_kickAllOnlookers(const int32_t /* runid */, const int32_t /* groupid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVoiceChatSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* visitOnMic */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modVideoAuthSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupUserRole(const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int32_t /* roleType */) {
    int32_t _return = 0;
    return _return;
  }
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & /* _return */, const int32_t /* groupid */) {
    return;
  }
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & /* _return */, const int32_t /* userid */, const int32_t /* groupid */) {
    return;
  }
  int32_t proc_give_tip(const int32_t /* srcid */, const int32_t /* toid */, const int32_t /* groupid */, const std::string& /* gifname */, const int32_t /* tiptype */, const std::string& /* srcname */, const std::string& /* toname */, const std::string& /* gifpicture */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_send_link(const int32_t /* groupid */, const std::string& /* title */, const std::string& /* source */, const std::string& /* summary */, const int32_t /* bTip */, const int32_t /* amount */, const int32_t /* pointId */, const std::string& /* head_add */, const int32_t /* recommendid */, const int32_t /* user_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_send_notice(const std::string& /* notice */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_send_course(const int32_t /* groupid */, const std::string& /* title */, const std::string& /* source */, const std::string& /* summary */, const int32_t /* bTip */, const int32_t /* amount */, const int32_t /* courseId */, const std::string& /* head_add */, const std::string& /* teachername */, const std::string& /* srcimg */, const int32_t /* recommendid */, const int32_t /* user_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_reloadUserInfo(const int32_t /* userid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_reloadRoomVirtualNumInfo(const int32_t /* liveid */, const int32_t /* numbers */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_CloseLiveAndCourse(const int32_t /* runuserid */, const int32_t /* liveid */, const int32_t /* status */, const int32_t /* type */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_liveStart(const std::string& /* streamId */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_liveStop(const std::string& /* streamId */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_sendNewSubCourseNotice(const int32_t /* courseId */, const int32_t /* subCourseId */, const int32_t /* userId */, const std::string& /* courseName */, const std::string& /* subCourseName */, const std::string& /* beginTime */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_sendNewCourseNotice(const int32_t /* courseId */, const bool /* isSubCourse */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TRoomSvr_proc_joingroup_args__isset {
  _TRoomSvr_proc_joingroup_args__isset() : oReq(false) {}
  bool oReq :1;
} _TRoomSvr_proc_joingroup_args__isset;

class TRoomSvr_proc_joingroup_args {
 public:

  TRoomSvr_proc_joingroup_args(const TRoomSvr_proc_joingroup_args&);
  TRoomSvr_proc_joingroup_args& operator=(const TRoomSvr_proc_joingroup_args&);
  TRoomSvr_proc_joingroup_args() {
  }

  virtual ~TRoomSvr_proc_joingroup_args() throw();
   ::TJoinGroup oReq;

  _TRoomSvr_proc_joingroup_args__isset __isset;

  void __set_oReq(const  ::TJoinGroup& val);

  bool operator == (const TRoomSvr_proc_joingroup_args & rhs) const
  {
    if (!(oReq == rhs.oReq))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_joingroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_joingroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_joingroup_pargs {
 public:


  virtual ~TRoomSvr_proc_joingroup_pargs() throw();
  const  ::TJoinGroup* oReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_joingroup_result__isset {
  _TRoomSvr_proc_joingroup_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_joingroup_result__isset;

class TRoomSvr_proc_joingroup_result {
 public:

  TRoomSvr_proc_joingroup_result(const TRoomSvr_proc_joingroup_result&);
  TRoomSvr_proc_joingroup_result& operator=(const TRoomSvr_proc_joingroup_result&);
  TRoomSvr_proc_joingroup_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_joingroup_result() throw();
  int32_t success;

  _TRoomSvr_proc_joingroup_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_joingroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_joingroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_joingroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_joingroup_presult__isset {
  _TRoomSvr_proc_joingroup_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_joingroup_presult__isset;

class TRoomSvr_proc_joingroup_presult {
 public:


  virtual ~TRoomSvr_proc_joingroup_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_joingroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_blockUserInGroup_args__isset {
  _TRoomSvr_proc_blockUserInGroup_args__isset() : runid(false), userid(false), groupid(false), reasonid(false), kickout_min(false) {}
  bool runid :1;
  bool userid :1;
  bool groupid :1;
  bool reasonid :1;
  bool kickout_min :1;
} _TRoomSvr_proc_blockUserInGroup_args__isset;

class TRoomSvr_proc_blockUserInGroup_args {
 public:

  TRoomSvr_proc_blockUserInGroup_args(const TRoomSvr_proc_blockUserInGroup_args&);
  TRoomSvr_proc_blockUserInGroup_args& operator=(const TRoomSvr_proc_blockUserInGroup_args&);
  TRoomSvr_proc_blockUserInGroup_args() : runid(0), userid(0), groupid(0), reasonid(0), kickout_min(0) {
  }

  virtual ~TRoomSvr_proc_blockUserInGroup_args() throw();
  int32_t runid;
  int32_t userid;
  int32_t groupid;
  int32_t reasonid;
  int32_t kickout_min;

  _TRoomSvr_proc_blockUserInGroup_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_reasonid(const int32_t val);

  void __set_kickout_min(const int32_t val);

  bool operator == (const TRoomSvr_proc_blockUserInGroup_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(reasonid == rhs.reasonid))
      return false;
    if (!(kickout_min == rhs.kickout_min))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_blockUserInGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_blockUserInGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_blockUserInGroup_pargs {
 public:


  virtual ~TRoomSvr_proc_blockUserInGroup_pargs() throw();
  const int32_t* runid;
  const int32_t* userid;
  const int32_t* groupid;
  const int32_t* reasonid;
  const int32_t* kickout_min;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_blockUserInGroup_result__isset {
  _TRoomSvr_proc_blockUserInGroup_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_blockUserInGroup_result__isset;

class TRoomSvr_proc_blockUserInGroup_result {
 public:

  TRoomSvr_proc_blockUserInGroup_result(const TRoomSvr_proc_blockUserInGroup_result&);
  TRoomSvr_proc_blockUserInGroup_result& operator=(const TRoomSvr_proc_blockUserInGroup_result&);
  TRoomSvr_proc_blockUserInGroup_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_blockUserInGroup_result() throw();
  int32_t success;

  _TRoomSvr_proc_blockUserInGroup_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_blockUserInGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_blockUserInGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_blockUserInGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_blockUserInGroup_presult__isset {
  _TRoomSvr_proc_blockUserInGroup_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_blockUserInGroup_presult__isset;

class TRoomSvr_proc_blockUserInGroup_presult {
 public:


  virtual ~TRoomSvr_proc_blockUserInGroup_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_blockUserInGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_setGroupOwner_args__isset {
  _TRoomSvr_proc_setGroupOwner_args__isset() : groupid(false), ownerid(false) {}
  bool groupid :1;
  bool ownerid :1;
} _TRoomSvr_proc_setGroupOwner_args__isset;

class TRoomSvr_proc_setGroupOwner_args {
 public:

  TRoomSvr_proc_setGroupOwner_args(const TRoomSvr_proc_setGroupOwner_args&);
  TRoomSvr_proc_setGroupOwner_args& operator=(const TRoomSvr_proc_setGroupOwner_args&);
  TRoomSvr_proc_setGroupOwner_args() : groupid(0), ownerid(0) {
  }

  virtual ~TRoomSvr_proc_setGroupOwner_args() throw();
  int32_t groupid;
  int32_t ownerid;

  _TRoomSvr_proc_setGroupOwner_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_ownerid(const int32_t val);

  bool operator == (const TRoomSvr_proc_setGroupOwner_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(ownerid == rhs.ownerid))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_setGroupOwner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_setGroupOwner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_setGroupOwner_pargs {
 public:


  virtual ~TRoomSvr_proc_setGroupOwner_pargs() throw();
  const int32_t* groupid;
  const int32_t* ownerid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_setGroupOwner_result__isset {
  _TRoomSvr_proc_setGroupOwner_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_setGroupOwner_result__isset;

class TRoomSvr_proc_setGroupOwner_result {
 public:

  TRoomSvr_proc_setGroupOwner_result(const TRoomSvr_proc_setGroupOwner_result&);
  TRoomSvr_proc_setGroupOwner_result& operator=(const TRoomSvr_proc_setGroupOwner_result&);
  TRoomSvr_proc_setGroupOwner_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_setGroupOwner_result() throw();
  bool success;

  _TRoomSvr_proc_setGroupOwner_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TRoomSvr_proc_setGroupOwner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_setGroupOwner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_setGroupOwner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_setGroupOwner_presult__isset {
  _TRoomSvr_proc_setGroupOwner_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_setGroupOwner_presult__isset;

class TRoomSvr_proc_setGroupOwner_presult {
 public:


  virtual ~TRoomSvr_proc_setGroupOwner_presult() throw();
  bool* success;

  _TRoomSvr_proc_setGroupOwner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_loadGroup_args__isset {
  _TRoomSvr_proc_loadGroup_args__isset() : groupid(false), host(false) {}
  bool groupid :1;
  bool host :1;
} _TRoomSvr_proc_loadGroup_args__isset;

class TRoomSvr_proc_loadGroup_args {
 public:

  TRoomSvr_proc_loadGroup_args(const TRoomSvr_proc_loadGroup_args&);
  TRoomSvr_proc_loadGroup_args& operator=(const TRoomSvr_proc_loadGroup_args&);
  TRoomSvr_proc_loadGroup_args() : groupid(0), host() {
  }

  virtual ~TRoomSvr_proc_loadGroup_args() throw();
  int32_t groupid;
  std::string host;

  _TRoomSvr_proc_loadGroup_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_host(const std::string& val);

  bool operator == (const TRoomSvr_proc_loadGroup_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_loadGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_loadGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_loadGroup_pargs {
 public:


  virtual ~TRoomSvr_proc_loadGroup_pargs() throw();
  const int32_t* groupid;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_loadGroup_result__isset {
  _TRoomSvr_proc_loadGroup_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_loadGroup_result__isset;

class TRoomSvr_proc_loadGroup_result {
 public:

  TRoomSvr_proc_loadGroup_result(const TRoomSvr_proc_loadGroup_result&);
  TRoomSvr_proc_loadGroup_result& operator=(const TRoomSvr_proc_loadGroup_result&);
  TRoomSvr_proc_loadGroup_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_loadGroup_result() throw();
  bool success;

  _TRoomSvr_proc_loadGroup_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TRoomSvr_proc_loadGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_loadGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_loadGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_loadGroup_presult__isset {
  _TRoomSvr_proc_loadGroup_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_loadGroup_presult__isset;

class TRoomSvr_proc_loadGroup_presult {
 public:


  virtual ~TRoomSvr_proc_loadGroup_presult() throw();
  bool* success;

  _TRoomSvr_proc_loadGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroup_args__isset {
  _TRoomSvr_proc_modGroup_args__isset() : groupid(false), host(false) {}
  bool groupid :1;
  bool host :1;
} _TRoomSvr_proc_modGroup_args__isset;

class TRoomSvr_proc_modGroup_args {
 public:

  TRoomSvr_proc_modGroup_args(const TRoomSvr_proc_modGroup_args&);
  TRoomSvr_proc_modGroup_args& operator=(const TRoomSvr_proc_modGroup_args&);
  TRoomSvr_proc_modGroup_args() : groupid(0), host() {
  }

  virtual ~TRoomSvr_proc_modGroup_args() throw();
  int32_t groupid;
  std::string host;

  _TRoomSvr_proc_modGroup_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_host(const std::string& val);

  bool operator == (const TRoomSvr_proc_modGroup_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(host == rhs.host))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modGroup_pargs {
 public:


  virtual ~TRoomSvr_proc_modGroup_pargs() throw();
  const int32_t* groupid;
  const std::string* host;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroup_result__isset {
  _TRoomSvr_proc_modGroup_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroup_result__isset;

class TRoomSvr_proc_modGroup_result {
 public:

  TRoomSvr_proc_modGroup_result(const TRoomSvr_proc_modGroup_result&);
  TRoomSvr_proc_modGroup_result& operator=(const TRoomSvr_proc_modGroup_result&);
  TRoomSvr_proc_modGroup_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modGroup_result() throw();
  bool success;

  _TRoomSvr_proc_modGroup_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TRoomSvr_proc_modGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroup_presult__isset {
  _TRoomSvr_proc_modGroup_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroup_presult__isset;

class TRoomSvr_proc_modGroup_presult {
 public:


  virtual ~TRoomSvr_proc_modGroup_presult() throw();
  bool* success;

  _TRoomSvr_proc_modGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupSettings_args__isset {
  _TRoomSvr_proc_modGroupSettings_args__isset() : runid(false), groupid(false), mSetting(false) {}
  bool runid :1;
  bool groupid :1;
  bool mSetting :1;
} _TRoomSvr_proc_modGroupSettings_args__isset;

class TRoomSvr_proc_modGroupSettings_args {
 public:

  TRoomSvr_proc_modGroupSettings_args(const TRoomSvr_proc_modGroupSettings_args&);
  TRoomSvr_proc_modGroupSettings_args& operator=(const TRoomSvr_proc_modGroupSettings_args&);
  TRoomSvr_proc_modGroupSettings_args() : runid(0), groupid(0) {
  }

  virtual ~TRoomSvr_proc_modGroupSettings_args() throw();
  int32_t runid;
  int32_t groupid;
  std::map< ::E_THRIFT_GROUP_SETTING::type, std::string>  mSetting;

  _TRoomSvr_proc_modGroupSettings_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_mSetting(const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & val);

  bool operator == (const TRoomSvr_proc_modGroupSettings_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(mSetting == rhs.mSetting))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroupSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroupSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modGroupSettings_pargs {
 public:


  virtual ~TRoomSvr_proc_modGroupSettings_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> * mSetting;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupSettings_result__isset {
  _TRoomSvr_proc_modGroupSettings_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroupSettings_result__isset;

class TRoomSvr_proc_modGroupSettings_result {
 public:

  TRoomSvr_proc_modGroupSettings_result(const TRoomSvr_proc_modGroupSettings_result&);
  TRoomSvr_proc_modGroupSettings_result& operator=(const TRoomSvr_proc_modGroupSettings_result&);
  TRoomSvr_proc_modGroupSettings_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modGroupSettings_result() throw();
  int32_t success;

  _TRoomSvr_proc_modGroupSettings_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modGroupSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroupSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroupSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupSettings_presult__isset {
  _TRoomSvr_proc_modGroupSettings_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroupSettings_presult__isset;

class TRoomSvr_proc_modGroupSettings_presult {
 public:


  virtual ~TRoomSvr_proc_modGroupSettings_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modGroupSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVisitSwitch_args__isset {
  _TRoomSvr_proc_modVisitSwitch_args__isset() : runid(false), groupid(false), Switch(false), kickOnlooker(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool kickOnlooker :1;
} _TRoomSvr_proc_modVisitSwitch_args__isset;

class TRoomSvr_proc_modVisitSwitch_args {
 public:

  TRoomSvr_proc_modVisitSwitch_args(const TRoomSvr_proc_modVisitSwitch_args&);
  TRoomSvr_proc_modVisitSwitch_args& operator=(const TRoomSvr_proc_modVisitSwitch_args&);
  TRoomSvr_proc_modVisitSwitch_args() : runid(0), groupid(0), Switch(0), kickOnlooker(0) {
  }

  virtual ~TRoomSvr_proc_modVisitSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  bool kickOnlooker;

  _TRoomSvr_proc_modVisitSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_kickOnlooker(const bool val);

  bool operator == (const TRoomSvr_proc_modVisitSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(kickOnlooker == rhs.kickOnlooker))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVisitSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVisitSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modVisitSwitch_pargs {
 public:


  virtual ~TRoomSvr_proc_modVisitSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const bool* kickOnlooker;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVisitSwitch_result__isset {
  _TRoomSvr_proc_modVisitSwitch_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVisitSwitch_result__isset;

class TRoomSvr_proc_modVisitSwitch_result {
 public:

  TRoomSvr_proc_modVisitSwitch_result(const TRoomSvr_proc_modVisitSwitch_result&);
  TRoomSvr_proc_modVisitSwitch_result& operator=(const TRoomSvr_proc_modVisitSwitch_result&);
  TRoomSvr_proc_modVisitSwitch_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modVisitSwitch_result() throw();
  int32_t success;

  _TRoomSvr_proc_modVisitSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modVisitSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVisitSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVisitSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVisitSwitch_presult__isset {
  _TRoomSvr_proc_modVisitSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVisitSwitch_presult__isset;

class TRoomSvr_proc_modVisitSwitch_presult {
 public:


  virtual ~TRoomSvr_proc_modVisitSwitch_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modVisitSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modJoinGroupMode_args__isset {
  _TRoomSvr_proc_modJoinGroupMode_args__isset() : runid(false), groupid(false), maleCondition(false), femaleCondition(false) {}
  bool runid :1;
  bool groupid :1;
  bool maleCondition :1;
  bool femaleCondition :1;
} _TRoomSvr_proc_modJoinGroupMode_args__isset;

class TRoomSvr_proc_modJoinGroupMode_args {
 public:

  TRoomSvr_proc_modJoinGroupMode_args(const TRoomSvr_proc_modJoinGroupMode_args&);
  TRoomSvr_proc_modJoinGroupMode_args& operator=(const TRoomSvr_proc_modJoinGroupMode_args&);
  TRoomSvr_proc_modJoinGroupMode_args() : runid(0), groupid(0) {
  }

  virtual ~TRoomSvr_proc_modJoinGroupMode_args() throw();
  int32_t runid;
  int32_t groupid;
   ::TJoinGroupCondition maleCondition;
   ::TJoinGroupCondition femaleCondition;

  _TRoomSvr_proc_modJoinGroupMode_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_maleCondition(const  ::TJoinGroupCondition& val);

  void __set_femaleCondition(const  ::TJoinGroupCondition& val);

  bool operator == (const TRoomSvr_proc_modJoinGroupMode_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(maleCondition == rhs.maleCondition))
      return false;
    if (!(femaleCondition == rhs.femaleCondition))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modJoinGroupMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modJoinGroupMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modJoinGroupMode_pargs {
 public:


  virtual ~TRoomSvr_proc_modJoinGroupMode_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const  ::TJoinGroupCondition* maleCondition;
  const  ::TJoinGroupCondition* femaleCondition;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modJoinGroupMode_result__isset {
  _TRoomSvr_proc_modJoinGroupMode_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modJoinGroupMode_result__isset;

class TRoomSvr_proc_modJoinGroupMode_result {
 public:

  TRoomSvr_proc_modJoinGroupMode_result(const TRoomSvr_proc_modJoinGroupMode_result&);
  TRoomSvr_proc_modJoinGroupMode_result& operator=(const TRoomSvr_proc_modJoinGroupMode_result&);
  TRoomSvr_proc_modJoinGroupMode_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modJoinGroupMode_result() throw();
  int32_t success;

  _TRoomSvr_proc_modJoinGroupMode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modJoinGroupMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modJoinGroupMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modJoinGroupMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modJoinGroupMode_presult__isset {
  _TRoomSvr_proc_modJoinGroupMode_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modJoinGroupMode_presult__isset;

class TRoomSvr_proc_modJoinGroupMode_presult {
 public:


  virtual ~TRoomSvr_proc_modJoinGroupMode_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modJoinGroupMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_kickAllOnlookers_args__isset {
  _TRoomSvr_proc_kickAllOnlookers_args__isset() : runid(false), groupid(false) {}
  bool runid :1;
  bool groupid :1;
} _TRoomSvr_proc_kickAllOnlookers_args__isset;

class TRoomSvr_proc_kickAllOnlookers_args {
 public:

  TRoomSvr_proc_kickAllOnlookers_args(const TRoomSvr_proc_kickAllOnlookers_args&);
  TRoomSvr_proc_kickAllOnlookers_args& operator=(const TRoomSvr_proc_kickAllOnlookers_args&);
  TRoomSvr_proc_kickAllOnlookers_args() : runid(0), groupid(0) {
  }

  virtual ~TRoomSvr_proc_kickAllOnlookers_args() throw();
  int32_t runid;
  int32_t groupid;

  _TRoomSvr_proc_kickAllOnlookers_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  bool operator == (const TRoomSvr_proc_kickAllOnlookers_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_kickAllOnlookers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_kickAllOnlookers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_kickAllOnlookers_pargs {
 public:


  virtual ~TRoomSvr_proc_kickAllOnlookers_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_kickAllOnlookers_result__isset {
  _TRoomSvr_proc_kickAllOnlookers_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_kickAllOnlookers_result__isset;

class TRoomSvr_proc_kickAllOnlookers_result {
 public:

  TRoomSvr_proc_kickAllOnlookers_result(const TRoomSvr_proc_kickAllOnlookers_result&);
  TRoomSvr_proc_kickAllOnlookers_result& operator=(const TRoomSvr_proc_kickAllOnlookers_result&);
  TRoomSvr_proc_kickAllOnlookers_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_kickAllOnlookers_result() throw();
  int32_t success;

  _TRoomSvr_proc_kickAllOnlookers_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_kickAllOnlookers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_kickAllOnlookers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_kickAllOnlookers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_kickAllOnlookers_presult__isset {
  _TRoomSvr_proc_kickAllOnlookers_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_kickAllOnlookers_presult__isset;

class TRoomSvr_proc_kickAllOnlookers_presult {
 public:


  virtual ~TRoomSvr_proc_kickAllOnlookers_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_kickAllOnlookers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVoiceChatSwitch_args__isset {
  _TRoomSvr_proc_modVoiceChatSwitch_args__isset() : runid(false), groupid(false), Switch(false), visitOnMic(true) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool visitOnMic :1;
} _TRoomSvr_proc_modVoiceChatSwitch_args__isset;

class TRoomSvr_proc_modVoiceChatSwitch_args {
 public:

  TRoomSvr_proc_modVoiceChatSwitch_args(const TRoomSvr_proc_modVoiceChatSwitch_args&);
  TRoomSvr_proc_modVoiceChatSwitch_args& operator=(const TRoomSvr_proc_modVoiceChatSwitch_args&);
  TRoomSvr_proc_modVoiceChatSwitch_args() : runid(0), groupid(0), Switch(0), visitOnMic(false) {
  }

  virtual ~TRoomSvr_proc_modVoiceChatSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  bool visitOnMic;

  _TRoomSvr_proc_modVoiceChatSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_visitOnMic(const bool val);

  bool operator == (const TRoomSvr_proc_modVoiceChatSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(visitOnMic == rhs.visitOnMic))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVoiceChatSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVoiceChatSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modVoiceChatSwitch_pargs {
 public:


  virtual ~TRoomSvr_proc_modVoiceChatSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const bool* visitOnMic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVoiceChatSwitch_result__isset {
  _TRoomSvr_proc_modVoiceChatSwitch_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVoiceChatSwitch_result__isset;

class TRoomSvr_proc_modVoiceChatSwitch_result {
 public:

  TRoomSvr_proc_modVoiceChatSwitch_result(const TRoomSvr_proc_modVoiceChatSwitch_result&);
  TRoomSvr_proc_modVoiceChatSwitch_result& operator=(const TRoomSvr_proc_modVoiceChatSwitch_result&);
  TRoomSvr_proc_modVoiceChatSwitch_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modVoiceChatSwitch_result() throw();
  int32_t success;

  _TRoomSvr_proc_modVoiceChatSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modVoiceChatSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVoiceChatSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVoiceChatSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVoiceChatSwitch_presult__isset {
  _TRoomSvr_proc_modVoiceChatSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVoiceChatSwitch_presult__isset;

class TRoomSvr_proc_modVoiceChatSwitch_presult {
 public:


  virtual ~TRoomSvr_proc_modVoiceChatSwitch_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modVoiceChatSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVideoAuthSwitch_args__isset {
  _TRoomSvr_proc_modVideoAuthSwitch_args__isset() : runid(false), groupid(false), Switch(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
} _TRoomSvr_proc_modVideoAuthSwitch_args__isset;

class TRoomSvr_proc_modVideoAuthSwitch_args {
 public:

  TRoomSvr_proc_modVideoAuthSwitch_args(const TRoomSvr_proc_modVideoAuthSwitch_args&);
  TRoomSvr_proc_modVideoAuthSwitch_args& operator=(const TRoomSvr_proc_modVideoAuthSwitch_args&);
  TRoomSvr_proc_modVideoAuthSwitch_args() : runid(0), groupid(0), Switch(0) {
  }

  virtual ~TRoomSvr_proc_modVideoAuthSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;

  _TRoomSvr_proc_modVideoAuthSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  bool operator == (const TRoomSvr_proc_modVideoAuthSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVideoAuthSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVideoAuthSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modVideoAuthSwitch_pargs {
 public:


  virtual ~TRoomSvr_proc_modVideoAuthSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVideoAuthSwitch_result__isset {
  _TRoomSvr_proc_modVideoAuthSwitch_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVideoAuthSwitch_result__isset;

class TRoomSvr_proc_modVideoAuthSwitch_result {
 public:

  TRoomSvr_proc_modVideoAuthSwitch_result(const TRoomSvr_proc_modVideoAuthSwitch_result&);
  TRoomSvr_proc_modVideoAuthSwitch_result& operator=(const TRoomSvr_proc_modVideoAuthSwitch_result&);
  TRoomSvr_proc_modVideoAuthSwitch_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modVideoAuthSwitch_result() throw();
  int32_t success;

  _TRoomSvr_proc_modVideoAuthSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modVideoAuthSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modVideoAuthSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modVideoAuthSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modVideoAuthSwitch_presult__isset {
  _TRoomSvr_proc_modVideoAuthSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modVideoAuthSwitch_presult__isset;

class TRoomSvr_proc_modVideoAuthSwitch_presult {
 public:


  virtual ~TRoomSvr_proc_modVideoAuthSwitch_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modVideoAuthSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupUserRole_args__isset {
  _TRoomSvr_proc_modGroupUserRole_args__isset() : runid(false), groupid(false), userid(false), roleType(false) {}
  bool runid :1;
  bool groupid :1;
  bool userid :1;
  bool roleType :1;
} _TRoomSvr_proc_modGroupUserRole_args__isset;

class TRoomSvr_proc_modGroupUserRole_args {
 public:

  TRoomSvr_proc_modGroupUserRole_args(const TRoomSvr_proc_modGroupUserRole_args&);
  TRoomSvr_proc_modGroupUserRole_args& operator=(const TRoomSvr_proc_modGroupUserRole_args&);
  TRoomSvr_proc_modGroupUserRole_args() : runid(0), groupid(0), userid(0), roleType(0) {
  }

  virtual ~TRoomSvr_proc_modGroupUserRole_args() throw();
  int32_t runid;
  int32_t groupid;
  int32_t userid;
  int32_t roleType;

  _TRoomSvr_proc_modGroupUserRole_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_roleType(const int32_t val);

  bool operator == (const TRoomSvr_proc_modGroupUserRole_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(roleType == rhs.roleType))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroupUserRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroupUserRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_modGroupUserRole_pargs {
 public:


  virtual ~TRoomSvr_proc_modGroupUserRole_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const int32_t* userid;
  const int32_t* roleType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupUserRole_result__isset {
  _TRoomSvr_proc_modGroupUserRole_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroupUserRole_result__isset;

class TRoomSvr_proc_modGroupUserRole_result {
 public:

  TRoomSvr_proc_modGroupUserRole_result(const TRoomSvr_proc_modGroupUserRole_result&);
  TRoomSvr_proc_modGroupUserRole_result& operator=(const TRoomSvr_proc_modGroupUserRole_result&);
  TRoomSvr_proc_modGroupUserRole_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_modGroupUserRole_result() throw();
  int32_t success;

  _TRoomSvr_proc_modGroupUserRole_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_modGroupUserRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_modGroupUserRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_modGroupUserRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_modGroupUserRole_presult__isset {
  _TRoomSvr_proc_modGroupUserRole_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_modGroupUserRole_presult__isset;

class TRoomSvr_proc_modGroupUserRole_presult {
 public:


  virtual ~TRoomSvr_proc_modGroupUserRole_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_modGroupUserRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_getGroupVisitorLst_args__isset {
  _TRoomSvr_proc_getGroupVisitorLst_args__isset() : groupid(false) {}
  bool groupid :1;
} _TRoomSvr_proc_getGroupVisitorLst_args__isset;

class TRoomSvr_proc_getGroupVisitorLst_args {
 public:

  TRoomSvr_proc_getGroupVisitorLst_args(const TRoomSvr_proc_getGroupVisitorLst_args&);
  TRoomSvr_proc_getGroupVisitorLst_args& operator=(const TRoomSvr_proc_getGroupVisitorLst_args&);
  TRoomSvr_proc_getGroupVisitorLst_args() : groupid(0) {
  }

  virtual ~TRoomSvr_proc_getGroupVisitorLst_args() throw();
  int32_t groupid;

  _TRoomSvr_proc_getGroupVisitorLst_args__isset __isset;

  void __set_groupid(const int32_t val);

  bool operator == (const TRoomSvr_proc_getGroupVisitorLst_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_getGroupVisitorLst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_getGroupVisitorLst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_getGroupVisitorLst_pargs {
 public:


  virtual ~TRoomSvr_proc_getGroupVisitorLst_pargs() throw();
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_getGroupVisitorLst_result__isset {
  _TRoomSvr_proc_getGroupVisitorLst_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_getGroupVisitorLst_result__isset;

class TRoomSvr_proc_getGroupVisitorLst_result {
 public:

  TRoomSvr_proc_getGroupVisitorLst_result(const TRoomSvr_proc_getGroupVisitorLst_result&);
  TRoomSvr_proc_getGroupVisitorLst_result& operator=(const TRoomSvr_proc_getGroupVisitorLst_result&);
  TRoomSvr_proc_getGroupVisitorLst_result() {
  }

  virtual ~TRoomSvr_proc_getGroupVisitorLst_result() throw();
  std::vector< ::TUserGroupInfo>  success;

  _TRoomSvr_proc_getGroupVisitorLst_result__isset __isset;

  void __set_success(const std::vector< ::TUserGroupInfo> & val);

  bool operator == (const TRoomSvr_proc_getGroupVisitorLst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_getGroupVisitorLst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_getGroupVisitorLst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_getGroupVisitorLst_presult__isset {
  _TRoomSvr_proc_getGroupVisitorLst_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_getGroupVisitorLst_presult__isset;

class TRoomSvr_proc_getGroupVisitorLst_presult {
 public:


  virtual ~TRoomSvr_proc_getGroupVisitorLst_presult() throw();
  std::vector< ::TUserGroupInfo> * success;

  _TRoomSvr_proc_getGroupVisitorLst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_queryInGroupList_args__isset {
  _TRoomSvr_proc_queryInGroupList_args__isset() : userid(false), groupid(false) {}
  bool userid :1;
  bool groupid :1;
} _TRoomSvr_proc_queryInGroupList_args__isset;

class TRoomSvr_proc_queryInGroupList_args {
 public:

  TRoomSvr_proc_queryInGroupList_args(const TRoomSvr_proc_queryInGroupList_args&);
  TRoomSvr_proc_queryInGroupList_args& operator=(const TRoomSvr_proc_queryInGroupList_args&);
  TRoomSvr_proc_queryInGroupList_args() : userid(0), groupid(0) {
  }

  virtual ~TRoomSvr_proc_queryInGroupList_args() throw();
  int32_t userid;
  int32_t groupid;

  _TRoomSvr_proc_queryInGroupList_args__isset __isset;

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  bool operator == (const TRoomSvr_proc_queryInGroupList_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_queryInGroupList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_queryInGroupList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_queryInGroupList_pargs {
 public:


  virtual ~TRoomSvr_proc_queryInGroupList_pargs() throw();
  const int32_t* userid;
  const int32_t* groupid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_queryInGroupList_result__isset {
  _TRoomSvr_proc_queryInGroupList_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_queryInGroupList_result__isset;

class TRoomSvr_proc_queryInGroupList_result {
 public:

  TRoomSvr_proc_queryInGroupList_result(const TRoomSvr_proc_queryInGroupList_result&);
  TRoomSvr_proc_queryInGroupList_result& operator=(const TRoomSvr_proc_queryInGroupList_result&);
  TRoomSvr_proc_queryInGroupList_result() {
  }

  virtual ~TRoomSvr_proc_queryInGroupList_result() throw();
  std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  success;

  _TRoomSvr_proc_queryInGroupList_result__isset __isset;

  void __set_success(const std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & val);

  bool operator == (const TRoomSvr_proc_queryInGroupList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_queryInGroupList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_queryInGroupList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_queryInGroupList_presult__isset {
  _TRoomSvr_proc_queryInGroupList_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_queryInGroupList_presult__isset;

class TRoomSvr_proc_queryInGroupList_presult {
 public:


  virtual ~TRoomSvr_proc_queryInGroupList_presult() throw();
  std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > * success;

  _TRoomSvr_proc_queryInGroupList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_give_tip_args__isset {
  _TRoomSvr_proc_give_tip_args__isset() : srcid(false), toid(false), groupid(false), gifname(false), tiptype(false), srcname(false), toname(false), gifpicture(false) {}
  bool srcid :1;
  bool toid :1;
  bool groupid :1;
  bool gifname :1;
  bool tiptype :1;
  bool srcname :1;
  bool toname :1;
  bool gifpicture :1;
} _TRoomSvr_proc_give_tip_args__isset;

class TRoomSvr_proc_give_tip_args {
 public:

  TRoomSvr_proc_give_tip_args(const TRoomSvr_proc_give_tip_args&);
  TRoomSvr_proc_give_tip_args& operator=(const TRoomSvr_proc_give_tip_args&);
  TRoomSvr_proc_give_tip_args() : srcid(0), toid(0), groupid(0), gifname(), tiptype(0), srcname(), toname(), gifpicture() {
  }

  virtual ~TRoomSvr_proc_give_tip_args() throw();
  int32_t srcid;
  int32_t toid;
  int32_t groupid;
  std::string gifname;
  int32_t tiptype;
  std::string srcname;
  std::string toname;
  std::string gifpicture;

  _TRoomSvr_proc_give_tip_args__isset __isset;

  void __set_srcid(const int32_t val);

  void __set_toid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_gifname(const std::string& val);

  void __set_tiptype(const int32_t val);

  void __set_srcname(const std::string& val);

  void __set_toname(const std::string& val);

  void __set_gifpicture(const std::string& val);

  bool operator == (const TRoomSvr_proc_give_tip_args & rhs) const
  {
    if (!(srcid == rhs.srcid))
      return false;
    if (!(toid == rhs.toid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(gifname == rhs.gifname))
      return false;
    if (!(tiptype == rhs.tiptype))
      return false;
    if (!(srcname == rhs.srcname))
      return false;
    if (!(toname == rhs.toname))
      return false;
    if (!(gifpicture == rhs.gifpicture))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_give_tip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_give_tip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_give_tip_pargs {
 public:


  virtual ~TRoomSvr_proc_give_tip_pargs() throw();
  const int32_t* srcid;
  const int32_t* toid;
  const int32_t* groupid;
  const std::string* gifname;
  const int32_t* tiptype;
  const std::string* srcname;
  const std::string* toname;
  const std::string* gifpicture;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_give_tip_result__isset {
  _TRoomSvr_proc_give_tip_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_give_tip_result__isset;

class TRoomSvr_proc_give_tip_result {
 public:

  TRoomSvr_proc_give_tip_result(const TRoomSvr_proc_give_tip_result&);
  TRoomSvr_proc_give_tip_result& operator=(const TRoomSvr_proc_give_tip_result&);
  TRoomSvr_proc_give_tip_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_give_tip_result() throw();
  int32_t success;

  _TRoomSvr_proc_give_tip_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_give_tip_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_give_tip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_give_tip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_give_tip_presult__isset {
  _TRoomSvr_proc_give_tip_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_give_tip_presult__isset;

class TRoomSvr_proc_give_tip_presult {
 public:


  virtual ~TRoomSvr_proc_give_tip_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_give_tip_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_link_args__isset {
  _TRoomSvr_proc_send_link_args__isset() : groupid(false), title(false), source(false), summary(false), bTip(false), amount(false), pointId(false), head_add(false), recommendid(false), user_id(false) {}
  bool groupid :1;
  bool title :1;
  bool source :1;
  bool summary :1;
  bool bTip :1;
  bool amount :1;
  bool pointId :1;
  bool head_add :1;
  bool recommendid :1;
  bool user_id :1;
} _TRoomSvr_proc_send_link_args__isset;

class TRoomSvr_proc_send_link_args {
 public:

  TRoomSvr_proc_send_link_args(const TRoomSvr_proc_send_link_args&);
  TRoomSvr_proc_send_link_args& operator=(const TRoomSvr_proc_send_link_args&);
  TRoomSvr_proc_send_link_args() : groupid(0), title(), source(), summary(), bTip(0), amount(0), pointId(0), head_add(), recommendid(0), user_id(0) {
  }

  virtual ~TRoomSvr_proc_send_link_args() throw();
  int32_t groupid;
  std::string title;
  std::string source;
  std::string summary;
  int32_t bTip;
  int32_t amount;
  int32_t pointId;
  std::string head_add;
  int32_t recommendid;
  int32_t user_id;

  _TRoomSvr_proc_send_link_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_title(const std::string& val);

  void __set_source(const std::string& val);

  void __set_summary(const std::string& val);

  void __set_bTip(const int32_t val);

  void __set_amount(const int32_t val);

  void __set_pointId(const int32_t val);

  void __set_head_add(const std::string& val);

  void __set_recommendid(const int32_t val);

  void __set_user_id(const int32_t val);

  bool operator == (const TRoomSvr_proc_send_link_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(summary == rhs.summary))
      return false;
    if (!(bTip == rhs.bTip))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(pointId == rhs.pointId))
      return false;
    if (!(head_add == rhs.head_add))
      return false;
    if (!(recommendid == rhs.recommendid))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_send_link_pargs {
 public:


  virtual ~TRoomSvr_proc_send_link_pargs() throw();
  const int32_t* groupid;
  const std::string* title;
  const std::string* source;
  const std::string* summary;
  const int32_t* bTip;
  const int32_t* amount;
  const int32_t* pointId;
  const std::string* head_add;
  const int32_t* recommendid;
  const int32_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_link_result__isset {
  _TRoomSvr_proc_send_link_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_link_result__isset;

class TRoomSvr_proc_send_link_result {
 public:

  TRoomSvr_proc_send_link_result(const TRoomSvr_proc_send_link_result&);
  TRoomSvr_proc_send_link_result& operator=(const TRoomSvr_proc_send_link_result&);
  TRoomSvr_proc_send_link_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_send_link_result() throw();
  int32_t success;

  _TRoomSvr_proc_send_link_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_send_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_link_presult__isset {
  _TRoomSvr_proc_send_link_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_link_presult__isset;

class TRoomSvr_proc_send_link_presult {
 public:


  virtual ~TRoomSvr_proc_send_link_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_send_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_notice_args__isset {
  _TRoomSvr_proc_send_notice_args__isset() : notice(false) {}
  bool notice :1;
} _TRoomSvr_proc_send_notice_args__isset;

class TRoomSvr_proc_send_notice_args {
 public:

  TRoomSvr_proc_send_notice_args(const TRoomSvr_proc_send_notice_args&);
  TRoomSvr_proc_send_notice_args& operator=(const TRoomSvr_proc_send_notice_args&);
  TRoomSvr_proc_send_notice_args() : notice() {
  }

  virtual ~TRoomSvr_proc_send_notice_args() throw();
  std::string notice;

  _TRoomSvr_proc_send_notice_args__isset __isset;

  void __set_notice(const std::string& val);

  bool operator == (const TRoomSvr_proc_send_notice_args & rhs) const
  {
    if (!(notice == rhs.notice))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_notice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_notice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_send_notice_pargs {
 public:


  virtual ~TRoomSvr_proc_send_notice_pargs() throw();
  const std::string* notice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_notice_result__isset {
  _TRoomSvr_proc_send_notice_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_notice_result__isset;

class TRoomSvr_proc_send_notice_result {
 public:

  TRoomSvr_proc_send_notice_result(const TRoomSvr_proc_send_notice_result&);
  TRoomSvr_proc_send_notice_result& operator=(const TRoomSvr_proc_send_notice_result&);
  TRoomSvr_proc_send_notice_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_send_notice_result() throw();
  int32_t success;

  _TRoomSvr_proc_send_notice_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_send_notice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_notice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_notice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_notice_presult__isset {
  _TRoomSvr_proc_send_notice_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_notice_presult__isset;

class TRoomSvr_proc_send_notice_presult {
 public:


  virtual ~TRoomSvr_proc_send_notice_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_send_notice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_course_args__isset {
  _TRoomSvr_proc_send_course_args__isset() : groupid(false), title(false), source(false), summary(false), bTip(false), amount(false), courseId(false), head_add(false), teachername(false), srcimg(false), recommendid(false), user_id(false) {}
  bool groupid :1;
  bool title :1;
  bool source :1;
  bool summary :1;
  bool bTip :1;
  bool amount :1;
  bool courseId :1;
  bool head_add :1;
  bool teachername :1;
  bool srcimg :1;
  bool recommendid :1;
  bool user_id :1;
} _TRoomSvr_proc_send_course_args__isset;

class TRoomSvr_proc_send_course_args {
 public:

  TRoomSvr_proc_send_course_args(const TRoomSvr_proc_send_course_args&);
  TRoomSvr_proc_send_course_args& operator=(const TRoomSvr_proc_send_course_args&);
  TRoomSvr_proc_send_course_args() : groupid(0), title(), source(), summary(), bTip(0), amount(0), courseId(0), head_add(), teachername(), srcimg(), recommendid(0), user_id(0) {
  }

  virtual ~TRoomSvr_proc_send_course_args() throw();
  int32_t groupid;
  std::string title;
  std::string source;
  std::string summary;
  int32_t bTip;
  int32_t amount;
  int32_t courseId;
  std::string head_add;
  std::string teachername;
  std::string srcimg;
  int32_t recommendid;
  int32_t user_id;

  _TRoomSvr_proc_send_course_args__isset __isset;

  void __set_groupid(const int32_t val);

  void __set_title(const std::string& val);

  void __set_source(const std::string& val);

  void __set_summary(const std::string& val);

  void __set_bTip(const int32_t val);

  void __set_amount(const int32_t val);

  void __set_courseId(const int32_t val);

  void __set_head_add(const std::string& val);

  void __set_teachername(const std::string& val);

  void __set_srcimg(const std::string& val);

  void __set_recommendid(const int32_t val);

  void __set_user_id(const int32_t val);

  bool operator == (const TRoomSvr_proc_send_course_args & rhs) const
  {
    if (!(groupid == rhs.groupid))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(summary == rhs.summary))
      return false;
    if (!(bTip == rhs.bTip))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(courseId == rhs.courseId))
      return false;
    if (!(head_add == rhs.head_add))
      return false;
    if (!(teachername == rhs.teachername))
      return false;
    if (!(srcimg == rhs.srcimg))
      return false;
    if (!(recommendid == rhs.recommendid))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_course_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_course_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_send_course_pargs {
 public:


  virtual ~TRoomSvr_proc_send_course_pargs() throw();
  const int32_t* groupid;
  const std::string* title;
  const std::string* source;
  const std::string* summary;
  const int32_t* bTip;
  const int32_t* amount;
  const int32_t* courseId;
  const std::string* head_add;
  const std::string* teachername;
  const std::string* srcimg;
  const int32_t* recommendid;
  const int32_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_course_result__isset {
  _TRoomSvr_proc_send_course_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_course_result__isset;

class TRoomSvr_proc_send_course_result {
 public:

  TRoomSvr_proc_send_course_result(const TRoomSvr_proc_send_course_result&);
  TRoomSvr_proc_send_course_result& operator=(const TRoomSvr_proc_send_course_result&);
  TRoomSvr_proc_send_course_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_send_course_result() throw();
  int32_t success;

  _TRoomSvr_proc_send_course_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_send_course_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_send_course_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_send_course_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_send_course_presult__isset {
  _TRoomSvr_proc_send_course_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_send_course_presult__isset;

class TRoomSvr_proc_send_course_presult {
 public:


  virtual ~TRoomSvr_proc_send_course_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_send_course_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadUserInfo_args__isset {
  _TRoomSvr_proc_reloadUserInfo_args__isset() : userid(false) {}
  bool userid :1;
} _TRoomSvr_proc_reloadUserInfo_args__isset;

class TRoomSvr_proc_reloadUserInfo_args {
 public:

  TRoomSvr_proc_reloadUserInfo_args(const TRoomSvr_proc_reloadUserInfo_args&);
  TRoomSvr_proc_reloadUserInfo_args& operator=(const TRoomSvr_proc_reloadUserInfo_args&);
  TRoomSvr_proc_reloadUserInfo_args() : userid(0) {
  }

  virtual ~TRoomSvr_proc_reloadUserInfo_args() throw();
  int32_t userid;

  _TRoomSvr_proc_reloadUserInfo_args__isset __isset;

  void __set_userid(const int32_t val);

  bool operator == (const TRoomSvr_proc_reloadUserInfo_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_reloadUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_reloadUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_reloadUserInfo_pargs {
 public:


  virtual ~TRoomSvr_proc_reloadUserInfo_pargs() throw();
  const int32_t* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadUserInfo_result__isset {
  _TRoomSvr_proc_reloadUserInfo_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_reloadUserInfo_result__isset;

class TRoomSvr_proc_reloadUserInfo_result {
 public:

  TRoomSvr_proc_reloadUserInfo_result(const TRoomSvr_proc_reloadUserInfo_result&);
  TRoomSvr_proc_reloadUserInfo_result& operator=(const TRoomSvr_proc_reloadUserInfo_result&);
  TRoomSvr_proc_reloadUserInfo_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_reloadUserInfo_result() throw();
  int32_t success;

  _TRoomSvr_proc_reloadUserInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_reloadUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_reloadUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_reloadUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadUserInfo_presult__isset {
  _TRoomSvr_proc_reloadUserInfo_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_reloadUserInfo_presult__isset;

class TRoomSvr_proc_reloadUserInfo_presult {
 public:


  virtual ~TRoomSvr_proc_reloadUserInfo_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_reloadUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadRoomVirtualNumInfo_args__isset {
  _TRoomSvr_proc_reloadRoomVirtualNumInfo_args__isset() : liveid(false), numbers(false) {}
  bool liveid :1;
  bool numbers :1;
} _TRoomSvr_proc_reloadRoomVirtualNumInfo_args__isset;

class TRoomSvr_proc_reloadRoomVirtualNumInfo_args {
 public:

  TRoomSvr_proc_reloadRoomVirtualNumInfo_args(const TRoomSvr_proc_reloadRoomVirtualNumInfo_args&);
  TRoomSvr_proc_reloadRoomVirtualNumInfo_args& operator=(const TRoomSvr_proc_reloadRoomVirtualNumInfo_args&);
  TRoomSvr_proc_reloadRoomVirtualNumInfo_args() : liveid(0), numbers(0) {
  }

  virtual ~TRoomSvr_proc_reloadRoomVirtualNumInfo_args() throw();
  int32_t liveid;
  int32_t numbers;

  _TRoomSvr_proc_reloadRoomVirtualNumInfo_args__isset __isset;

  void __set_liveid(const int32_t val);

  void __set_numbers(const int32_t val);

  bool operator == (const TRoomSvr_proc_reloadRoomVirtualNumInfo_args & rhs) const
  {
    if (!(liveid == rhs.liveid))
      return false;
    if (!(numbers == rhs.numbers))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_reloadRoomVirtualNumInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_reloadRoomVirtualNumInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_reloadRoomVirtualNumInfo_pargs {
 public:


  virtual ~TRoomSvr_proc_reloadRoomVirtualNumInfo_pargs() throw();
  const int32_t* liveid;
  const int32_t* numbers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadRoomVirtualNumInfo_result__isset {
  _TRoomSvr_proc_reloadRoomVirtualNumInfo_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_reloadRoomVirtualNumInfo_result__isset;

class TRoomSvr_proc_reloadRoomVirtualNumInfo_result {
 public:

  TRoomSvr_proc_reloadRoomVirtualNumInfo_result(const TRoomSvr_proc_reloadRoomVirtualNumInfo_result&);
  TRoomSvr_proc_reloadRoomVirtualNumInfo_result& operator=(const TRoomSvr_proc_reloadRoomVirtualNumInfo_result&);
  TRoomSvr_proc_reloadRoomVirtualNumInfo_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_reloadRoomVirtualNumInfo_result() throw();
  int32_t success;

  _TRoomSvr_proc_reloadRoomVirtualNumInfo_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_reloadRoomVirtualNumInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_reloadRoomVirtualNumInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_reloadRoomVirtualNumInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_reloadRoomVirtualNumInfo_presult__isset {
  _TRoomSvr_proc_reloadRoomVirtualNumInfo_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_reloadRoomVirtualNumInfo_presult__isset;

class TRoomSvr_proc_reloadRoomVirtualNumInfo_presult {
 public:


  virtual ~TRoomSvr_proc_reloadRoomVirtualNumInfo_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_reloadRoomVirtualNumInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_CloseLiveAndCourse_args__isset {
  _TRoomSvr_proc_CloseLiveAndCourse_args__isset() : runuserid(false), liveid(false), status(false), type(false) {}
  bool runuserid :1;
  bool liveid :1;
  bool status :1;
  bool type :1;
} _TRoomSvr_proc_CloseLiveAndCourse_args__isset;

class TRoomSvr_proc_CloseLiveAndCourse_args {
 public:

  TRoomSvr_proc_CloseLiveAndCourse_args(const TRoomSvr_proc_CloseLiveAndCourse_args&);
  TRoomSvr_proc_CloseLiveAndCourse_args& operator=(const TRoomSvr_proc_CloseLiveAndCourse_args&);
  TRoomSvr_proc_CloseLiveAndCourse_args() : runuserid(0), liveid(0), status(0), type(0) {
  }

  virtual ~TRoomSvr_proc_CloseLiveAndCourse_args() throw();
  int32_t runuserid;
  int32_t liveid;
  int32_t status;
  int32_t type;

  _TRoomSvr_proc_CloseLiveAndCourse_args__isset __isset;

  void __set_runuserid(const int32_t val);

  void __set_liveid(const int32_t val);

  void __set_status(const int32_t val);

  void __set_type(const int32_t val);

  bool operator == (const TRoomSvr_proc_CloseLiveAndCourse_args & rhs) const
  {
    if (!(runuserid == rhs.runuserid))
      return false;
    if (!(liveid == rhs.liveid))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_CloseLiveAndCourse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_CloseLiveAndCourse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_CloseLiveAndCourse_pargs {
 public:


  virtual ~TRoomSvr_proc_CloseLiveAndCourse_pargs() throw();
  const int32_t* runuserid;
  const int32_t* liveid;
  const int32_t* status;
  const int32_t* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_CloseLiveAndCourse_result__isset {
  _TRoomSvr_proc_CloseLiveAndCourse_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_CloseLiveAndCourse_result__isset;

class TRoomSvr_proc_CloseLiveAndCourse_result {
 public:

  TRoomSvr_proc_CloseLiveAndCourse_result(const TRoomSvr_proc_CloseLiveAndCourse_result&);
  TRoomSvr_proc_CloseLiveAndCourse_result& operator=(const TRoomSvr_proc_CloseLiveAndCourse_result&);
  TRoomSvr_proc_CloseLiveAndCourse_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_CloseLiveAndCourse_result() throw();
  int32_t success;

  _TRoomSvr_proc_CloseLiveAndCourse_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_CloseLiveAndCourse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_CloseLiveAndCourse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_CloseLiveAndCourse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_CloseLiveAndCourse_presult__isset {
  _TRoomSvr_proc_CloseLiveAndCourse_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_CloseLiveAndCourse_presult__isset;

class TRoomSvr_proc_CloseLiveAndCourse_presult {
 public:


  virtual ~TRoomSvr_proc_CloseLiveAndCourse_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_CloseLiveAndCourse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStart_args__isset {
  _TRoomSvr_proc_liveStart_args__isset() : streamId(false) {}
  bool streamId :1;
} _TRoomSvr_proc_liveStart_args__isset;

class TRoomSvr_proc_liveStart_args {
 public:

  TRoomSvr_proc_liveStart_args(const TRoomSvr_proc_liveStart_args&);
  TRoomSvr_proc_liveStart_args& operator=(const TRoomSvr_proc_liveStart_args&);
  TRoomSvr_proc_liveStart_args() : streamId() {
  }

  virtual ~TRoomSvr_proc_liveStart_args() throw();
  std::string streamId;

  _TRoomSvr_proc_liveStart_args__isset __isset;

  void __set_streamId(const std::string& val);

  bool operator == (const TRoomSvr_proc_liveStart_args & rhs) const
  {
    if (!(streamId == rhs.streamId))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_liveStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_liveStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_liveStart_pargs {
 public:


  virtual ~TRoomSvr_proc_liveStart_pargs() throw();
  const std::string* streamId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStart_result__isset {
  _TRoomSvr_proc_liveStart_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_liveStart_result__isset;

class TRoomSvr_proc_liveStart_result {
 public:

  TRoomSvr_proc_liveStart_result(const TRoomSvr_proc_liveStart_result&);
  TRoomSvr_proc_liveStart_result& operator=(const TRoomSvr_proc_liveStart_result&);
  TRoomSvr_proc_liveStart_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_liveStart_result() throw();
  int32_t success;

  _TRoomSvr_proc_liveStart_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_liveStart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_liveStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_liveStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStart_presult__isset {
  _TRoomSvr_proc_liveStart_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_liveStart_presult__isset;

class TRoomSvr_proc_liveStart_presult {
 public:


  virtual ~TRoomSvr_proc_liveStart_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_liveStart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStop_args__isset {
  _TRoomSvr_proc_liveStop_args__isset() : streamId(false) {}
  bool streamId :1;
} _TRoomSvr_proc_liveStop_args__isset;

class TRoomSvr_proc_liveStop_args {
 public:

  TRoomSvr_proc_liveStop_args(const TRoomSvr_proc_liveStop_args&);
  TRoomSvr_proc_liveStop_args& operator=(const TRoomSvr_proc_liveStop_args&);
  TRoomSvr_proc_liveStop_args() : streamId() {
  }

  virtual ~TRoomSvr_proc_liveStop_args() throw();
  std::string streamId;

  _TRoomSvr_proc_liveStop_args__isset __isset;

  void __set_streamId(const std::string& val);

  bool operator == (const TRoomSvr_proc_liveStop_args & rhs) const
  {
    if (!(streamId == rhs.streamId))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_liveStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_liveStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_liveStop_pargs {
 public:


  virtual ~TRoomSvr_proc_liveStop_pargs() throw();
  const std::string* streamId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStop_result__isset {
  _TRoomSvr_proc_liveStop_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_liveStop_result__isset;

class TRoomSvr_proc_liveStop_result {
 public:

  TRoomSvr_proc_liveStop_result(const TRoomSvr_proc_liveStop_result&);
  TRoomSvr_proc_liveStop_result& operator=(const TRoomSvr_proc_liveStop_result&);
  TRoomSvr_proc_liveStop_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_liveStop_result() throw();
  int32_t success;

  _TRoomSvr_proc_liveStop_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_liveStop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_liveStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_liveStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_liveStop_presult__isset {
  _TRoomSvr_proc_liveStop_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_liveStop_presult__isset;

class TRoomSvr_proc_liveStop_presult {
 public:


  virtual ~TRoomSvr_proc_liveStop_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_liveStop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewSubCourseNotice_args__isset {
  _TRoomSvr_proc_sendNewSubCourseNotice_args__isset() : courseId(false), subCourseId(false), userId(false), courseName(false), subCourseName(false), beginTime(false) {}
  bool courseId :1;
  bool subCourseId :1;
  bool userId :1;
  bool courseName :1;
  bool subCourseName :1;
  bool beginTime :1;
} _TRoomSvr_proc_sendNewSubCourseNotice_args__isset;

class TRoomSvr_proc_sendNewSubCourseNotice_args {
 public:

  TRoomSvr_proc_sendNewSubCourseNotice_args(const TRoomSvr_proc_sendNewSubCourseNotice_args&);
  TRoomSvr_proc_sendNewSubCourseNotice_args& operator=(const TRoomSvr_proc_sendNewSubCourseNotice_args&);
  TRoomSvr_proc_sendNewSubCourseNotice_args() : courseId(0), subCourseId(0), userId(0), courseName(), subCourseName(), beginTime() {
  }

  virtual ~TRoomSvr_proc_sendNewSubCourseNotice_args() throw();
  int32_t courseId;
  int32_t subCourseId;
  int32_t userId;
  std::string courseName;
  std::string subCourseName;
  std::string beginTime;

  _TRoomSvr_proc_sendNewSubCourseNotice_args__isset __isset;

  void __set_courseId(const int32_t val);

  void __set_subCourseId(const int32_t val);

  void __set_userId(const int32_t val);

  void __set_courseName(const std::string& val);

  void __set_subCourseName(const std::string& val);

  void __set_beginTime(const std::string& val);

  bool operator == (const TRoomSvr_proc_sendNewSubCourseNotice_args & rhs) const
  {
    if (!(courseId == rhs.courseId))
      return false;
    if (!(subCourseId == rhs.subCourseId))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(courseName == rhs.courseName))
      return false;
    if (!(subCourseName == rhs.subCourseName))
      return false;
    if (!(beginTime == rhs.beginTime))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_sendNewSubCourseNotice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_sendNewSubCourseNotice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_sendNewSubCourseNotice_pargs {
 public:


  virtual ~TRoomSvr_proc_sendNewSubCourseNotice_pargs() throw();
  const int32_t* courseId;
  const int32_t* subCourseId;
  const int32_t* userId;
  const std::string* courseName;
  const std::string* subCourseName;
  const std::string* beginTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewSubCourseNotice_result__isset {
  _TRoomSvr_proc_sendNewSubCourseNotice_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_sendNewSubCourseNotice_result__isset;

class TRoomSvr_proc_sendNewSubCourseNotice_result {
 public:

  TRoomSvr_proc_sendNewSubCourseNotice_result(const TRoomSvr_proc_sendNewSubCourseNotice_result&);
  TRoomSvr_proc_sendNewSubCourseNotice_result& operator=(const TRoomSvr_proc_sendNewSubCourseNotice_result&);
  TRoomSvr_proc_sendNewSubCourseNotice_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_sendNewSubCourseNotice_result() throw();
  int32_t success;

  _TRoomSvr_proc_sendNewSubCourseNotice_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_sendNewSubCourseNotice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_sendNewSubCourseNotice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_sendNewSubCourseNotice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewSubCourseNotice_presult__isset {
  _TRoomSvr_proc_sendNewSubCourseNotice_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_sendNewSubCourseNotice_presult__isset;

class TRoomSvr_proc_sendNewSubCourseNotice_presult {
 public:


  virtual ~TRoomSvr_proc_sendNewSubCourseNotice_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_sendNewSubCourseNotice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewCourseNotice_args__isset {
  _TRoomSvr_proc_sendNewCourseNotice_args__isset() : courseId(false), isSubCourse(false) {}
  bool courseId :1;
  bool isSubCourse :1;
} _TRoomSvr_proc_sendNewCourseNotice_args__isset;

class TRoomSvr_proc_sendNewCourseNotice_args {
 public:

  TRoomSvr_proc_sendNewCourseNotice_args(const TRoomSvr_proc_sendNewCourseNotice_args&);
  TRoomSvr_proc_sendNewCourseNotice_args& operator=(const TRoomSvr_proc_sendNewCourseNotice_args&);
  TRoomSvr_proc_sendNewCourseNotice_args() : courseId(0), isSubCourse(0) {
  }

  virtual ~TRoomSvr_proc_sendNewCourseNotice_args() throw();
  int32_t courseId;
  bool isSubCourse;

  _TRoomSvr_proc_sendNewCourseNotice_args__isset __isset;

  void __set_courseId(const int32_t val);

  void __set_isSubCourse(const bool val);

  bool operator == (const TRoomSvr_proc_sendNewCourseNotice_args & rhs) const
  {
    if (!(courseId == rhs.courseId))
      return false;
    if (!(isSubCourse == rhs.isSubCourse))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_sendNewCourseNotice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_sendNewCourseNotice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRoomSvr_proc_sendNewCourseNotice_pargs {
 public:


  virtual ~TRoomSvr_proc_sendNewCourseNotice_pargs() throw();
  const int32_t* courseId;
  const bool* isSubCourse;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewCourseNotice_result__isset {
  _TRoomSvr_proc_sendNewCourseNotice_result__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_sendNewCourseNotice_result__isset;

class TRoomSvr_proc_sendNewCourseNotice_result {
 public:

  TRoomSvr_proc_sendNewCourseNotice_result(const TRoomSvr_proc_sendNewCourseNotice_result&);
  TRoomSvr_proc_sendNewCourseNotice_result& operator=(const TRoomSvr_proc_sendNewCourseNotice_result&);
  TRoomSvr_proc_sendNewCourseNotice_result() : success(0) {
  }

  virtual ~TRoomSvr_proc_sendNewCourseNotice_result() throw();
  int32_t success;

  _TRoomSvr_proc_sendNewCourseNotice_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TRoomSvr_proc_sendNewCourseNotice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRoomSvr_proc_sendNewCourseNotice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRoomSvr_proc_sendNewCourseNotice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRoomSvr_proc_sendNewCourseNotice_presult__isset {
  _TRoomSvr_proc_sendNewCourseNotice_presult__isset() : success(false) {}
  bool success :1;
} _TRoomSvr_proc_sendNewCourseNotice_presult__isset;

class TRoomSvr_proc_sendNewCourseNotice_presult {
 public:


  virtual ~TRoomSvr_proc_sendNewCourseNotice_presult() throw();
  int32_t* success;

  _TRoomSvr_proc_sendNewCourseNotice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TRoomSvrClient : virtual public TRoomSvrIf {
 public:
  TRoomSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TRoomSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_joingroup(const  ::TJoinGroup& oReq);
  void send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup();
  int32_t proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  void send_proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  int32_t recv_proc_blockUserInGroup();
  bool proc_setGroupOwner(const int32_t groupid, const int32_t ownerid);
  void send_proc_setGroupOwner(const int32_t groupid, const int32_t ownerid);
  bool recv_proc_setGroupOwner();
  bool proc_loadGroup(const int32_t groupid, const std::string& host);
  void send_proc_loadGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_loadGroup();
  bool proc_modGroup(const int32_t groupid, const std::string& host);
  void send_proc_modGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_modGroup();
  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  void send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings();
  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  void send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch();
  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  void send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode();
  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  void send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers();
  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  void send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch();
  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch();
  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  void send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole();
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid);
  void send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return);
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid);
  void send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  int32_t proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  void send_proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  int32_t recv_proc_give_tip();
  int32_t proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  void send_proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_link();
  int32_t proc_send_notice(const std::string& notice);
  void send_proc_send_notice(const std::string& notice);
  int32_t recv_proc_send_notice();
  int32_t proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  void send_proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_course();
  int32_t proc_reloadUserInfo(const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
  int32_t proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers);
  void send_proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers);
  int32_t recv_proc_reloadRoomVirtualNumInfo();
  int32_t proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  void send_proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  int32_t recv_proc_CloseLiveAndCourse();
  int32_t proc_liveStart(const std::string& streamId);
  void send_proc_liveStart(const std::string& streamId);
  int32_t recv_proc_liveStart();
  int32_t proc_liveStop(const std::string& streamId);
  void send_proc_liveStop(const std::string& streamId);
  int32_t recv_proc_liveStop();
  int32_t proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  void send_proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  int32_t recv_proc_sendNewSubCourseNotice();
  int32_t proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse);
  void send_proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse);
  int32_t recv_proc_sendNewCourseNotice();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TRoomSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TRoomSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TRoomSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_joingroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_blockUserInGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_setGroupOwner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_loadGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVisitSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modJoinGroupMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_kickAllOnlookers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVoiceChatSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modVideoAuthSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupUserRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_getGroupVisitorLst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_queryInGroupList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_give_tip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_send_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_send_notice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_send_course(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_reloadUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_reloadRoomVirtualNumInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_CloseLiveAndCourse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_liveStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_liveStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_sendNewSubCourseNotice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_sendNewCourseNotice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TRoomSvrProcessor(boost::shared_ptr<TRoomSvrIf> iface) :
    iface_(iface) {
    processMap_["proc_joingroup"] = &TRoomSvrProcessor::process_proc_joingroup;
    processMap_["proc_blockUserInGroup"] = &TRoomSvrProcessor::process_proc_blockUserInGroup;
    processMap_["proc_setGroupOwner"] = &TRoomSvrProcessor::process_proc_setGroupOwner;
    processMap_["proc_loadGroup"] = &TRoomSvrProcessor::process_proc_loadGroup;
    processMap_["proc_modGroup"] = &TRoomSvrProcessor::process_proc_modGroup;
    processMap_["proc_modGroupSettings"] = &TRoomSvrProcessor::process_proc_modGroupSettings;
    processMap_["proc_modVisitSwitch"] = &TRoomSvrProcessor::process_proc_modVisitSwitch;
    processMap_["proc_modJoinGroupMode"] = &TRoomSvrProcessor::process_proc_modJoinGroupMode;
    processMap_["proc_kickAllOnlookers"] = &TRoomSvrProcessor::process_proc_kickAllOnlookers;
    processMap_["proc_modVoiceChatSwitch"] = &TRoomSvrProcessor::process_proc_modVoiceChatSwitch;
    processMap_["proc_modVideoAuthSwitch"] = &TRoomSvrProcessor::process_proc_modVideoAuthSwitch;
    processMap_["proc_modGroupUserRole"] = &TRoomSvrProcessor::process_proc_modGroupUserRole;
    processMap_["proc_getGroupVisitorLst"] = &TRoomSvrProcessor::process_proc_getGroupVisitorLst;
    processMap_["proc_queryInGroupList"] = &TRoomSvrProcessor::process_proc_queryInGroupList;
    processMap_["proc_give_tip"] = &TRoomSvrProcessor::process_proc_give_tip;
    processMap_["proc_send_link"] = &TRoomSvrProcessor::process_proc_send_link;
    processMap_["proc_send_notice"] = &TRoomSvrProcessor::process_proc_send_notice;
    processMap_["proc_send_course"] = &TRoomSvrProcessor::process_proc_send_course;
    processMap_["proc_reloadUserInfo"] = &TRoomSvrProcessor::process_proc_reloadUserInfo;
    processMap_["proc_reloadRoomVirtualNumInfo"] = &TRoomSvrProcessor::process_proc_reloadRoomVirtualNumInfo;
    processMap_["proc_CloseLiveAndCourse"] = &TRoomSvrProcessor::process_proc_CloseLiveAndCourse;
    processMap_["proc_liveStart"] = &TRoomSvrProcessor::process_proc_liveStart;
    processMap_["proc_liveStop"] = &TRoomSvrProcessor::process_proc_liveStop;
    processMap_["proc_sendNewSubCourseNotice"] = &TRoomSvrProcessor::process_proc_sendNewSubCourseNotice;
    processMap_["proc_sendNewCourseNotice"] = &TRoomSvrProcessor::process_proc_sendNewCourseNotice;
  }

  virtual ~TRoomSvrProcessor() {}
};

class TRoomSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TRoomSvrProcessorFactory(const ::boost::shared_ptr< TRoomSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TRoomSvrIfFactory > handlerFactory_;
};

class TRoomSvrMultiface : virtual public TRoomSvrIf {
 public:
  TRoomSvrMultiface(std::vector<boost::shared_ptr<TRoomSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TRoomSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TRoomSvrIf> > ifaces_;
  TRoomSvrMultiface() {}
  void add(boost::shared_ptr<TRoomSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t proc_joingroup(const  ::TJoinGroup& oReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_joingroup(oReq);
    }
    return ifaces_[i]->proc_joingroup(oReq);
  }

  int32_t proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_blockUserInGroup(runid, userid, groupid, reasonid, kickout_min);
    }
    return ifaces_[i]->proc_blockUserInGroup(runid, userid, groupid, reasonid, kickout_min);
  }

  bool proc_setGroupOwner(const int32_t groupid, const int32_t ownerid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_setGroupOwner(groupid, ownerid);
    }
    return ifaces_[i]->proc_setGroupOwner(groupid, ownerid);
  }

  bool proc_loadGroup(const int32_t groupid, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_loadGroup(groupid, host);
    }
    return ifaces_[i]->proc_loadGroup(groupid, host);
  }

  bool proc_modGroup(const int32_t groupid, const std::string& host) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroup(groupid, host);
    }
    return ifaces_[i]->proc_modGroup(groupid, host);
  }

  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupSettings(runid, groupid, mSetting);
    }
    return ifaces_[i]->proc_modGroupSettings(runid, groupid, mSetting);
  }

  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
    }
    return ifaces_[i]->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
  }

  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
    }
    return ifaces_[i]->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
  }

  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_kickAllOnlookers(runid, groupid);
    }
    return ifaces_[i]->proc_kickAllOnlookers(runid, groupid);
  }

  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
    }
    return ifaces_[i]->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
  }

  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modVideoAuthSwitch(runid, groupid, Switch);
    }
    return ifaces_[i]->proc_modVideoAuthSwitch(runid, groupid, Switch);
  }

  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupUserRole(runid, groupid, userid, roleType);
    }
    return ifaces_[i]->proc_modGroupUserRole(runid, groupid, userid, roleType);
  }

  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_getGroupVisitorLst(_return, groupid);
    }
    ifaces_[i]->proc_getGroupVisitorLst(_return, groupid);
    return;
  }

  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_queryInGroupList(_return, userid, groupid);
    }
    ifaces_[i]->proc_queryInGroupList(_return, userid, groupid);
    return;
  }

  int32_t proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_give_tip(srcid, toid, groupid, gifname, tiptype, srcname, toname, gifpicture);
    }
    return ifaces_[i]->proc_give_tip(srcid, toid, groupid, gifname, tiptype, srcname, toname, gifpicture);
  }

  int32_t proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_send_link(groupid, title, source, summary, bTip, amount, pointId, head_add, recommendid, user_id);
    }
    return ifaces_[i]->proc_send_link(groupid, title, source, summary, bTip, amount, pointId, head_add, recommendid, user_id);
  }

  int32_t proc_send_notice(const std::string& notice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_send_notice(notice);
    }
    return ifaces_[i]->proc_send_notice(notice);
  }

  int32_t proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_send_course(groupid, title, source, summary, bTip, amount, courseId, head_add, teachername, srcimg, recommendid, user_id);
    }
    return ifaces_[i]->proc_send_course(groupid, title, source, summary, bTip, amount, courseId, head_add, teachername, srcimg, recommendid, user_id);
  }

  int32_t proc_reloadUserInfo(const int32_t userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_reloadUserInfo(userid);
    }
    return ifaces_[i]->proc_reloadUserInfo(userid);
  }

  int32_t proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_reloadRoomVirtualNumInfo(liveid, numbers);
    }
    return ifaces_[i]->proc_reloadRoomVirtualNumInfo(liveid, numbers);
  }

  int32_t proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_CloseLiveAndCourse(runuserid, liveid, status, type);
    }
    return ifaces_[i]->proc_CloseLiveAndCourse(runuserid, liveid, status, type);
  }

  int32_t proc_liveStart(const std::string& streamId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_liveStart(streamId);
    }
    return ifaces_[i]->proc_liveStart(streamId);
  }

  int32_t proc_liveStop(const std::string& streamId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_liveStop(streamId);
    }
    return ifaces_[i]->proc_liveStop(streamId);
  }

  int32_t proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_sendNewSubCourseNotice(courseId, subCourseId, userId, courseName, subCourseName, beginTime);
    }
    return ifaces_[i]->proc_sendNewSubCourseNotice(courseId, subCourseId, userId, courseName, subCourseName, beginTime);
  }

  int32_t proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_sendNewCourseNotice(courseId, isSubCourse);
    }
    return ifaces_[i]->proc_sendNewCourseNotice(courseId, isSubCourse);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TRoomSvrConcurrentClient : virtual public TRoomSvrIf {
 public:
  TRoomSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TRoomSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup(const int32_t seqid);
  int32_t proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  int32_t send_proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  int32_t recv_proc_blockUserInGroup(const int32_t seqid);
  bool proc_setGroupOwner(const int32_t groupid, const int32_t ownerid);
  int32_t send_proc_setGroupOwner(const int32_t groupid, const int32_t ownerid);
  bool recv_proc_setGroupOwner(const int32_t seqid);
  bool proc_loadGroup(const int32_t groupid, const std::string& host);
  int32_t send_proc_loadGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_loadGroup(const int32_t seqid);
  bool proc_modGroup(const int32_t groupid, const std::string& host);
  int32_t send_proc_modGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_modGroup(const int32_t seqid);
  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings(const int32_t seqid);
  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch(const int32_t seqid);
  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode(const int32_t seqid);
  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers(const int32_t seqid);
  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch(const int32_t seqid);
  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch(const int32_t seqid);
  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole(const int32_t seqid);
  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid);
  int32_t send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t seqid);
  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid);
  int32_t send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t seqid);
  int32_t proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  int32_t send_proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  int32_t recv_proc_give_tip(const int32_t seqid);
  int32_t proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  int32_t send_proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_link(const int32_t seqid);
  int32_t proc_send_notice(const std::string& notice);
  int32_t send_proc_send_notice(const std::string& notice);
  int32_t recv_proc_send_notice(const int32_t seqid);
  int32_t proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  int32_t send_proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_course(const int32_t seqid);
  int32_t proc_reloadUserInfo(const int32_t userid);
  int32_t send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo(const int32_t seqid);
  int32_t proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers);
  int32_t send_proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers);
  int32_t recv_proc_reloadRoomVirtualNumInfo(const int32_t seqid);
  int32_t proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  int32_t send_proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  int32_t recv_proc_CloseLiveAndCourse(const int32_t seqid);
  int32_t proc_liveStart(const std::string& streamId);
  int32_t send_proc_liveStart(const std::string& streamId);
  int32_t recv_proc_liveStart(const int32_t seqid);
  int32_t proc_liveStop(const std::string& streamId);
  int32_t send_proc_liveStop(const std::string& streamId);
  int32_t recv_proc_liveStop(const int32_t seqid);
  int32_t proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  int32_t send_proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  int32_t recv_proc_sendNewSubCourseNotice(const int32_t seqid);
  int32_t proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse);
  int32_t send_proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse);
  int32_t recv_proc_sendNewCourseNotice(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TRoomSvrCobClient;

class TRoomSvrCobClIf {
 public:
  virtual ~TRoomSvrCobClIf() {}
  virtual void proc_joingroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const  ::TJoinGroup& oReq) = 0;
  virtual void proc_blockUserInGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) = 0;
  virtual void proc_setGroupOwner(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const int32_t ownerid) = 0;
  virtual void proc_loadGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroupSettings(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual void proc_modVisitSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual void proc_modJoinGroupMode(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual void proc_kickAllOnlookers(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid) = 0;
  virtual void proc_modVoiceChatSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual void proc_modVideoAuthSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupUserRole(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual void proc_getGroupVisitorLst(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid) = 0;
  virtual void proc_queryInGroupList(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t userid, const int32_t groupid) = 0;
  virtual void proc_give_tip(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) = 0;
  virtual void proc_send_link(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) = 0;
  virtual void proc_send_notice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& notice) = 0;
  virtual void proc_send_course(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) = 0;
  virtual void proc_reloadUserInfo(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t userid) = 0;
  virtual void proc_reloadRoomVirtualNumInfo(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t liveid, const int32_t numbers) = 0;
  virtual void proc_CloseLiveAndCourse(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) = 0;
  virtual void proc_liveStart(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& streamId) = 0;
  virtual void proc_liveStop(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& streamId) = 0;
  virtual void proc_sendNewSubCourseNotice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) = 0;
  virtual void proc_sendNewCourseNotice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t courseId, const bool isSubCourse) = 0;
};

class TRoomSvrCobSvIf {
 public:
  virtual ~TRoomSvrCobSvIf() {}
  virtual void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& oReq) = 0;
  virtual void proc_blockUserInGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) = 0;
  virtual void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const int32_t ownerid) = 0;
  virtual void proc_loadGroup(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroup(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const std::string& host) = 0;
  virtual void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) = 0;
  virtual void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) = 0;
  virtual void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) = 0;
  virtual void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid) = 0;
  virtual void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) = 0;
  virtual void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) = 0;
  virtual void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t groupid) = 0;
  virtual void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t userid, const int32_t groupid) = 0;
  virtual void proc_give_tip(tcxx::function<void(int32_t const& _return)> cob, const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) = 0;
  virtual void proc_send_link(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) = 0;
  virtual void proc_send_notice(tcxx::function<void(int32_t const& _return)> cob, const std::string& notice) = 0;
  virtual void proc_send_course(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) = 0;
  virtual void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid) = 0;
  virtual void proc_reloadRoomVirtualNumInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t liveid, const int32_t numbers) = 0;
  virtual void proc_CloseLiveAndCourse(tcxx::function<void(int32_t const& _return)> cob, const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) = 0;
  virtual void proc_liveStart(tcxx::function<void(int32_t const& _return)> cob, const std::string& streamId) = 0;
  virtual void proc_liveStop(tcxx::function<void(int32_t const& _return)> cob, const std::string& streamId) = 0;
  virtual void proc_sendNewSubCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) = 0;
  virtual void proc_sendNewCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t courseId, const bool isSubCourse) = 0;
};

class TRoomSvrCobSvIfFactory {
 public:
  typedef TRoomSvrCobSvIf Handler;

  virtual ~TRoomSvrCobSvIfFactory() {}

  virtual TRoomSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TRoomSvrCobSvIf* /* handler */) = 0;
};

class TRoomSvrCobSvIfSingletonFactory : virtual public TRoomSvrCobSvIfFactory {
 public:
  TRoomSvrCobSvIfSingletonFactory(const boost::shared_ptr<TRoomSvrCobSvIf>& iface) : iface_(iface) {}
  virtual ~TRoomSvrCobSvIfSingletonFactory() {}

  virtual TRoomSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TRoomSvrCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TRoomSvrCobSvIf> iface_;
};

class TRoomSvrCobSvNull : virtual public TRoomSvrCobSvIf {
 public:
  virtual ~TRoomSvrCobSvNull() {}
  void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& /* oReq */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_blockUserInGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* userid */, const int32_t /* groupid */, const int32_t /* reasonid */, const int32_t /* kickout_min */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t /* groupid */, const int32_t /* ownerid */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_loadGroup(tcxx::function<void(bool const& _return)> cob, const int32_t /* groupid */, const std::string& /* host */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_modGroup(tcxx::function<void(bool const& _return)> cob, const int32_t /* groupid */, const std::string& /* host */) {
    bool _return = false;
    return cob(_return);
  }
  void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & /* mSetting */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* kickOnlooker */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const  ::TJoinGroupCondition& /* maleCondition */, const  ::TJoinGroupCondition& /* femaleCondition */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const bool /* visitOnMic */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int32_t /* roleType */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t /* groupid */) {
    std::vector< ::TUserGroupInfo>  _return;
    return cob(_return);
  }
  void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t /* userid */, const int32_t /* groupid */) {
    std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  _return;
    return cob(_return);
  }
  void proc_give_tip(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* srcid */, const int32_t /* toid */, const int32_t /* groupid */, const std::string& /* gifname */, const int32_t /* tiptype */, const std::string& /* srcname */, const std::string& /* toname */, const std::string& /* gifpicture */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_send_link(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* groupid */, const std::string& /* title */, const std::string& /* source */, const std::string& /* summary */, const int32_t /* bTip */, const int32_t /* amount */, const int32_t /* pointId */, const std::string& /* head_add */, const int32_t /* recommendid */, const int32_t /* user_id */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_send_notice(tcxx::function<void(int32_t const& _return)> cob, const std::string& /* notice */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_send_course(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* groupid */, const std::string& /* title */, const std::string& /* source */, const std::string& /* summary */, const int32_t /* bTip */, const int32_t /* amount */, const int32_t /* courseId */, const std::string& /* head_add */, const std::string& /* teachername */, const std::string& /* srcimg */, const int32_t /* recommendid */, const int32_t /* user_id */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* userid */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_reloadRoomVirtualNumInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* liveid */, const int32_t /* numbers */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_CloseLiveAndCourse(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runuserid */, const int32_t /* liveid */, const int32_t /* status */, const int32_t /* type */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_liveStart(tcxx::function<void(int32_t const& _return)> cob, const std::string& /* streamId */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_liveStop(tcxx::function<void(int32_t const& _return)> cob, const std::string& /* streamId */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_sendNewSubCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* courseId */, const int32_t /* subCourseId */, const int32_t /* userId */, const std::string& /* courseName */, const std::string& /* subCourseName */, const std::string& /* beginTime */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_sendNewCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* courseId */, const bool /* isSubCourse */) {
    int32_t _return = 0;
    return cob(_return);
  }
};

class TRoomSvrCobClient : virtual public TRoomSvrCobClIf {
 public:
  TRoomSvrCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void proc_joingroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const  ::TJoinGroup& oReq);
  void send_proc_joingroup(const  ::TJoinGroup& oReq);
  int32_t recv_proc_joingroup();
  void proc_blockUserInGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  void send_proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min);
  int32_t recv_proc_blockUserInGroup();
  void proc_setGroupOwner(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const int32_t ownerid);
  void send_proc_setGroupOwner(const int32_t groupid, const int32_t ownerid);
  bool recv_proc_setGroupOwner();
  void proc_loadGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& host);
  void send_proc_loadGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_loadGroup();
  void proc_modGroup(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& host);
  void send_proc_modGroup(const int32_t groupid, const std::string& host);
  bool recv_proc_modGroup();
  void proc_modGroupSettings(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  void send_proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting);
  int32_t recv_proc_modGroupSettings();
  void proc_modVisitSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  void send_proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker);
  int32_t recv_proc_modVisitSwitch();
  void proc_modJoinGroupMode(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  void send_proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition);
  int32_t recv_proc_modJoinGroupMode();
  void proc_kickAllOnlookers(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid);
  void send_proc_kickAllOnlookers(const int32_t runid, const int32_t groupid);
  int32_t recv_proc_kickAllOnlookers();
  void proc_modVoiceChatSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  void send_proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic);
  int32_t recv_proc_modVoiceChatSwitch();
  void proc_modVideoAuthSwitch(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modVideoAuthSwitch();
  void proc_modGroupUserRole(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  void send_proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType);
  int32_t recv_proc_modGroupUserRole();
  void proc_getGroupVisitorLst(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid);
  void send_proc_getGroupVisitorLst(const int32_t groupid);
  void recv_proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return);
  void proc_queryInGroupList(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t userid, const int32_t groupid);
  void send_proc_queryInGroupList(const int32_t userid, const int32_t groupid);
  void recv_proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  void proc_give_tip(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  void send_proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture);
  int32_t recv_proc_give_tip();
  void proc_send_link(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  void send_proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_link();
  void proc_send_notice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& notice);
  void send_proc_send_notice(const std::string& notice);
  int32_t recv_proc_send_notice();
  void proc_send_course(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  void send_proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id);
  int32_t recv_proc_send_course();
  void proc_reloadUserInfo(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t userid);
  void send_proc_reloadUserInfo(const int32_t userid);
  int32_t recv_proc_reloadUserInfo();
  void proc_reloadRoomVirtualNumInfo(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t liveid, const int32_t numbers);
  void send_proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers);
  int32_t recv_proc_reloadRoomVirtualNumInfo();
  void proc_CloseLiveAndCourse(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  void send_proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type);
  int32_t recv_proc_CloseLiveAndCourse();
  void proc_liveStart(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& streamId);
  void send_proc_liveStart(const std::string& streamId);
  int32_t recv_proc_liveStart();
  void proc_liveStop(tcxx::function<void(TRoomSvrCobClient* client)> cob, const std::string& streamId);
  void send_proc_liveStop(const std::string& streamId);
  int32_t recv_proc_liveStop();
  void proc_sendNewSubCourseNotice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  void send_proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime);
  int32_t recv_proc_sendNewSubCourseNotice();
  void proc_sendNewCourseNotice(tcxx::function<void(TRoomSvrCobClient* client)> cob, const int32_t courseId, const bool isSubCourse);
  void send_proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse);
  int32_t recv_proc_sendNewCourseNotice();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TRoomSvrAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TRoomSvrCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TRoomSvrAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_joingroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_blockUserInGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_blockUserInGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_blockUserInGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_setGroupOwner(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_loadGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_proc_modGroup(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupSettings(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVisitSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modJoinGroupMode(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_kickAllOnlookers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVoiceChatSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modVideoAuthSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupUserRole(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector< ::TUserGroupInfo> & _return);
  void throw_proc_getGroupVisitorLst(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return);
  void throw_proc_queryInGroupList(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_give_tip(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_give_tip(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_give_tip(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_send_link(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_send_link(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_send_link(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_send_notice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_send_notice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_send_notice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_send_course(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_send_course(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_send_course(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_reloadUserInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_reloadRoomVirtualNumInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_reloadRoomVirtualNumInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_reloadRoomVirtualNumInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_CloseLiveAndCourse(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_CloseLiveAndCourse(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_CloseLiveAndCourse(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_liveStart(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_liveStart(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_liveStart(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_liveStop(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_liveStop(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_liveStop(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_sendNewSubCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_sendNewSubCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_sendNewSubCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_sendNewCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_sendNewCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_sendNewCourseNotice(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TRoomSvrAsyncProcessor(boost::shared_ptr<TRoomSvrCobSvIf> iface) :
    iface_(iface) {
    processMap_["proc_joingroup"] = &TRoomSvrAsyncProcessor::process_proc_joingroup;
    processMap_["proc_blockUserInGroup"] = &TRoomSvrAsyncProcessor::process_proc_blockUserInGroup;
    processMap_["proc_setGroupOwner"] = &TRoomSvrAsyncProcessor::process_proc_setGroupOwner;
    processMap_["proc_loadGroup"] = &TRoomSvrAsyncProcessor::process_proc_loadGroup;
    processMap_["proc_modGroup"] = &TRoomSvrAsyncProcessor::process_proc_modGroup;
    processMap_["proc_modGroupSettings"] = &TRoomSvrAsyncProcessor::process_proc_modGroupSettings;
    processMap_["proc_modVisitSwitch"] = &TRoomSvrAsyncProcessor::process_proc_modVisitSwitch;
    processMap_["proc_modJoinGroupMode"] = &TRoomSvrAsyncProcessor::process_proc_modJoinGroupMode;
    processMap_["proc_kickAllOnlookers"] = &TRoomSvrAsyncProcessor::process_proc_kickAllOnlookers;
    processMap_["proc_modVoiceChatSwitch"] = &TRoomSvrAsyncProcessor::process_proc_modVoiceChatSwitch;
    processMap_["proc_modVideoAuthSwitch"] = &TRoomSvrAsyncProcessor::process_proc_modVideoAuthSwitch;
    processMap_["proc_modGroupUserRole"] = &TRoomSvrAsyncProcessor::process_proc_modGroupUserRole;
    processMap_["proc_getGroupVisitorLst"] = &TRoomSvrAsyncProcessor::process_proc_getGroupVisitorLst;
    processMap_["proc_queryInGroupList"] = &TRoomSvrAsyncProcessor::process_proc_queryInGroupList;
    processMap_["proc_give_tip"] = &TRoomSvrAsyncProcessor::process_proc_give_tip;
    processMap_["proc_send_link"] = &TRoomSvrAsyncProcessor::process_proc_send_link;
    processMap_["proc_send_notice"] = &TRoomSvrAsyncProcessor::process_proc_send_notice;
    processMap_["proc_send_course"] = &TRoomSvrAsyncProcessor::process_proc_send_course;
    processMap_["proc_reloadUserInfo"] = &TRoomSvrAsyncProcessor::process_proc_reloadUserInfo;
    processMap_["proc_reloadRoomVirtualNumInfo"] = &TRoomSvrAsyncProcessor::process_proc_reloadRoomVirtualNumInfo;
    processMap_["proc_CloseLiveAndCourse"] = &TRoomSvrAsyncProcessor::process_proc_CloseLiveAndCourse;
    processMap_["proc_liveStart"] = &TRoomSvrAsyncProcessor::process_proc_liveStart;
    processMap_["proc_liveStop"] = &TRoomSvrAsyncProcessor::process_proc_liveStop;
    processMap_["proc_sendNewSubCourseNotice"] = &TRoomSvrAsyncProcessor::process_proc_sendNewSubCourseNotice;
    processMap_["proc_sendNewCourseNotice"] = &TRoomSvrAsyncProcessor::process_proc_sendNewCourseNotice;
  }

  virtual ~TRoomSvrAsyncProcessor() {}
};

class TRoomSvrAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TRoomSvrAsyncProcessorFactory(const ::boost::shared_ptr< TRoomSvrCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TRoomSvrCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
