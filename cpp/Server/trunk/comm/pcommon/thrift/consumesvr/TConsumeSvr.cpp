/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TConsumeSvr.h"
#include "thrift/async/TAsyncChannel.h"




TConsumeSvr_proc_modContributionListSwitch_args::~TConsumeSvr_proc_modContributionListSwitch_args() throw() {
}


uint32_t TConsumeSvr_proc_modContributionListSwitch_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runid);
          this->__isset.runid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          this->__isset.groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Switch);
          this->__isset.Switch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modContributionListSwitch_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modContributionListSwitch_args");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->runid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Switch", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->Switch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modContributionListSwitch_pargs::~TConsumeSvr_proc_modContributionListSwitch_pargs() throw() {
}


uint32_t TConsumeSvr_proc_modContributionListSwitch_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modContributionListSwitch_pargs");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->runid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->groupid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Switch", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->Switch)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modContributionListSwitch_result::~TConsumeSvr_proc_modContributionListSwitch_result() throw() {
}


uint32_t TConsumeSvr_proc_modContributionListSwitch_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modContributionListSwitch_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modContributionListSwitch_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modContributionListSwitch_presult::~TConsumeSvr_proc_modContributionListSwitch_presult() throw() {
}


uint32_t TConsumeSvr_proc_modContributionListSwitch_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modContributionListSwitch_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modContributionListSwitch_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
  xfer += oprot->writeI32((*(this->success)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupGainSetting_args::~TConsumeSvr_proc_modGroupGainSetting_args() throw() {
}


uint32_t TConsumeSvr_proc_modGroupGainSetting_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runid);
          this->__isset.runid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          this->__isset.groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->Switch);
          this->__isset.Switch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->rangeType);
          this->__isset.rangeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->percent);
          this->__isset.percent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupGainSetting_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupGainSetting_args");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->runid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Switch", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->Switch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rangeType", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->rangeType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("percent", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->percent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupGainSetting_pargs::~TConsumeSvr_proc_modGroupGainSetting_pargs() throw() {
}


uint32_t TConsumeSvr_proc_modGroupGainSetting_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupGainSetting_pargs");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->runid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->groupid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Switch", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->Switch)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rangeType", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->rangeType)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("percent", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte((*(this->percent)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupGainSetting_result::~TConsumeSvr_proc_modGroupGainSetting_result() throw() {
}


uint32_t TConsumeSvr_proc_modGroupGainSetting_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupGainSetting_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupGainSetting_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupGainSetting_presult::~TConsumeSvr_proc_modGroupGainSetting_presult() throw() {
}


uint32_t TConsumeSvr_proc_modGroupGainSetting_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupGainSetting_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupGainSetting_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
  xfer += oprot->writeI32((*(this->success)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupUserGainSetting_args::~TConsumeSvr_proc_modGroupUserGainSetting_args() throw() {
}


uint32_t TConsumeSvr_proc_modGroupUserGainSetting_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runid);
          this->__isset.runid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupid);
          this->__isset.groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->percent);
          this->__isset.percent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupUserGainSetting_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupUserGainSetting_args");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->runid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->groupid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("percent", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->percent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupUserGainSetting_pargs::~TConsumeSvr_proc_modGroupUserGainSetting_pargs() throw() {
}


uint32_t TConsumeSvr_proc_modGroupUserGainSetting_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupUserGainSetting_pargs");

  xfer += oprot->writeFieldBegin("runid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->runid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->groupid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->userid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("percent", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->percent)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupUserGainSetting_result::~TConsumeSvr_proc_modGroupUserGainSetting_result() throw() {
}


uint32_t TConsumeSvr_proc_modGroupUserGainSetting_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupUserGainSetting_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupUserGainSetting_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TConsumeSvr_proc_modGroupUserGainSetting_presult::~TConsumeSvr_proc_modGroupUserGainSetting_presult() throw() {
}


uint32_t TConsumeSvr_proc_modGroupUserGainSetting_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TConsumeSvr_proc_modGroupUserGainSetting_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TConsumeSvr_proc_modGroupUserGainSetting_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
  xfer += oprot->writeI32((*(this->success)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

int32_t TConsumeSvrClient::proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch)
{
  send_proc_modContributionListSwitch(runid, groupid, Switch);
  return recv_proc_modContributionListSwitch();
}

void TConsumeSvrClient::send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modContributionListSwitch_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrClient::recv_proc_modContributionListSwitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("proc_modContributionListSwitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  TConsumeSvr_proc_modContributionListSwitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modContributionListSwitch failed: unknown result");
}

int32_t TConsumeSvrClient::proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  send_proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
  return recv_proc_modGroupGainSetting();
}

void TConsumeSvrClient::send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.rangeType = &rangeType;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrClient::recv_proc_modGroupGainSetting()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("proc_modGroupGainSetting") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  TConsumeSvr_proc_modGroupGainSetting_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupGainSetting failed: unknown result");
}

int32_t TConsumeSvrClient::proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  send_proc_modGroupUserGainSetting(runid, groupid, userid, percent);
  return recv_proc_modGroupUserGainSetting();
}

void TConsumeSvrClient::send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupUserGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.userid = &userid;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrClient::recv_proc_modGroupUserGainSetting()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("proc_modGroupUserGainSetting") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  TConsumeSvr_proc_modGroupUserGainSetting_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupUserGainSetting failed: unknown result");
}

bool TConsumeSvrProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void TConsumeSvrProcessor::process_proc_modContributionListSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modContributionListSwitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modContributionListSwitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modContributionListSwitch");
  }

  TConsumeSvr_proc_modContributionListSwitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modContributionListSwitch", bytes);
  }

  TConsumeSvr_proc_modContributionListSwitch_result result;
  try {
    result.success = iface_->proc_modContributionListSwitch(args.runid, args.groupid, args.Switch);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modContributionListSwitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modContributionListSwitch");
  }

  oprot->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modContributionListSwitch", bytes);
  }
}

void TConsumeSvrProcessor::process_proc_modGroupGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupGainSetting", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupGainSetting");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modGroupGainSetting");
  }

  TConsumeSvr_proc_modGroupGainSetting_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modGroupGainSetting", bytes);
  }

  TConsumeSvr_proc_modGroupGainSetting_result result;
  try {
    result.success = iface_->proc_modGroupGainSetting(args.runid, args.groupid, args.Switch, args.rangeType, args.percent);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modGroupGainSetting");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modGroupGainSetting");
  }

  oprot->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modGroupGainSetting", bytes);
  }
}

void TConsumeSvrProcessor::process_proc_modGroupUserGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupUserGainSetting", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupUserGainSetting");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
  }

  TConsumeSvr_proc_modGroupUserGainSetting_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modGroupUserGainSetting", bytes);
  }

  TConsumeSvr_proc_modGroupUserGainSetting_result result;
  try {
    result.success = iface_->proc_modGroupUserGainSetting(args.runid, args.groupid, args.userid, args.percent);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
  }

  oprot->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modGroupUserGainSetting", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > TConsumeSvrProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< TConsumeSvrIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< TConsumeSvrIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new TConsumeSvrProcessor(handler));
  return processor;
}

int32_t TConsumeSvrConcurrentClient::proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch)
{
  int32_t seqid = send_proc_modContributionListSwitch(runid, groupid, Switch);
  return recv_proc_modContributionListSwitch(seqid);
}

int32_t TConsumeSvrConcurrentClient::send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modContributionListSwitch_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

int32_t TConsumeSvrConcurrentClient::recv_proc_modContributionListSwitch(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("proc_modContributionListSwitch") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int32_t _return;
      TConsumeSvr_proc_modContributionListSwitch_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modContributionListSwitch failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

int32_t TConsumeSvrConcurrentClient::proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  int32_t seqid = send_proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
  return recv_proc_modGroupGainSetting(seqid);
}

int32_t TConsumeSvrConcurrentClient::send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.rangeType = &rangeType;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

int32_t TConsumeSvrConcurrentClient::recv_proc_modGroupGainSetting(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("proc_modGroupGainSetting") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int32_t _return;
      TConsumeSvr_proc_modGroupGainSetting_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupGainSetting failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

int32_t TConsumeSvrConcurrentClient::proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  int32_t seqid = send_proc_modGroupUserGainSetting(runid, groupid, userid, percent);
  return recv_proc_modGroupUserGainSetting(seqid);
}

int32_t TConsumeSvrConcurrentClient::send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupUserGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.userid = &userid;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

int32_t TConsumeSvrConcurrentClient::recv_proc_modGroupUserGainSetting(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("proc_modGroupUserGainSetting") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int32_t _return;
      TConsumeSvr_proc_modGroupUserGainSetting_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupUserGainSetting failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void TConsumeSvrCobClient::proc_modContributionListSwitch(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch)
{
  send_proc_modContributionListSwitch(runid, groupid, Switch);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void TConsumeSvrCobClient::send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modContributionListSwitch_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrCobClient::recv_proc_modContributionListSwitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("proc_modContributionListSwitch") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int32_t _return;
    TConsumeSvr_proc_modContributionListSwitch_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modContributionListSwitch failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void TConsumeSvrCobClient::proc_modGroupGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  send_proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void TConsumeSvrCobClient::send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.Switch = &Switch;
  args.rangeType = &rangeType;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrCobClient::recv_proc_modGroupGainSetting()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("proc_modGroupGainSetting") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int32_t _return;
    TConsumeSvr_proc_modGroupGainSetting_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupGainSetting failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void TConsumeSvrCobClient::proc_modGroupUserGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  send_proc_modGroupUserGainSetting(runid, groupid, userid, percent);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void TConsumeSvrCobClient::send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_CALL, cseqid);

  TConsumeSvr_proc_modGroupUserGainSetting_pargs args;
  args.runid = &runid;
  args.groupid = &groupid;
  args.userid = &userid;
  args.percent = &percent;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t TConsumeSvrCobClient::recv_proc_modGroupUserGainSetting()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("proc_modGroupUserGainSetting") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int32_t _return;
    TConsumeSvr_proc_modGroupUserGainSetting_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "proc_modGroupUserGainSetting failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void TConsumeSvrAsyncProcessor::dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  (this->*(pfn->second))(cob, seqid, iprot, oprot);
  return;
}

void TConsumeSvrAsyncProcessor::process_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  TConsumeSvr_proc_modContributionListSwitch_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modContributionListSwitch", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modContributionListSwitch");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modContributionListSwitch");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modContributionListSwitch", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modContributionListSwitch");
    }
    return cob(false);
  }
  freer.unregister();
  void (TConsumeSvrAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return) =
    &TConsumeSvrAsyncProcessor::return_proc_modContributionListSwitch;
  iface_->proc_modContributionListSwitch(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.runid,
      args.groupid,
      args.Switch);
}

void TConsumeSvrAsyncProcessor::return_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return)
{
  TConsumeSvr_proc_modContributionListSwitch_presult result;
  result.success = const_cast<int32_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modContributionListSwitch", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modContributionListSwitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modContributionListSwitch");
  }

  oprot->writeMessageBegin("proc_modContributionListSwitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modContributionListSwitch", bytes);
  }
  return cob(true);
}

void TConsumeSvrAsyncProcessor::process_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  TConsumeSvr_proc_modGroupGainSetting_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupGainSetting", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupGainSetting");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modGroupGainSetting");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modGroupGainSetting", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modGroupGainSetting");
    }
    return cob(false);
  }
  freer.unregister();
  void (TConsumeSvrAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return) =
    &TConsumeSvrAsyncProcessor::return_proc_modGroupGainSetting;
  iface_->proc_modGroupGainSetting(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.runid,
      args.groupid,
      args.Switch,
      args.rangeType,
      args.percent);
}

void TConsumeSvrAsyncProcessor::return_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return)
{
  TConsumeSvr_proc_modGroupGainSetting_presult result;
  result.success = const_cast<int32_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupGainSetting", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupGainSetting");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modGroupGainSetting");
  }

  oprot->writeMessageBegin("proc_modGroupGainSetting", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modGroupGainSetting", bytes);
  }
  return cob(true);
}

void TConsumeSvrAsyncProcessor::process_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  TConsumeSvr_proc_modGroupUserGainSetting_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupUserGainSetting", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupUserGainSetting");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "TConsumeSvr.proc_modGroupUserGainSetting", bytes);
    }
  }
  catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
    }
    return cob(false);
  }
  freer.unregister();
  void (TConsumeSvrAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return) =
    &TConsumeSvrAsyncProcessor::return_proc_modGroupUserGainSetting;
  iface_->proc_modGroupUserGainSetting(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.runid,
      args.groupid,
      args.userid,
      args.percent);
}

void TConsumeSvrAsyncProcessor::return_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return)
{
  TConsumeSvr_proc_modGroupUserGainSetting_presult result;
  result.success = const_cast<int32_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TConsumeSvr.proc_modGroupUserGainSetting", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TConsumeSvr.proc_modGroupUserGainSetting");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TConsumeSvr.proc_modGroupUserGainSetting");
  }

  oprot->writeMessageBegin("proc_modGroupUserGainSetting", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TConsumeSvr.proc_modGroupUserGainSetting", bytes);
  }
  return cob(true);
}

::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > TConsumeSvrAsyncProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< TConsumeSvrCobSvIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< TConsumeSvrCobSvIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > processor(new TConsumeSvrAsyncProcessor(handler));
  return processor;
}



