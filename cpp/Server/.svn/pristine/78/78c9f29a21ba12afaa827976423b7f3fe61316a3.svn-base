// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "TRoomSvr.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

class TRoomSvrAsyncHandler : public TRoomSvrCobSvIf {
 public:
  TRoomSvrAsyncHandler() {
    syncHandler_ = std::auto_ptr<TRoomSvrHandler>(new TRoomSvrHandler);
    // Your initialization goes here
  }
  virtual ~TRoomSvrAsyncHandler();

  void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& oReq) {
    int32_t _return = 0;
    _return = syncHandler_->proc_joingroup(oReq);
    return cob(_return);
  }

  void proc_blockUserInGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) {
    int32_t _return = 0;
    _return = syncHandler_->proc_blockUserInGroup(runid, userid, groupid, reasonid, kickout_min);
    return cob(_return);
  }

  void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const int32_t ownerid) {
    bool _return = false;
    _return = syncHandler_->proc_setGroupOwner(groupid, ownerid);
    return cob(_return);
  }

  void proc_loadGroup(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const std::string& host) {
    bool _return = false;
    _return = syncHandler_->proc_loadGroup(groupid, host);
    return cob(_return);
  }

  void proc_modGroup(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const std::string& host) {
    bool _return = false;
    _return = syncHandler_->proc_modGroup(groupid, host);
    return cob(_return);
  }

  void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupSettings(runid, groupid, mSetting);
    return cob(_return);
  }

  void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
    return cob(_return);
  }

  void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
    return cob(_return);
  }

  void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid) {
    int32_t _return = 0;
    _return = syncHandler_->proc_kickAllOnlookers(runid, groupid);
    return cob(_return);
  }

  void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
    return cob(_return);
  }

  void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVideoAuthSwitch(runid, groupid, Switch);
    return cob(_return);
  }

  void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupUserRole(runid, groupid, userid, roleType);
    return cob(_return);
  }

  void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t groupid) {
    std::vector< ::TUserGroupInfo>  _return;
    syncHandler_->proc_getGroupVisitorLst(_return, groupid);
    return cob(_return);
  }

  void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t userid, const int32_t groupid) {
    std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  _return;
    syncHandler_->proc_queryInGroupList(_return, userid, groupid);
    return cob(_return);
  }

  void proc_give_tip(tcxx::function<void(int32_t const& _return)> cob, const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) {
    int32_t _return = 0;
    _return = syncHandler_->proc_give_tip(srcid, toid, groupid, gifname, tiptype, srcname, toname, gifpicture);
    return cob(_return);
  }

  void proc_send_link(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) {
    int32_t _return = 0;
    _return = syncHandler_->proc_send_link(groupid, title, source, summary, bTip, amount, pointId, head_add, recommendid, user_id);
    return cob(_return);
  }

  void proc_send_notice(tcxx::function<void(int32_t const& _return)> cob, const std::string& notice) {
    int32_t _return = 0;
    _return = syncHandler_->proc_send_notice(notice);
    return cob(_return);
  }

  void proc_send_course(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) {
    int32_t _return = 0;
    _return = syncHandler_->proc_send_course(groupid, title, source, summary, bTip, amount, courseId, head_add, teachername, srcimg, recommendid, user_id);
    return cob(_return);
  }

  void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid) {
    int32_t _return = 0;
    _return = syncHandler_->proc_reloadUserInfo(userid);
    return cob(_return);
  }

  void proc_reloadRoomVirtualNumInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t liveid, const int32_t numbers) {
    int32_t _return = 0;
    _return = syncHandler_->proc_reloadRoomVirtualNumInfo(liveid, numbers);
    return cob(_return);
  }

  void proc_CloseLiveAndCourse(tcxx::function<void(int32_t const& _return)> cob, const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) {
    int32_t _return = 0;
    _return = syncHandler_->proc_CloseLiveAndCourse(runuserid, liveid, status, type);
    return cob(_return);
  }

  void proc_liveStart(tcxx::function<void(int32_t const& _return)> cob, const std::string& streamId) {
    int32_t _return = 0;
    _return = syncHandler_->proc_liveStart(streamId);
    return cob(_return);
  }

  void proc_liveStop(tcxx::function<void(int32_t const& _return)> cob, const std::string& streamId) {
    int32_t _return = 0;
    _return = syncHandler_->proc_liveStop(streamId);
    return cob(_return);
  }

  void proc_sendNewSubCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) {
    int32_t _return = 0;
    _return = syncHandler_->proc_sendNewSubCourseNotice(courseId, subCourseId, userId, courseName, subCourseName, beginTime);
    return cob(_return);
  }

  void proc_sendNewCourseNotice(tcxx::function<void(int32_t const& _return)> cob, const int32_t courseId, const bool isSubCourse) {
    int32_t _return = 0;
    _return = syncHandler_->proc_sendNewCourseNotice(courseId, isSubCourse);
    return cob(_return);
  }

 protected:
  std::auto_ptr<TRoomSvrHandler> syncHandler_;
};

