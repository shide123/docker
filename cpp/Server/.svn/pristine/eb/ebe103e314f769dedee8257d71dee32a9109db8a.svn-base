/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TCommonIf_TYPES_H
#define TCommonIf_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct E_THRIFT_GROUP_SETTING {
  enum type {
    VISIT_SWITCH = 1,
    KICK_ALL_VISITOR = 2,
    MALE_JOIN_AUTH = 3,
    MALE_JOIN_REDPACKET_NUM = 4,
    MALE_JOIN_REDPACKET_AMOUNT = 5,
    FEMALE_JOIN_AUTH = 6,
    FEMALE_JOIN_REDPACKET_NUM = 7,
    FEMALE_JOIN_REDPACKET_AMOUNT = 8,
    CONTRIBUTION_LIST_SWITCH = 9,
    VOICE_CHAT_SWITCH = 10,
    ALLOW_VISITOR_ON_MIC = 11,
    GAIN_RANGE_TYPE = 12,
    GAIN_PERCENT = 13,
    PRIVATE_CHAT_SWITCH = 14,
    PCHAT_MIN_THRESHOLD_MALE = 15,
    PCHAT_MIN_THRESHOLD_FEMALE = 16,
    GAIN_SWITCH = 17,
    GAIN_GROUP = 18
  };
};

extern const std::map<int, const char*> _E_THRIFT_GROUP_SETTING_VALUES_TO_NAMES;

struct e_INGROUP_TYPE {
  enum type {
    Member = 1,
    Visitor = 2
  };
};

extern const std::map<int, const char*> _e_INGROUP_TYPE_VALUES_TO_NAMES;

struct e_JoinGroupAuthType {
  enum type {
    NoNeedAuth = 0,
    RedPacket = 1,
    VideoAuth = 2,
    MsgAuth = 3,
    Forbidden = 4
  };
};

extern const std::map<int, const char*> _e_JoinGroupAuthType_VALUES_TO_NAMES;

struct SYSMSG_COND_TYPE {
  enum type {
    USER = 1,
    TELNUM = 2,
    APPVERSION = 3
  };
};

extern const std::map<int, const char*> _SYSMSG_COND_TYPE_VALUES_TO_NAMES;

class TJoinGroup;

class TUserGroupInfo;

class TJoinGroupCondition;

class TCondition;

class TNoticeMsg;

typedef struct _TJoinGroup__isset {
  _TJoinGroup__isset() : userid(false), groupid(false), inway(false), action(false) {}
  bool userid :1;
  bool groupid :1;
  bool inway :1;
  bool action :1;
} _TJoinGroup__isset;

class TJoinGroup {
 public:

  TJoinGroup(const TJoinGroup&);
  TJoinGroup& operator=(const TJoinGroup&);
  TJoinGroup() : userid(0), groupid(0), inway(0), action(0) {
  }

  virtual ~TJoinGroup() throw();
  int32_t userid;
  int32_t groupid;
  int8_t inway;
  int8_t action;

  _TJoinGroup__isset __isset;

  void __set_userid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_inway(const int8_t val);

  void __set_action(const int8_t val);

  bool operator == (const TJoinGroup & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(inway == rhs.inway))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const TJoinGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TJoinGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TJoinGroup &a, TJoinGroup &b);

inline std::ostream& operator<<(std::ostream& out, const TJoinGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TUserGroupInfo__isset {
  _TUserGroupInfo__isset() : userID(false), userAlias(false), userHead(false), groupID(false), roleType(false) {}
  bool userID :1;
  bool userAlias :1;
  bool userHead :1;
  bool groupID :1;
  bool roleType :1;
} _TUserGroupInfo__isset;

class TUserGroupInfo {
 public:

  TUserGroupInfo(const TUserGroupInfo&);
  TUserGroupInfo& operator=(const TUserGroupInfo&);
  TUserGroupInfo() : userID(0), userAlias(), userHead(), groupID(0), roleType(0) {
  }

  virtual ~TUserGroupInfo() throw();
  int32_t userID;
  std::string userAlias;
  std::string userHead;
  int32_t groupID;
  int32_t roleType;

  _TUserGroupInfo__isset __isset;

  void __set_userID(const int32_t val);

  void __set_userAlias(const std::string& val);

  void __set_userHead(const std::string& val);

  void __set_groupID(const int32_t val);

  void __set_roleType(const int32_t val);

  bool operator == (const TUserGroupInfo & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(userAlias == rhs.userAlias))
      return false;
    if (!(userHead == rhs.userHead))
      return false;
    if (!(groupID == rhs.groupID))
      return false;
    if (!(roleType == rhs.roleType))
      return false;
    return true;
  }
  bool operator != (const TUserGroupInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserGroupInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUserGroupInfo &a, TUserGroupInfo &b);

inline std::ostream& operator<<(std::ostream& out, const TUserGroupInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TJoinGroupCondition__isset {
  _TJoinGroupCondition__isset() : type(false), redPacketNum(false), redPacketAmount(false) {}
  bool type :1;
  bool redPacketNum :1;
  bool redPacketAmount :1;
} _TJoinGroupCondition__isset;

class TJoinGroupCondition {
 public:

  TJoinGroupCondition(const TJoinGroupCondition&);
  TJoinGroupCondition& operator=(const TJoinGroupCondition&);
  TJoinGroupCondition() : type((e_JoinGroupAuthType::type)0), redPacketNum(0), redPacketAmount(0) {
  }

  virtual ~TJoinGroupCondition() throw();
  e_JoinGroupAuthType::type type;
  int16_t redPacketNum;
  int32_t redPacketAmount;

  _TJoinGroupCondition__isset __isset;

  void __set_type(const e_JoinGroupAuthType::type val);

  void __set_redPacketNum(const int16_t val);

  void __set_redPacketAmount(const int32_t val);

  bool operator == (const TJoinGroupCondition & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(redPacketNum == rhs.redPacketNum))
      return false;
    if (!(redPacketAmount == rhs.redPacketAmount))
      return false;
    return true;
  }
  bool operator != (const TJoinGroupCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TJoinGroupCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TJoinGroupCondition &a, TJoinGroupCondition &b);

inline std::ostream& operator<<(std::ostream& out, const TJoinGroupCondition& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TCondition__isset {
  _TCondition__isset() : type(false), oper(false), value(false), values(false) {}
  bool type :1;
  bool oper :1;
  bool value :1;
  bool values :1;
} _TCondition__isset;

class TCondition {
 public:

  TCondition(const TCondition&);
  TCondition& operator=(const TCondition&);
  TCondition() : type((SYSMSG_COND_TYPE::type)0), oper(), value() {
  }

  virtual ~TCondition() throw();
  SYSMSG_COND_TYPE::type type;
  std::string oper;
  std::string value;
  std::set<std::string>  values;

  _TCondition__isset __isset;

  void __set_type(const SYSMSG_COND_TYPE::type val);

  void __set_oper(const std::string& val);

  void __set_value(const std::string& val);

  void __set_values(const std::set<std::string> & val);

  bool operator == (const TCondition & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(oper == rhs.oper))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const TCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCondition &a, TCondition &b);

inline std::ostream& operator<<(std::ostream& out, const TCondition& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TNoticeMsg__isset {
  _TNoticeMsg__isset() : type(false), content(false), action(false), endTime(false) {}
  bool type :1;
  bool content :1;
  bool action :1;
  bool endTime :1;
} _TNoticeMsg__isset;

class TNoticeMsg {
 public:

  TNoticeMsg(const TNoticeMsg&);
  TNoticeMsg& operator=(const TNoticeMsg&);
  TNoticeMsg() : type(0), content(), action(), endTime(0) {
  }

  virtual ~TNoticeMsg() throw();
  int16_t type;
  std::string content;
  std::string action;
  int32_t endTime;

  _TNoticeMsg__isset __isset;

  void __set_type(const int16_t val);

  void __set_content(const std::string& val);

  void __set_action(const std::string& val);

  void __set_endTime(const int32_t val);

  bool operator == (const TNoticeMsg & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const TNoticeMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNoticeMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TNoticeMsg &a, TNoticeMsg &b);

inline std::ostream& operator<<(std::ostream& out, const TNoticeMsg& obj)
{
  obj.printTo(out);
  return out;
}



#endif
