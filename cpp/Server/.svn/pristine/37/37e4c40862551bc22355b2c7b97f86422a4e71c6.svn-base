/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TConsumeSvr_H
#define TConsumeSvr_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TConsumeSvrIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TConsumeSvrIf {
 public:
  virtual ~TConsumeSvrIf() {}
  virtual int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
};

class TConsumeSvrIfFactory {
 public:
  typedef TConsumeSvrIf Handler;

  virtual ~TConsumeSvrIfFactory() {}

  virtual TConsumeSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TConsumeSvrIf* /* handler */) = 0;
};

class TConsumeSvrIfSingletonFactory : virtual public TConsumeSvrIfFactory {
 public:
  TConsumeSvrIfSingletonFactory(const boost::shared_ptr<TConsumeSvrIf>& iface) : iface_(iface) {}
  virtual ~TConsumeSvrIfSingletonFactory() {}

  virtual TConsumeSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TConsumeSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<TConsumeSvrIf> iface_;
};

class TConsumeSvrNull : virtual public TConsumeSvrIf {
 public:
  virtual ~TConsumeSvrNull() {}
  int32_t proc_modContributionListSwitch(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupGainSetting(const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const int8_t /* rangeType */, const int8_t /* percent */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t proc_modGroupUserGainSetting(const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int8_t /* percent */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _TConsumeSvr_proc_modContributionListSwitch_args__isset {
  _TConsumeSvr_proc_modContributionListSwitch_args__isset() : runid(false), groupid(false), Switch(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
} _TConsumeSvr_proc_modContributionListSwitch_args__isset;

class TConsumeSvr_proc_modContributionListSwitch_args {
 public:

  TConsumeSvr_proc_modContributionListSwitch_args(const TConsumeSvr_proc_modContributionListSwitch_args&);
  TConsumeSvr_proc_modContributionListSwitch_args& operator=(const TConsumeSvr_proc_modContributionListSwitch_args&);
  TConsumeSvr_proc_modContributionListSwitch_args() : runid(0), groupid(0), Switch(0) {
  }

  virtual ~TConsumeSvr_proc_modContributionListSwitch_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;

  _TConsumeSvr_proc_modContributionListSwitch_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  bool operator == (const TConsumeSvr_proc_modContributionListSwitch_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modContributionListSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modContributionListSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TConsumeSvr_proc_modContributionListSwitch_pargs {
 public:


  virtual ~TConsumeSvr_proc_modContributionListSwitch_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modContributionListSwitch_result__isset {
  _TConsumeSvr_proc_modContributionListSwitch_result__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modContributionListSwitch_result__isset;

class TConsumeSvr_proc_modContributionListSwitch_result {
 public:

  TConsumeSvr_proc_modContributionListSwitch_result(const TConsumeSvr_proc_modContributionListSwitch_result&);
  TConsumeSvr_proc_modContributionListSwitch_result& operator=(const TConsumeSvr_proc_modContributionListSwitch_result&);
  TConsumeSvr_proc_modContributionListSwitch_result() : success(0) {
  }

  virtual ~TConsumeSvr_proc_modContributionListSwitch_result() throw();
  int32_t success;

  _TConsumeSvr_proc_modContributionListSwitch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TConsumeSvr_proc_modContributionListSwitch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modContributionListSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modContributionListSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modContributionListSwitch_presult__isset {
  _TConsumeSvr_proc_modContributionListSwitch_presult__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modContributionListSwitch_presult__isset;

class TConsumeSvr_proc_modContributionListSwitch_presult {
 public:


  virtual ~TConsumeSvr_proc_modContributionListSwitch_presult() throw();
  int32_t* success;

  _TConsumeSvr_proc_modContributionListSwitch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupGainSetting_args__isset {
  _TConsumeSvr_proc_modGroupGainSetting_args__isset() : runid(false), groupid(false), Switch(false), rangeType(false), percent(false) {}
  bool runid :1;
  bool groupid :1;
  bool Switch :1;
  bool rangeType :1;
  bool percent :1;
} _TConsumeSvr_proc_modGroupGainSetting_args__isset;

class TConsumeSvr_proc_modGroupGainSetting_args {
 public:

  TConsumeSvr_proc_modGroupGainSetting_args(const TConsumeSvr_proc_modGroupGainSetting_args&);
  TConsumeSvr_proc_modGroupGainSetting_args& operator=(const TConsumeSvr_proc_modGroupGainSetting_args&);
  TConsumeSvr_proc_modGroupGainSetting_args() : runid(0), groupid(0), Switch(0), rangeType(0), percent(0) {
  }

  virtual ~TConsumeSvr_proc_modGroupGainSetting_args() throw();
  int32_t runid;
  int32_t groupid;
  bool Switch;
  int8_t rangeType;
  int8_t percent;

  _TConsumeSvr_proc_modGroupGainSetting_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_Switch(const bool val);

  void __set_rangeType(const int8_t val);

  void __set_percent(const int8_t val);

  bool operator == (const TConsumeSvr_proc_modGroupGainSetting_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(Switch == rhs.Switch))
      return false;
    if (!(rangeType == rhs.rangeType))
      return false;
    if (!(percent == rhs.percent))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modGroupGainSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modGroupGainSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TConsumeSvr_proc_modGroupGainSetting_pargs {
 public:


  virtual ~TConsumeSvr_proc_modGroupGainSetting_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const bool* Switch;
  const int8_t* rangeType;
  const int8_t* percent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupGainSetting_result__isset {
  _TConsumeSvr_proc_modGroupGainSetting_result__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modGroupGainSetting_result__isset;

class TConsumeSvr_proc_modGroupGainSetting_result {
 public:

  TConsumeSvr_proc_modGroupGainSetting_result(const TConsumeSvr_proc_modGroupGainSetting_result&);
  TConsumeSvr_proc_modGroupGainSetting_result& operator=(const TConsumeSvr_proc_modGroupGainSetting_result&);
  TConsumeSvr_proc_modGroupGainSetting_result() : success(0) {
  }

  virtual ~TConsumeSvr_proc_modGroupGainSetting_result() throw();
  int32_t success;

  _TConsumeSvr_proc_modGroupGainSetting_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TConsumeSvr_proc_modGroupGainSetting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modGroupGainSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modGroupGainSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupGainSetting_presult__isset {
  _TConsumeSvr_proc_modGroupGainSetting_presult__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modGroupGainSetting_presult__isset;

class TConsumeSvr_proc_modGroupGainSetting_presult {
 public:


  virtual ~TConsumeSvr_proc_modGroupGainSetting_presult() throw();
  int32_t* success;

  _TConsumeSvr_proc_modGroupGainSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupUserGainSetting_args__isset {
  _TConsumeSvr_proc_modGroupUserGainSetting_args__isset() : runid(false), groupid(false), userid(false), percent(false) {}
  bool runid :1;
  bool groupid :1;
  bool userid :1;
  bool percent :1;
} _TConsumeSvr_proc_modGroupUserGainSetting_args__isset;

class TConsumeSvr_proc_modGroupUserGainSetting_args {
 public:

  TConsumeSvr_proc_modGroupUserGainSetting_args(const TConsumeSvr_proc_modGroupUserGainSetting_args&);
  TConsumeSvr_proc_modGroupUserGainSetting_args& operator=(const TConsumeSvr_proc_modGroupUserGainSetting_args&);
  TConsumeSvr_proc_modGroupUserGainSetting_args() : runid(0), groupid(0), userid(0), percent(0) {
  }

  virtual ~TConsumeSvr_proc_modGroupUserGainSetting_args() throw();
  int32_t runid;
  int32_t groupid;
  int32_t userid;
  int8_t percent;

  _TConsumeSvr_proc_modGroupUserGainSetting_args__isset __isset;

  void __set_runid(const int32_t val);

  void __set_groupid(const int32_t val);

  void __set_userid(const int32_t val);

  void __set_percent(const int8_t val);

  bool operator == (const TConsumeSvr_proc_modGroupUserGainSetting_args & rhs) const
  {
    if (!(runid == rhs.runid))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(percent == rhs.percent))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modGroupUserGainSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modGroupUserGainSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TConsumeSvr_proc_modGroupUserGainSetting_pargs {
 public:


  virtual ~TConsumeSvr_proc_modGroupUserGainSetting_pargs() throw();
  const int32_t* runid;
  const int32_t* groupid;
  const int32_t* userid;
  const int8_t* percent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupUserGainSetting_result__isset {
  _TConsumeSvr_proc_modGroupUserGainSetting_result__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modGroupUserGainSetting_result__isset;

class TConsumeSvr_proc_modGroupUserGainSetting_result {
 public:

  TConsumeSvr_proc_modGroupUserGainSetting_result(const TConsumeSvr_proc_modGroupUserGainSetting_result&);
  TConsumeSvr_proc_modGroupUserGainSetting_result& operator=(const TConsumeSvr_proc_modGroupUserGainSetting_result&);
  TConsumeSvr_proc_modGroupUserGainSetting_result() : success(0) {
  }

  virtual ~TConsumeSvr_proc_modGroupUserGainSetting_result() throw();
  int32_t success;

  _TConsumeSvr_proc_modGroupUserGainSetting_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const TConsumeSvr_proc_modGroupUserGainSetting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TConsumeSvr_proc_modGroupUserGainSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TConsumeSvr_proc_modGroupUserGainSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TConsumeSvr_proc_modGroupUserGainSetting_presult__isset {
  _TConsumeSvr_proc_modGroupUserGainSetting_presult__isset() : success(false) {}
  bool success :1;
} _TConsumeSvr_proc_modGroupUserGainSetting_presult__isset;

class TConsumeSvr_proc_modGroupUserGainSetting_presult {
 public:


  virtual ~TConsumeSvr_proc_modGroupUserGainSetting_presult() throw();
  int32_t* success;

  _TConsumeSvr_proc_modGroupUserGainSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TConsumeSvrClient : virtual public TConsumeSvrIf {
 public:
  TConsumeSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TConsumeSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch();
  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  void send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting();
  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  void send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TConsumeSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TConsumeSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TConsumeSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_modContributionListSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_modGroupUserGainSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TConsumeSvrProcessor(boost::shared_ptr<TConsumeSvrIf> iface) :
    iface_(iface) {
    processMap_["proc_modContributionListSwitch"] = &TConsumeSvrProcessor::process_proc_modContributionListSwitch;
    processMap_["proc_modGroupGainSetting"] = &TConsumeSvrProcessor::process_proc_modGroupGainSetting;
    processMap_["proc_modGroupUserGainSetting"] = &TConsumeSvrProcessor::process_proc_modGroupUserGainSetting;
  }

  virtual ~TConsumeSvrProcessor() {}
};

class TConsumeSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TConsumeSvrProcessorFactory(const ::boost::shared_ptr< TConsumeSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TConsumeSvrIfFactory > handlerFactory_;
};

class TConsumeSvrMultiface : virtual public TConsumeSvrIf {
 public:
  TConsumeSvrMultiface(std::vector<boost::shared_ptr<TConsumeSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TConsumeSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TConsumeSvrIf> > ifaces_;
  TConsumeSvrMultiface() {}
  void add(boost::shared_ptr<TConsumeSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modContributionListSwitch(runid, groupid, Switch);
    }
    return ifaces_[i]->proc_modContributionListSwitch(runid, groupid, Switch);
  }

  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
    }
    return ifaces_[i]->proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
  }

  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_modGroupUserGainSetting(runid, groupid, userid, percent);
    }
    return ifaces_[i]->proc_modGroupUserGainSetting(runid, groupid, userid, percent);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TConsumeSvrConcurrentClient : virtual public TConsumeSvrIf {
 public:
  TConsumeSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TConsumeSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch(const int32_t seqid);
  int32_t proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting(const int32_t seqid);
  int32_t proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TConsumeSvrCobClient;

class TConsumeSvrCobClIf {
 public:
  virtual ~TConsumeSvrCobClIf() {}
  virtual void proc_modContributionListSwitch(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual void proc_modGroupUserGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
};

class TConsumeSvrCobSvIf {
 public:
  virtual ~TConsumeSvrCobSvIf() {}
  virtual void proc_modContributionListSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) = 0;
  virtual void proc_modGroupGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) = 0;
  virtual void proc_modGroupUserGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) = 0;
};

class TConsumeSvrCobSvIfFactory {
 public:
  typedef TConsumeSvrCobSvIf Handler;

  virtual ~TConsumeSvrCobSvIfFactory() {}

  virtual TConsumeSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TConsumeSvrCobSvIf* /* handler */) = 0;
};

class TConsumeSvrCobSvIfSingletonFactory : virtual public TConsumeSvrCobSvIfFactory {
 public:
  TConsumeSvrCobSvIfSingletonFactory(const boost::shared_ptr<TConsumeSvrCobSvIf>& iface) : iface_(iface) {}
  virtual ~TConsumeSvrCobSvIfSingletonFactory() {}

  virtual TConsumeSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TConsumeSvrCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TConsumeSvrCobSvIf> iface_;
};

class TConsumeSvrCobSvNull : virtual public TConsumeSvrCobSvIf {
 public:
  virtual ~TConsumeSvrCobSvNull() {}
  void proc_modContributionListSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const bool /* Switch */, const int8_t /* rangeType */, const int8_t /* percent */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void proc_modGroupUserGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t /* runid */, const int32_t /* groupid */, const int32_t /* userid */, const int8_t /* percent */) {
    int32_t _return = 0;
    return cob(_return);
  }
};

class TConsumeSvrCobClient : virtual public TConsumeSvrCobClIf {
 public:
  TConsumeSvrCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void proc_modContributionListSwitch(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch);
  void send_proc_modContributionListSwitch(const int32_t runid, const int32_t groupid, const bool Switch);
  int32_t recv_proc_modContributionListSwitch();
  void proc_modGroupGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  void send_proc_modGroupGainSetting(const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent);
  int32_t recv_proc_modGroupGainSetting();
  void proc_modGroupUserGainSetting(tcxx::function<void(TConsumeSvrCobClient* client)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  void send_proc_modGroupUserGainSetting(const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent);
  int32_t recv_proc_modGroupUserGainSetting();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TConsumeSvrAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TConsumeSvrCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TConsumeSvrAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modContributionListSwitch(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_proc_modGroupUserGainSetting(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TConsumeSvrAsyncProcessor(boost::shared_ptr<TConsumeSvrCobSvIf> iface) :
    iface_(iface) {
    processMap_["proc_modContributionListSwitch"] = &TConsumeSvrAsyncProcessor::process_proc_modContributionListSwitch;
    processMap_["proc_modGroupGainSetting"] = &TConsumeSvrAsyncProcessor::process_proc_modGroupGainSetting;
    processMap_["proc_modGroupUserGainSetting"] = &TConsumeSvrAsyncProcessor::process_proc_modGroupUserGainSetting;
  }

  virtual ~TConsumeSvrAsyncProcessor() {}
};

class TConsumeSvrAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TConsumeSvrAsyncProcessorFactory(const ::boost::shared_ptr< TConsumeSvrCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TConsumeSvrCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
