/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TpPushSvr_H
#define TpPushSvr_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TTpPushSvrIf_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TpPushSvrIf {
 public:
  virtual ~TpPushSvrIf() {}
  virtual void proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline) = 0;
};

class TpPushSvrIfFactory {
 public:
  typedef TpPushSvrIf Handler;

  virtual ~TpPushSvrIfFactory() {}

  virtual TpPushSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TpPushSvrIf* /* handler */) = 0;
};

class TpPushSvrIfSingletonFactory : virtual public TpPushSvrIfFactory {
 public:
  TpPushSvrIfSingletonFactory(const boost::shared_ptr<TpPushSvrIf>& iface) : iface_(iface) {}
  virtual ~TpPushSvrIfSingletonFactory() {}

  virtual TpPushSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TpPushSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<TpPushSvrIf> iface_;
};

class TpPushSvrNull : virtual public TpPushSvrIf {
 public:
  virtual ~TpPushSvrNull() {}
  void proc_notifyChatMsg(const TChatMsgPush& /* msg */, const int32_t /* groupid */, const bool /* notify_offline */) {
    return;
  }
};

typedef struct _TpPushSvr_proc_notifyChatMsg_args__isset {
  _TpPushSvr_proc_notifyChatMsg_args__isset() : msg(false), groupid(true), notify_offline(true) {}
  bool msg :1;
  bool groupid :1;
  bool notify_offline :1;
} _TpPushSvr_proc_notifyChatMsg_args__isset;

class TpPushSvr_proc_notifyChatMsg_args {
 public:

  TpPushSvr_proc_notifyChatMsg_args(const TpPushSvr_proc_notifyChatMsg_args&);
  TpPushSvr_proc_notifyChatMsg_args& operator=(const TpPushSvr_proc_notifyChatMsg_args&);
  TpPushSvr_proc_notifyChatMsg_args() : groupid(0), notify_offline(false) {
  }

  virtual ~TpPushSvr_proc_notifyChatMsg_args() throw();
  TChatMsgPush msg;
  int32_t groupid;
  bool notify_offline;

  _TpPushSvr_proc_notifyChatMsg_args__isset __isset;

  void __set_msg(const TChatMsgPush& val);

  void __set_groupid(const int32_t val);

  void __set_notify_offline(const bool val);

  bool operator == (const TpPushSvr_proc_notifyChatMsg_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    if (!(notify_offline == rhs.notify_offline))
      return false;
    return true;
  }
  bool operator != (const TpPushSvr_proc_notifyChatMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TpPushSvr_proc_notifyChatMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TpPushSvr_proc_notifyChatMsg_pargs {
 public:


  virtual ~TpPushSvr_proc_notifyChatMsg_pargs() throw();
  const TChatMsgPush* msg;
  const int32_t* groupid;
  const bool* notify_offline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TpPushSvr_proc_notifyChatMsg_result {
 public:

  TpPushSvr_proc_notifyChatMsg_result(const TpPushSvr_proc_notifyChatMsg_result&);
  TpPushSvr_proc_notifyChatMsg_result& operator=(const TpPushSvr_proc_notifyChatMsg_result&);
  TpPushSvr_proc_notifyChatMsg_result() {
  }

  virtual ~TpPushSvr_proc_notifyChatMsg_result() throw();

  bool operator == (const TpPushSvr_proc_notifyChatMsg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TpPushSvr_proc_notifyChatMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TpPushSvr_proc_notifyChatMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TpPushSvr_proc_notifyChatMsg_presult {
 public:


  virtual ~TpPushSvr_proc_notifyChatMsg_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TpPushSvrClient : virtual public TpPushSvrIf {
 public:
  TpPushSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TpPushSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  void send_proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  void recv_proc_notifyChatMsg();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TpPushSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TpPushSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TpPushSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_notifyChatMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TpPushSvrProcessor(boost::shared_ptr<TpPushSvrIf> iface) :
    iface_(iface) {
    processMap_["proc_notifyChatMsg"] = &TpPushSvrProcessor::process_proc_notifyChatMsg;
  }

  virtual ~TpPushSvrProcessor() {}
};

class TpPushSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TpPushSvrProcessorFactory(const ::boost::shared_ptr< TpPushSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TpPushSvrIfFactory > handlerFactory_;
};

class TpPushSvrMultiface : virtual public TpPushSvrIf {
 public:
  TpPushSvrMultiface(std::vector<boost::shared_ptr<TpPushSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TpPushSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TpPushSvrIf> > ifaces_;
  TpPushSvrMultiface() {}
  void add(boost::shared_ptr<TpPushSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_notifyChatMsg(msg, groupid, notify_offline);
    }
    ifaces_[i]->proc_notifyChatMsg(msg, groupid, notify_offline);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TpPushSvrConcurrentClient : virtual public TpPushSvrIf {
 public:
  TpPushSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TpPushSvrConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  int32_t send_proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  void recv_proc_notifyChatMsg(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class TpPushSvrCobClient;

class TpPushSvrCobClIf {
 public:
  virtual ~TpPushSvrCobClIf() {}
  virtual void proc_notifyChatMsg(tcxx::function<void(TpPushSvrCobClient* client)> cob, const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline) = 0;
};

class TpPushSvrCobSvIf {
 public:
  virtual ~TpPushSvrCobSvIf() {}
  virtual void proc_notifyChatMsg(tcxx::function<void()> cob, const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline) = 0;
};

class TpPushSvrCobSvIfFactory {
 public:
  typedef TpPushSvrCobSvIf Handler;

  virtual ~TpPushSvrCobSvIfFactory() {}

  virtual TpPushSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TpPushSvrCobSvIf* /* handler */) = 0;
};

class TpPushSvrCobSvIfSingletonFactory : virtual public TpPushSvrCobSvIfFactory {
 public:
  TpPushSvrCobSvIfSingletonFactory(const boost::shared_ptr<TpPushSvrCobSvIf>& iface) : iface_(iface) {}
  virtual ~TpPushSvrCobSvIfSingletonFactory() {}

  virtual TpPushSvrCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TpPushSvrCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<TpPushSvrCobSvIf> iface_;
};

class TpPushSvrCobSvNull : virtual public TpPushSvrCobSvIf {
 public:
  virtual ~TpPushSvrCobSvNull() {}
  void proc_notifyChatMsg(tcxx::function<void()> cob, const TChatMsgPush& /* msg */, const int32_t /* groupid */, const bool /* notify_offline */) {
    return cob();
  }
};

class TpPushSvrCobClient : virtual public TpPushSvrCobClIf {
 public:
  TpPushSvrCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void proc_notifyChatMsg(tcxx::function<void(TpPushSvrCobClient* client)> cob, const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  void send_proc_notifyChatMsg(const TChatMsgPush& msg, const int32_t groupid, const bool notify_offline);
  void recv_proc_notifyChatMsg();
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TpPushSvrAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<TpPushSvrCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (TpPushSvrAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_proc_notifyChatMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_proc_notifyChatMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_proc_notifyChatMsg(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  TpPushSvrAsyncProcessor(boost::shared_ptr<TpPushSvrCobSvIf> iface) :
    iface_(iface) {
    processMap_["proc_notifyChatMsg"] = &TpPushSvrAsyncProcessor::process_proc_notifyChatMsg;
  }

  virtual ~TpPushSvrAsyncProcessor() {}
};

class TpPushSvrAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  TpPushSvrAsyncProcessorFactory(const ::boost::shared_ptr< TpPushSvrCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TpPushSvrCobSvIfFactory > handlerFactory_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
