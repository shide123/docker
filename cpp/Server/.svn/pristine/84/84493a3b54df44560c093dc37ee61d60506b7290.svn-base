// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TRoomSvr.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class TRoomSvrHandler : virtual public TRoomSvrIf {
 public:
  TRoomSvrHandler() {
    // Your initialization goes here
  }

  int32_t proc_joingroup(const  ::TJoinGroup& oReq) {
    // Your implementation goes here
    printf("proc_joingroup\n");
  }

  int32_t proc_blockUserInGroup(const int32_t runid, const int32_t userid, const int32_t groupid, const int32_t reasonid, const int32_t kickout_min) {
    // Your implementation goes here
    printf("proc_blockUserInGroup\n");
  }

  bool proc_setGroupOwner(const int32_t groupid, const int32_t ownerid) {
    // Your implementation goes here
    printf("proc_setGroupOwner\n");
  }

  bool proc_loadGroup(const int32_t groupid, const std::string& host) {
    // Your implementation goes here
    printf("proc_loadGroup\n");
  }

  bool proc_modGroup(const int32_t groupid, const std::string& host) {
    // Your implementation goes here
    printf("proc_modGroup\n");
  }

  int32_t proc_modGroupSettings(const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    // Your implementation goes here
    printf("proc_modGroupSettings\n");
  }

  int32_t proc_modVisitSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    // Your implementation goes here
    printf("proc_modVisitSwitch\n");
  }

  int32_t proc_modJoinGroupMode(const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    // Your implementation goes here
    printf("proc_modJoinGroupMode\n");
  }

  int32_t proc_kickAllOnlookers(const int32_t runid, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_kickAllOnlookers\n");
  }

  int32_t proc_modVoiceChatSwitch(const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    // Your implementation goes here
    printf("proc_modVoiceChatSwitch\n");
  }

  int32_t proc_modVideoAuthSwitch(const int32_t runid, const int32_t groupid, const bool Switch) {
    // Your implementation goes here
    printf("proc_modVideoAuthSwitch\n");
  }

  int32_t proc_modGroupUserRole(const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    // Your implementation goes here
    printf("proc_modGroupUserRole\n");
  }

  void proc_getGroupVisitorLst(std::vector< ::TUserGroupInfo> & _return, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_getGroupVisitorLst\n");
  }

  void proc_queryInGroupList(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> > & _return, const int32_t userid, const int32_t groupid) {
    // Your implementation goes here
    printf("proc_queryInGroupList\n");
  }

  int32_t proc_give_tip(const int32_t srcid, const int32_t toid, const int32_t groupid, const std::string& gifname, const int32_t tiptype, const std::string& srcname, const std::string& toname, const std::string& gifpicture) {
    // Your implementation goes here
    printf("proc_give_tip\n");
  }

  int32_t proc_send_link(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t pointId, const std::string& head_add, const int32_t recommendid, const int32_t user_id) {
    // Your implementation goes here
    printf("proc_send_link\n");
  }

  int32_t proc_send_notice(const std::string& notice) {
    // Your implementation goes here
    printf("proc_send_notice\n");
  }

  int32_t proc_send_course(const int32_t groupid, const std::string& title, const std::string& source, const std::string& summary, const int32_t bTip, const int32_t amount, const int32_t courseId, const std::string& head_add, const std::string& teachername, const std::string& srcimg, const int32_t recommendid, const int32_t user_id) {
    // Your implementation goes here
    printf("proc_send_course\n");
  }

  int32_t proc_reloadUserInfo(const int32_t userid) {
    // Your implementation goes here
    printf("proc_reloadUserInfo\n");
  }

  int32_t proc_reloadRoomVirtualNumInfo(const int32_t liveid, const int32_t numbers) {
    // Your implementation goes here
    printf("proc_reloadRoomVirtualNumInfo\n");
  }

  int32_t proc_CloseLiveAndCourse(const int32_t runuserid, const int32_t liveid, const int32_t status, const int32_t type) {
    // Your implementation goes here
    printf("proc_CloseLiveAndCourse\n");
  }

  int32_t proc_liveStart(const std::string& streamId) {
    // Your implementation goes here
    printf("proc_liveStart\n");
  }

  int32_t proc_liveStop(const std::string& streamId) {
    // Your implementation goes here
    printf("proc_liveStop\n");
  }

  int32_t proc_sendNewSubCourseNotice(const int32_t courseId, const int32_t subCourseId, const int32_t userId, const std::string& courseName, const std::string& subCourseName, const std::string& beginTime) {
    // Your implementation goes here
    printf("proc_sendNewSubCourseNotice\n");
  }

  int32_t proc_sendNewCourseNotice(const int32_t courseId, const bool isSubCourse) {
    // Your implementation goes here
    printf("proc_sendNewCourseNotice\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TRoomSvrHandler> handler(new TRoomSvrHandler());
  shared_ptr<TProcessor> processor(new TRoomSvrProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

