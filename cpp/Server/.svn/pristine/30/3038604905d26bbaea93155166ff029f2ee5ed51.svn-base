// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "TPushMsg.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

class TPushMsgAsyncHandler : public TPushMsgCobSvIf {
 public:
  TPushMsgAsyncHandler() {
    syncHandler_ = std::auto_ptr<TPushMsgHandler>(new TPushMsgHandler);
    // Your initialization goes here
  }
  virtual ~TPushMsgAsyncHandler();

  void proc_modGroupSettings(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const std::map< ::E_THRIFT_GROUP_SETTING::type, std::string> & mSetting) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupSettings(runid, groupid, mSetting);
    return cob(_return);
  }

  void proc_modVisitSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool kickOnlooker) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVisitSwitch(runid, groupid, Switch, kickOnlooker);
    return cob(_return);
  }

  void proc_modJoinGroupMode(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const  ::TJoinGroupCondition& maleCondition, const  ::TJoinGroupCondition& femaleCondition) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modJoinGroupMode(runid, groupid, maleCondition, femaleCondition);
    return cob(_return);
  }

  void proc_kickAllOnlookers(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid) {
    int32_t _return = 0;
    _return = syncHandler_->proc_kickAllOnlookers(runid, groupid);
    return cob(_return);
  }

  void proc_modContributionListSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modContributionListSwitch(runid, groupid, Switch);
    return cob(_return);
  }

  void proc_modVoiceChatSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const bool visitOnMic) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVoiceChatSwitch(runid, groupid, Switch, visitOnMic);
    return cob(_return);
  }

  void proc_modVideoAuthSwitch(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modVideoAuthSwitch(runid, groupid, Switch);
    return cob(_return);
  }

  void proc_modGroupGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const bool Switch, const int8_t rangeType, const int8_t percent) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupGainSetting(runid, groupid, Switch, rangeType, percent);
    return cob(_return);
  }

  void proc_modGroupUserGainSetting(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int8_t percent) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupUserGainSetting(runid, groupid, userid, percent);
    return cob(_return);
  }

  void proc_modGroupUserRole(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const int32_t roleType) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupUserRole(runid, groupid, userid, roleType);
    return cob(_return);
  }

  void proc_modGroupBlackList(tcxx::function<void(int32_t const& _return)> cob, const int32_t runid, const int32_t groupid, const int32_t userid, const bool isAdd) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroupBlackList(runid, groupid, userid, isAdd);
    return cob(_return);
  }

  void proc_getGroupVisitorLst(tcxx::function<void(std::vector< ::TUserGroupInfo>  const& _return)> cob, const int32_t groupid) {
    std::vector< ::TUserGroupInfo>  _return;
    syncHandler_->proc_getGroupVisitorLst(_return, groupid);
    return cob(_return);
  }

  void proc_reloadUserInfo(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid) {
    int32_t _return = 0;
    _return = syncHandler_->proc_reloadUserInfo(userid);
    return cob(_return);
  }

  void proc_sendSysNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const  ::TNoticeMsg& msg, const std::vector< ::TCondition> & lstCondition, const bool onlineOnly) {
    int32_t _return = 0;
    _return = syncHandler_->proc_sendSysNoticeMsg(msg, lstCondition, onlineOnly);
    return cob(_return);
  }

  void proc_sendUserNoticeMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid, const  ::TNoticeMsg& msg) {
    int32_t _return = 0;
    _return = syncHandler_->proc_sendUserNoticeMsg(userid, msg);
    return cob(_return);
  }

  void proc_sendAdminVideoAuditMsg(tcxx::function<void(int32_t const& _return)> cob, const int32_t userid, const int32_t groupid, const std::string& url) {
    int32_t _return = 0;
    _return = syncHandler_->proc_sendAdminVideoAuditMsg(userid, groupid, url);
    return cob(_return);
  }

  void proc_handleVideoAuditMsg(tcxx::function<void(bool const& _return)> cob, const int32_t handle_userid, const int32_t groupid, const int32_t msgid, const bool agree, const int32_t apply_userid) {
    bool _return = false;
    _return = syncHandler_->proc_handleVideoAuditMsg(handle_userid, groupid, msgid, agree, apply_userid);
    return cob(_return);
  }

  void proc_loadGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& host) {
    int32_t _return = 0;
    _return = syncHandler_->proc_loadGroup(groupid, host);
    return cob(_return);
  }

  void proc_modGroup(tcxx::function<void(int32_t const& _return)> cob, const int32_t groupid, const std::string& host) {
    int32_t _return = 0;
    _return = syncHandler_->proc_modGroup(groupid, host);
    return cob(_return);
  }

  void proc_setGroupOwner(tcxx::function<void(bool const& _return)> cob, const int32_t groupid, const int32_t new_ownerid) {
    bool _return = false;
    _return = syncHandler_->proc_setGroupOwner(groupid, new_ownerid);
    return cob(_return);
  }

  void proc_queryInGroupList(tcxx::function<void(std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  const& _return)> cob, const int32_t userid, const int32_t groupid) {
    std::map< ::e_INGROUP_TYPE::type, std::vector<int32_t> >  _return;
    syncHandler_->proc_queryInGroupList(_return, userid, groupid);
    return cob(_return);
  }

  void proc_joingroup(tcxx::function<void(int32_t const& _return)> cob, const  ::TJoinGroup& oReq) {
    int32_t _return = 0;
    _return = syncHandler_->proc_joingroup(oReq);
    return cob(_return);
  }

 protected:
  std::auto_ptr<TPushMsgHandler> syncHandler_;
};

